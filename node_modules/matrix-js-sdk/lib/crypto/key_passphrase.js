import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
/*
Copyright 2018 - 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { randomString } from "../randomstring";
import { subtleCrypto, TextEncoder } from "./crypto";
var DEFAULT_ITERATIONS = 500000;
var DEFAULT_BITSIZE = 256;

/* eslint-disable camelcase */

/* eslint-enable camelcase */

export function keyFromAuthData(authData, password) {
  if (!global.Olm) {
    throw new Error("Olm is not available");
  }
  if (!authData.private_key_salt || !authData.private_key_iterations) {
    throw new Error("Salt and/or iterations not found: " + "this backup cannot be restored with a passphrase");
  }
  return deriveKey(password, authData.private_key_salt, authData.private_key_iterations, authData.private_key_bits || DEFAULT_BITSIZE);
}
export function keyFromPassphrase(_x) {
  return _keyFromPassphrase.apply(this, arguments);
}
function _keyFromPassphrase() {
  _keyFromPassphrase = _asyncToGenerator(function* (password) {
    if (!global.Olm) {
      throw new Error("Olm is not available");
    }
    var salt = randomString(32);
    var key = yield deriveKey(password, salt, DEFAULT_ITERATIONS, DEFAULT_BITSIZE);
    return {
      key,
      salt,
      iterations: DEFAULT_ITERATIONS
    };
  });
  return _keyFromPassphrase.apply(this, arguments);
}
export function deriveKey(_x2, _x3, _x4) {
  return _deriveKey.apply(this, arguments);
}
function _deriveKey() {
  _deriveKey = _asyncToGenerator(function* (password, salt, iterations) {
    var numBits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_BITSIZE;
    if (!subtleCrypto || !TextEncoder) {
      throw new Error("Password-based backup is not available on this platform");
    }
    var key = yield subtleCrypto.importKey("raw", new TextEncoder().encode(password), {
      name: "PBKDF2"
    }, false, ["deriveBits"]);
    var keybits = yield subtleCrypto.deriveBits({
      name: "PBKDF2",
      salt: new TextEncoder().encode(salt),
      iterations: iterations,
      hash: "SHA-512"
    }, key, numBits);
    return new Uint8Array(keybits);
  });
  return _deriveKey.apply(this, arguments);
}
//# sourceMappingURL=key_passphrase.js.map