import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/*
Copyright 2022 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { UnstableValue } from "matrix-events-sdk";
import { logger } from "../../logger";
import { sleep } from "../../utils";
import { LegacyRendezvousFailureReason as RendezvousFailureReason } from "..";
import { ClientPrefix } from "../../http-api";
var TYPE = new UnstableValue("http.v1", "org.matrix.msc3886.http.v1");
/**
 * Implementation of the unstable [MSC3886](https://github.com/matrix-org/matrix-spec-proposals/pull/3886)
 * simple HTTP rendezvous protocol.
 * Note that this is UNSTABLE and may have breaking changes without notice.
 * MSC3886/MSC3903/MSC3906 are now closed and so this functionality will be removed in future.
 * However, we want to keep this implementation around for some time.
 * TODO: define an end-of-life date for this implementation.
 */
export class MSC3886SimpleHttpRendezvousTransport {
  constructor(_ref) {
    var {
      onFailure,
      client,
      fallbackRzServer,
      fetchFn
    } = _ref;
    _defineProperty(this, "cancelled", false);
    _defineProperty(this, "_ready", false);
    this.fetchFn = fetchFn;
    this.onFailure = onFailure;
    this.client = client;
    this.fallbackRzServer = fallbackRzServer;
  }
  get ready() {
    return this._ready;
  }
  details() {
    var _this = this;
    return _asyncToGenerator(function* () {
      if (!_this.uri) {
        throw new Error("Rendezvous not set up");
      }
      return {
        type: TYPE.name,
        uri: _this.uri
      };
    })();
  }
  fetch(resource, options) {
    if (this.fetchFn) {
      return this.fetchFn(resource, options);
    }
    return global.fetch(resource, options);
  }
  getPostEndpoint() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        if (yield _this2.client.doesServerSupportUnstableFeature("org.matrix.msc3886")) {
          return "".concat(_this2.client.baseUrl).concat(ClientPrefix.Unstable, "/org.matrix.msc3886/rendezvous");
        }
      } catch (err) {
        logger.warn("Failed to get unstable features", err);
      }
      return _this2.fallbackRzServer;
    })();
  }
  send(data) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      var _this3$uri, _res$headers$get;
      if (_this3.cancelled) {
        return;
      }
      var method = _this3.uri ? "PUT" : "POST";
      var uri = (_this3$uri = _this3.uri) !== null && _this3$uri !== void 0 ? _this3$uri : yield _this3.getPostEndpoint();
      if (!uri) {
        throw new Error("Invalid rendezvous URI");
      }
      var headers = {
        "content-type": "application/json"
      };
      if (_this3.etag) {
        headers["if-match"] = _this3.etag;
      }
      var res = yield _this3.fetch(uri, {
        method,
        headers,
        body: JSON.stringify(data)
      });
      if (res.status === 404) {
        return _this3.cancel(RendezvousFailureReason.Unknown);
      }
      _this3.etag = (_res$headers$get = res.headers.get("etag")) !== null && _res$headers$get !== void 0 ? _res$headers$get : undefined;
      if (method === "POST") {
        var _res$url;
        var location = res.headers.get("location");
        if (!location) {
          throw new Error("No rendezvous URI given");
        }
        var expires = res.headers.get("expires");
        if (expires) {
          _this3.expiresAt = new Date(expires);
        }
        // we would usually expect the final `url` to be set by a proper fetch implementation.
        // however, if a polyfill based on XHR is used it won't be set, we we use existing URI as fallback
        var baseUrl = (_res$url = res.url) !== null && _res$url !== void 0 ? _res$url : uri;
        // resolve location header which could be relative or absolute
        _this3.uri = new URL(location, "".concat(baseUrl).concat(baseUrl.endsWith("/") ? "" : "/")).href;
        _this3._ready = true;
      }
    })();
  }
  receive() {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      if (!_this4.uri) {
        throw new Error("Rendezvous not set up");
      }
      // eslint-disable-next-line no-constant-condition
      while (true) {
        if (_this4.cancelled) {
          return undefined;
        }
        var headers = {};
        if (_this4.etag) {
          headers["if-none-match"] = _this4.etag;
        }
        var poll = yield _this4.fetch(_this4.uri, {
          method: "GET",
          headers
        });
        if (poll.status === 404) {
          _this4.cancel(RendezvousFailureReason.Unknown);
          return undefined;
        }

        // rely on server expiring the channel rather than checking ourselves

        if (poll.headers.get("content-type") !== "application/json") {
          var _poll$headers$get;
          _this4.etag = (_poll$headers$get = poll.headers.get("etag")) !== null && _poll$headers$get !== void 0 ? _poll$headers$get : undefined;
        } else if (poll.status === 200) {
          var _poll$headers$get2;
          _this4.etag = (_poll$headers$get2 = poll.headers.get("etag")) !== null && _poll$headers$get2 !== void 0 ? _poll$headers$get2 : undefined;
          return poll.json();
        }
        yield sleep(1000);
      }
    })();
  }
  cancel(reason) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      var _this5$onFailure;
      if (reason === RendezvousFailureReason.Unknown && _this5.expiresAt && _this5.expiresAt.getTime() < Date.now()) {
        reason = RendezvousFailureReason.Expired;
      }
      _this5.cancelled = true;
      _this5._ready = false;
      (_this5$onFailure = _this5.onFailure) === null || _this5$onFailure === void 0 || _this5$onFailure.call(_this5, reason);
      if (_this5.uri && reason === RendezvousFailureReason.UserDeclined) {
        try {
          yield _this5.fetch(_this5.uri, {
            method: "DELETE"
          });
        } catch (e) {
          logger.warn(e);
        }
      }
    })();
  }
}
//# sourceMappingURL=MSC3886SimpleHttpRendezvousTransport.js.map