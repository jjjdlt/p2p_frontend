"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var mutateTheme_exports = {};
__export(mutateTheme_exports, {
  _mutateTheme: () => _mutateTheme,
  mutateThemes: () => mutateThemes
});
module.exports = __toCommonJS(mutateTheme_exports);
var import_constants = require("@tamagui/constants"), import_web = require("@tamagui/web"), import_react = require("react");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function mutateThemes(_param) {
  var themes = _param.themes, batch = _param.batch, _param_insertCSS = _param.insertCSS, insertCSS = _param_insertCSS === void 0 ? !0 : _param_insertCSS, props = _object_without_properties(_param, [
    "themes",
    "batch",
    "insertCSS"
  ]), allThemesProxied = {}, allThemesRaw = {}, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = themes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var _step_value = _step.value, name = _step_value.name, theme = _step_value.theme, res = _mutateTheme(_object_spread_props(_object_spread({}, props), {
        name,
        theme,
        // we'll do one update at the end
        avoidUpdate: !0,
        // always add which also replaces but doesnt fail first time
        mutationType: "add"
      }));
      res && (allThemesProxied[name] = res.theme, allThemesRaw[name] = res.themeRaw);
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  var cssRules = insertCSS ? insertThemeCSS(allThemesRaw, batch) : [];
  return (0, import_react.startTransition)(function() {
    for (var themeName in allThemesProxied) {
      var theme2 = allThemesProxied[themeName];
      updateThemeConfig(themeName, theme2), notifyThemeManagersOfUpdate(themeName, theme2);
    }
  }), {
    themes: allThemesProxied,
    themesRaw: allThemesRaw,
    cssRules
  };
}
function _mutateTheme(props) {
  if (import_constants.isServer) {
    process.env.NODE_ENV === "development" && console.warn("Theme mutation is not supported on server side");
    return;
  }
  var config = (0, import_web.getConfig)(), themeName = props.name, themeIn = props.theme, insertCSS = props.insertCSS, mutationType = props.mutationType;
  if (process.env.NODE_ENV === "development") {
    if (!config)
      throw new Error("No config");
    var theme = config.themes[props.name];
    if (mutationType !== "add" && !theme)
      throw new Error("".concat(mutationType === "replace" ? "Replace" : "Update", " theme failed! Theme ").concat(props.name, " does not exist"));
  }
  var _config_themes_themeName, theme1 = _object_spread({}, mutationType === "update" ? (_config_themes_themeName = config.themes[themeName]) !== null && _config_themes_themeName !== void 0 ? _config_themes_themeName : {} : {}, themeIn);
  for (var key in theme1)
    (0, import_web.ensureThemeVariable)(theme1, key);
  var themeProxied = (0, import_web.proxyThemeToParents)(themeName, theme1), response = {
    themeRaw: theme1,
    theme: themeProxied,
    cssRules: []
  };
  return props.avoidUpdate || (insertCSS && (response.cssRules = insertThemeCSS(_define_property({}, themeName, theme1))), updateThemeConfig(themeName, themeProxied), notifyThemeManagersOfUpdate(themeName, themeProxied)), response;
}
function updateThemeConfig(themeName, theme) {
  var config = (0, import_web.getConfig)();
  config.themes[themeName] = theme, (0, import_web.updateConfig)("themes", config.themes);
}
function notifyThemeManagersOfUpdate(themeName, theme) {
  import_web.activeThemeManagers.forEach(function(manager) {
    manager.state.name === themeName && manager.updateStateFromProps({
      name: themeName,
      forceTheme: theme
    }, !0);
  });
}
function insertThemeCSS(themes) {
  var batch = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
  return [];
  var config, cssRules;
  for (var themeName in themes) {
    var theme = themes[themeName], rules = (0, import_web.getThemeCSSRules)({
      config,
      themeName,
      names: [
        themeName
      ],
      hasDarkLight: !0,
      theme
    });
    cssRules = _to_consumable_array(cssRules).concat(_to_consumable_array(rules)), batch || updateStyle("t_theme_style_".concat(themeName), rules);
  }
  if (batch) {
    var id;
    updateStyle("t_theme_style_".concat(id), cssRules);
  }
}
function updateStyle(id, rules) {
  var existing = document.querySelector("#".concat(id)), style = document.createElement("style");
  if (style.id = id, style.appendChild(document.createTextNode(rules.join(`
`))), document.head.appendChild(style), existing) {
    var _existing_parentElement;
    (_existing_parentElement = existing.parentElement) === null || _existing_parentElement === void 0 || _existing_parentElement.removeChild(existing);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  _mutateTheme,
  mutateThemes
});
//# sourceMappingURL=_mutateTheme.js.map
