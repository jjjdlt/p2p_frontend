"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var AlertDialog_exports = {};
__export(AlertDialog_exports, {
  AlertDialog: () => AlertDialog,
  AlertDialogAction: () => AlertDialogAction,
  AlertDialogCancel: () => AlertDialogCancel,
  AlertDialogContent: () => AlertDialogContent,
  AlertDialogDescription: () => AlertDialogDescription,
  AlertDialogOverlay: () => AlertDialogOverlay,
  AlertDialogPortal: () => AlertDialogPortal,
  AlertDialogTitle: () => AlertDialogTitle,
  AlertDialogTrigger: () => AlertDialogTrigger,
  createAlertDialogScope: () => createAlertDialogScope
});
module.exports = __toCommonJS(AlertDialog_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_compose_refs = require("@tamagui/compose-refs"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_create_context = require("@tamagui/create-context"), import_dialog = require("@tamagui/dialog"), import_helpers = require("@tamagui/helpers"), import_use_controllable_state = require("@tamagui/use-controllable-state"), React = __toESM(require("react")), import_react_native = require("react-native");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var ROOT_NAME = "AlertDialog", _createContextScope = _sliced_to_array((0, import_create_context.createContextScope)(ROOT_NAME, [
  import_dialog.createDialogScope
]), 2), createAlertDialogContext = _createContextScope[0], createAlertDialogScope = _createContextScope[1], useDialogScope = (0, import_dialog.createDialogScope)(), TRIGGER_NAME = "AlertDialogTrigger", NativeAlertDialogTriggerFrame = (0, import_core.styled)(import_core.View, {
  name: TRIGGER_NAME
}), AlertDialogTrigger = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  if (props.__native) {
    var __native = props.__native, onPress = props.onPress, __onPress = props.__onPress, rest = _object_without_properties(props, [
      "__native",
      "onPress",
      "__onPress"
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NativeAlertDialogTriggerFrame, _object_spread_props(_object_spread({}, rest), {
      onPress: (0, import_helpers.composeEventHandlers)(onPress, __onPress)
    }));
  }
  var __scopeAlertDialog = props.__scopeAlertDialog, triggerProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogTrigger, _object_spread_props(_object_spread({}, dialogScope, triggerProps), {
    ref: forwardedRef
  }));
});
AlertDialogTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "AlertDialogPortal", AlertDialogPortal = function(props) {
  var __scopeAlertDialog = props.__scopeAlertDialog, portalProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogPortal, _object_spread({}, dialogScope, portalProps));
};
AlertDialogPortal.displayName = PORTAL_NAME;
var OVERLAY_NAME = "AlertDialogOverlay", AlertDialogOverlayFrame = (0, import_core.styled)(import_dialog.DialogOverlayFrame, {
  name: OVERLAY_NAME
}), AlertDialogOverlay = AlertDialogOverlayFrame.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, overlayProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogOverlay, _object_spread_props(_object_spread({}, dialogScope, overlayProps), {
    ref: forwardedRef
  }));
}));
AlertDialogOverlay.displayName = OVERLAY_NAME;
var CONTENT_NAME = "AlertDialogContent", _createAlertDialogContext = _sliced_to_array(createAlertDialogContext(CONTENT_NAME), 2), AlertDialogContentProvider = _createAlertDialogContext[0], useAlertDialogContentContext = _createAlertDialogContext[1], AlertDialogContent = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, children = props.children, contentProps = _object_without_properties(props, [
    "__scopeAlertDialog",
    "children"
  ]), dialogScope = useDialogScope(__scopeAlertDialog), contentRef = React.useRef(null), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, contentRef), cancelRef = React.useRef(null);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogWarningProvider, {
    contentName: CONTENT_NAME,
    titleName: TITLE_NAME,
    docsSlug: "alert-dialog",
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AlertDialogContentProvider, {
      scope: __scopeAlertDialog,
      cancelRef,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_dialog.DialogContent, _object_spread_props(_object_spread({
        // @ts-ignore
        role: "alertdialog"
      }, dialogScope, contentProps), {
        ref: composedRefs,
        onOpenAutoFocus: (0, import_helpers.composeEventHandlers)(contentProps.onOpenAutoFocus, function(event) {
          if (event.preventDefault(), import_constants.isWeb) {
            var _cancelRef_current;
            (_cancelRef_current = cancelRef.current) === null || _cancelRef_current === void 0 || _cancelRef_current.focus({
              preventScroll: !0
            });
          }
        }),
        onPointerDownOutside: function(event) {
          return event.preventDefault();
        },
        onInteractOutside: function(event) {
          return event.preventDefault();
        },
        children: [
          /**
          * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`
          * around everything, otherwise the `DescriptionWarning` would be rendered straight away.
          * This is because we want the accessibility checks to run only once the content is actually
          * open and that behaviour is already encapsulated in `DialogContent`.
          */
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.Slottable, {
            children
          }),
          process.env.NODE_ENV === "development" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DescriptionWarning, {
            contentRef
          })
        ]
      }))
    })
  });
});
AlertDialogContent.displayName = CONTENT_NAME;
var TITLE_NAME = "AlertDialogTitle", AlertDialogTitle = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, titleProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogTitle, _object_spread_props(_object_spread({}, dialogScope, titleProps), {
    ref: forwardedRef
  }));
});
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME = "AlertDialogDescription", AlertDialogDescription = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, descriptionProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogDescription, _object_spread_props(_object_spread({}, dialogScope, descriptionProps), {
    ref: forwardedRef
  }));
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
var ACTION_NAME = "AlertDialogAction", AlertDialogAction = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, actionProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogClose, _object_spread_props(_object_spread({}, dialogScope, actionProps), {
    ref: forwardedRef
  }));
});
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel", AlertDialogCancel = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAlertDialog = props.__scopeAlertDialog, cancelProps = _object_without_properties(props, [
    "__scopeAlertDialog"
  ]), cancelRef = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog).cancelRef, dialogScope = useDialogScope(__scopeAlertDialog), ref = (0, import_compose_refs.useComposedRefs)(forwardedRef, cancelRef);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogClose, _object_spread_props(_object_spread({}, dialogScope, cancelProps), {
    ref
  }));
});
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning = function(param) {
  var contentRef = param.contentRef;
  return process.env.NODE_ENV === "development" && React.useEffect(function() {
    var _contentRef_current;
    if (import_constants.isWeb) {
      var hasDescription = document.getElementById((_contentRef_current = contentRef.current) === null || _contentRef_current === void 0 ? void 0 : _contentRef_current.getAttribute("aria-describedby"));
      hasDescription || console.warn("`".concat(CONTENT_NAME, "` requires a description for the component to be accessible for screen reader users.\n  \n        You can add a description to the `").concat(CONTENT_NAME, "` by passing a `").concat(DESCRIPTION_NAME, "` component as a child, which also benefits sighted users by adding visible context to the dialog.\n        \n        Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `").concat(CONTENT_NAME, "`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.\n        \n        For more information, see https://tamagui.dev/docs/components/alert-dialog"));
    }
  }, [
    contentRef
  ]), null;
}, AlertDialogInner = function(props) {
  var __scopeAlertDialog = props.__scopeAlertDialog, native = props.native, alertDialogProps = _object_without_properties(props, [
    "__scopeAlertDialog",
    "native"
  ]), dialogScope = useDialogScope(__scopeAlertDialog), _useControllableState = _sliced_to_array((0, import_use_controllable_state.useControllableState)({
    prop: props.open,
    defaultProp: props.defaultOpen || !1,
    onChange: props.onOpenChange,
    transition: !0
  }), 2), open = _useControllableState[0], setOpen = _useControllableState[1], triggerElement = null, title = "", description = "", buttons = [];
  return forEachChildDeep(React.Children.toArray(props.children), function(child) {
    if (!/* @__PURE__ */ React.isValidElement(child)) return !1;
    var name = (0, import_core.isTamaguiElement)(child) ? child.type.staticConfig.componentName : child.type.displayName;
    switch (name) {
      case TRIGGER_NAME:
        return triggerElement = /* @__PURE__ */ React.cloneElement(child, {
          __native: !0
        }), !1;
      case TITLE_NAME:
        return title = getStringChildren(child), !1;
      case DESCRIPTION_NAME:
        return description = getStringChildren(child), !1;
      case ACTION_NAME:
      case CANCEL_NAME: {
        var style = name === ACTION_NAME ? "default" : "cancel", text = getStringChildren(child), onPress = function() {
          var _childProps_onPress, childProps = child.props;
          childProps == null || (_childProps_onPress = childProps.onPress) === null || _childProps_onPress === void 0 || _childProps_onPress.call(childProps, {
            native: !0
          }), setOpen(!1);
        };
        return buttons.push({
          style,
          text,
          // @ts-ignore
          onPress
        }), !1;
      }
      default:
        return !0;
    }
  }), (0, import_constants.useIsomorphicLayoutEffect)(function() {
    !open || !native || (title || description) && import_react_native.Alert.alert(title, description, buttons);
  }, [
    native,
    open
  ]), native ? /* @__PURE__ */ React.cloneElement(triggerElement, {
    __onPress: function() {
      setOpen(!0);
    }
  }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.Dialog, _object_spread_props(_object_spread({}, dialogScope, alertDialogProps), {
    modal: !0
  }));
};
function forEachChildDeep(children, onChild) {
  var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var child = _step.value;
      /* @__PURE__ */ React.isValidElement(child) && onChild(child) && child.props.children && forEachChildDeep(React.Children.toArray(child.props.children), onChild);
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
}
function getStringChildren(child) {
  var string = "";
  return forEachChildDeep(React.Children.toArray(child), function(child2) {
    return typeof child2.props.children == "string" ? (string = child2.props.children, !1) : !0;
  }), string;
}
var AlertDialog = (0, import_helpers.withStaticProperties)(AlertDialogInner, {
  Trigger: AlertDialogTrigger,
  Portal: AlertDialogPortal,
  Overlay: AlertDialogOverlay,
  Content: AlertDialogContent,
  Action: AlertDialogAction,
  Cancel: AlertDialogCancel,
  Title: AlertDialogTitle,
  Description: AlertDialogDescription
});
AlertDialog.displayName = ROOT_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
  createAlertDialogScope
});
//# sourceMappingURL=AlertDialog.js.map
