function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function getNextSortedValues() {
  var prevValues = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], nextValue = arguments.length > 1 ? arguments[1] : void 0, atIndex = arguments.length > 2 ? arguments[2] : void 0, nextValues = _to_consumable_array(prevValues);
  return nextValues[atIndex] = nextValue, nextValues.sort(function(a, b) {
    return a - b;
  });
}
function convertValueToPercentage(value, min, max) {
  var maxSteps = max - min, percentPerStep = 100 / maxSteps;
  return percentPerStep * (value - min);
}
function getLabel(index, totalValues) {
  if (totalValues > 2)
    return "Value ".concat(index + 1, " of ").concat(totalValues);
  if (totalValues === 2)
    return [
      "Minimum",
      "Maximum"
    ][index];
}
function getClosestValueIndex(values, nextValue) {
  var _Math;
  if (values.length === 1) return 0;
  var distances = values.map(function(value) {
    return Math.abs(value - nextValue);
  }), closestDistance = (_Math = Math).min.apply(_Math, _to_consumable_array(distances));
  return distances.indexOf(closestDistance);
}
function getThumbInBoundsOffset(width, left, direction) {
  var quarterWidth = width / 4, halfPercent = 50, offset = linearScale([
    0,
    halfPercent
  ], [
    0,
    quarterWidth
  ]);
  return (quarterWidth - offset(left) * direction) * direction;
}
function getStepsBetweenValues(values) {
  return values.slice(0, -1).map(function(value, index) {
    return values[index + 1] - value;
  });
}
function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    var _Math, stepsBetweenValues = getStepsBetweenValues(values), actualMinStepsBetweenValues = (_Math = Math).min.apply(_Math, _to_consumable_array(stepsBetweenValues));
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return !0;
}
function linearScale(input, output) {
  return function(value) {
    if (input[0] === input[1] || output[0] === output[1]) return output[0];
    var ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function roundValue(value, decimalCount) {
  var rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
export {
  convertValueToPercentage,
  getClosestValueIndex,
  getDecimalCount,
  getLabel,
  getNextSortedValues,
  getThumbInBoundsOffset,
  hasMinStepsBetweenValues,
  linearScale,
  roundValue
};
//# sourceMappingURL=helpers.js.map
