import { createContextScope } from "@tamagui/create-context";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var SLIDER_NAME = "Slider", _createContextScope = _sliced_to_array(createContextScope(SLIDER_NAME), 2), createSliderContext = _createContextScope[0], createSliderScope = _createContextScope[1], _createSliderContext = _sliced_to_array(createSliderContext(SLIDER_NAME), 2), SliderProvider = _createSliderContext[0], useSliderContext = _createSliderContext[1], _createSliderContext1 = _sliced_to_array(createSliderContext(SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  sizeProp: "width",
  size: 0,
  direction: 1
}), 2), SliderOrientationProvider = _createSliderContext1[0], useSliderOrientationContext = _createSliderContext1[1], PAGE_KEYS = [
  "PageUp",
  "PageDown"
], ARROW_KEYS = [
  "ArrowUp",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight"
], BACK_KEYS = {
  ltr: [
    "ArrowDown",
    "Home",
    "ArrowLeft",
    "PageDown"
  ],
  rtl: [
    "ArrowDown",
    "Home",
    "ArrowRight",
    "PageDown"
  ]
};
export {
  ARROW_KEYS,
  BACK_KEYS,
  PAGE_KEYS,
  SLIDER_NAME,
  SliderOrientationProvider,
  SliderProvider,
  createSliderContext,
  createSliderScope,
  useSliderContext,
  useSliderOrientationContext
};
//# sourceMappingURL=constants.js.map
