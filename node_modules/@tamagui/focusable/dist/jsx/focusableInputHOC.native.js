import { jsx as _jsx } from "react/jsx-runtime";
import { composeRefs } from "@tamagui/compose-refs";
import { useEvent } from "@tamagui/web";
import { useCallback, useEffect, useRef } from "react";
import { registerFocusable } from "./registerFocusable";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function useFocusable(param) {
  var isInput = param.isInput, props = param.props, ref = param.ref, id = props.id, onChangeText = props.onChangeText, value = props.value, defaultValue = props.defaultValue, inputValue = useRef(value || defaultValue || ""), unregisterFocusable = useRef(), inputRef = useCallback(function(input) {
    var _unregisterFocusable_current;
    id && input && ((_unregisterFocusable_current = unregisterFocusable.current) === null || _unregisterFocusable_current === void 0 || _unregisterFocusable_current.call(unregisterFocusable), unregisterFocusable.current = registerFocusable(id, _object_spread({
      focus: input.focus
    }, isInput && {
      // react-native doesn't support programmatic .select()
      focusAndSelect: function() {
        input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
      }
    })));
  }, [
    isInput,
    id
  ]), combinedRefs = composeRefs(ref, inputRef);
  return useEffect(function() {
    return function() {
      var _unregisterFocusable_current;
      (_unregisterFocusable_current = unregisterFocusable.current) === null || _unregisterFocusable_current === void 0 || _unregisterFocusable_current.call(unregisterFocusable);
    };
  }, []), {
    ref: combinedRefs,
    onChangeText: useEvent(function(value2) {
      inputValue.current = value2, onChangeText == null || onChangeText(value2);
    })
  };
}
function focusableInputHOC(Component) {
  return Component.styleable(function(props, ref) {
    var _Component_staticConfig, isInput = (_Component_staticConfig = Component.staticConfig) === null || _Component_staticConfig === void 0 ? void 0 : _Component_staticConfig.isInput, _useFocusable = useFocusable({
      ref,
      props,
      isInput
    }), combinedRef = _useFocusable.ref, onChangeText = _useFocusable.onChangeText, finalProps = isInput ? _object_spread_props(_object_spread({}, props), {
      onChangeText
    }) : props;
    return /* @__PURE__ */ _jsx(Component, _object_spread({
      ref: combinedRef
    }, finalProps));
  });
}
export {
  focusableInputHOC,
  useFocusable
};
//# sourceMappingURL=focusableInputHOC.js.map
