import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { registerFocusable } from "@tamagui/focusable";
import { isIndeterminate, useCheckbox } from "@tamagui/checkbox-headless";
import { getVariableValue, shouldRenderNativePlatform, useProps, useTheme, withStaticProperties } from "@tamagui/core";
import { getFontSize } from "@tamagui/font-size";
import { getSize } from "@tamagui/get-token";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { useControllableState } from "@tamagui/use-controllable-state";
import React, { useContext } from "react";
import { CheckboxFrame, CheckboxIndicatorFrame } from "./Checkbox";
import { CheckboxStyledContext } from "./CheckboxStyledContext";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var CheckboxContext = /* @__PURE__ */ React.createContext({
  checked: !1,
  disabled: !1
}), ensureContext = function(x) {
  x.context || (x.context = CheckboxContext);
};
function createCheckbox(createProps) {
  var disableActiveTheme = createProps.disableActiveTheme, _createProps_Frame = createProps.Frame, Frame = _createProps_Frame === void 0 ? CheckboxFrame : _createProps_Frame, _createProps_Indicator = createProps.Indicator, Indicator = _createProps_Indicator === void 0 ? CheckboxIndicatorFrame : _createProps_Indicator;
  ensureContext(Frame), ensureContext(Indicator);
  var FrameComponent = Frame.styleable(function(_props, forwardedRef) {
    var _props_scaleSize = _props.scaleSize, scaleSize = _props_scaleSize === void 0 ? 0.45 : _props_scaleSize, _props_sizeAdjust = _props.sizeAdjust, sizeAdjust = _props_sizeAdjust === void 0 ? 0 : _props_sizeAdjust, scaleIcon = _props.scaleIcon, checkedProp = _props.checked, defaultChecked = _props.defaultChecked, onCheckedChange = _props.onCheckedChange, native = _props.native, _props_unstyled = _props.unstyled, unstyled = _props_unstyled === void 0 ? !1 : _props_unstyled, props = _object_without_properties(_props, [
      "scaleSize",
      "sizeAdjust",
      "scaleIcon",
      "checked",
      "defaultChecked",
      "onCheckedChange",
      "native",
      "unstyled"
    ]), propsActive = useProps(props), styledContext = React.useContext(CheckboxStyledContext), adjustedSize = 0, size = 0;
    if (!unstyled) {
      var _propsActive_size, _ref;
      adjustedSize = getVariableValue(getSize((_ref = (_propsActive_size = propsActive.size) !== null && _propsActive_size !== void 0 ? _propsActive_size : styledContext == null ? void 0 : styledContext.size) !== null && _ref !== void 0 ? _ref : "$true", {
        shift: sizeAdjust
      })), size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize;
    }
    var _useControllableState = _sliced_to_array(useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    }), 2), tmp = _useControllableState[0], checked = tmp === void 0 ? !1 : tmp, setChecked = _useControllableState[1], _useCheckbox = useCheckbox(
      // @ts-ignore
      propsActive,
      [
        checked,
        setChecked
      ],
      forwardedRef
    ), checkboxProps = _useCheckbox.checkboxProps, checkboxRef = _useCheckbox.checkboxRef, bubbleInput = _useCheckbox.bubbleInput;
    React.useEffect(function() {
      if (props.id && !props.disabled)
        return registerFocusable(props.id, {
          focusAndSelect: function() {
            setChecked == null || setChecked(function(value) {
              return !value;
            });
          },
          focus: function() {
          }
        });
    }, [
      props.id,
      props.disabled
    ]);
    var renderNative = shouldRenderNativePlatform(native);
    if (renderNative === "web")
      return /* @__PURE__ */ _jsx("input", {
        type: "checkbox",
        defaultChecked: isIndeterminate(checked) ? !1 : checked,
        tabIndex: -1,
        ref: checkboxRef,
        disabled: checkboxProps.disabled,
        style: _object_spread({
          appearance: "auto",
          accentColor: "var(--color6)"
        }, checkboxProps.style)
      });
    var _propsActive_size1, _ref1, _ref2;
    return /* @__PURE__ */ _jsx(CheckboxContext.Provider, {
      value: {
        checked,
        disabled: checkboxProps.disabled
      },
      children: /* @__PURE__ */ _jsxs(CheckboxStyledContext.Provider, {
        size: (_ref1 = (_propsActive_size1 = propsActive.size) !== null && _propsActive_size1 !== void 0 ? _propsActive_size1 : styledContext == null ? void 0 : styledContext.size) !== null && _ref1 !== void 0 ? _ref1 : "$true",
        scaleIcon: (_ref2 = scaleIcon ?? (styledContext == null ? void 0 : styledContext.scaleIcon)) !== null && _ref2 !== void 0 ? _ref2 : 1,
        children: [
          /* @__PURE__ */ _jsx(Frame, _object_spread_props(_object_spread(_object_spread_props(_object_spread(_object_spread_props(_object_spread({}, !unstyled && {
            width: size,
            height: size
          }), {
            tag: "button",
            ref: checkboxRef,
            unstyled
          }), unstyled === !1 && {
            size,
            theme: checked ? "active" : null
          }), {
            // potential variant
            checked,
            disabled: checkboxProps.disabled
          }), checkboxProps), {
            children: propsActive.children
          })),
          bubbleInput
        ]
      })
    });
  }), IndicatorComponent = Indicator.styleable(function(props, forwardedRef) {
    var childrenProp = props.children, forceMount = props.forceMount, disablePassStyles = props.disablePassStyles, _props_unstyled = props.unstyled, unstyled = _props_unstyled === void 0 ? !1 : _props_unstyled, indicatorProps = _object_without_properties(props, [
      "children",
      "forceMount",
      "disablePassStyles",
      "unstyled"
    ]), styledContext = React.useContext(CheckboxStyledContext), children = childrenProp;
    if (!unstyled) {
      var iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : getFontSize(styledContext.size)) * styledContext.scaleIcon, theme = useTheme(), getThemedIcon = useGetThemedIcon({
        size: iconSize,
        color: theme.color
      }), childrens = React.Children.toArray(childrenProp);
      children = childrens.map(function(child) {
        return disablePassStyles || !/* @__PURE__ */ React.isValidElement(child) ? child : getThemedIcon(child);
      });
    }
    var context = useContext(CheckboxContext);
    return forceMount || isIndeterminate(context.checked) || context.checked === !0 ? /* @__PURE__ */ _jsx(Indicator, _object_spread_props(_object_spread({
      pointerEvents: "none"
    }, indicatorProps), {
      ref: forwardedRef,
      children
    })) : null;
  });
  return withStaticProperties(FrameComponent, {
    Indicator: IndicatorComponent
  });
}
export {
  CheckboxContext,
  createCheckbox
};
//# sourceMappingURL=createCheckbox.js.map
