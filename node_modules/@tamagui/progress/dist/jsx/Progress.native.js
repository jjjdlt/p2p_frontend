import { jsx as _jsx } from "react/jsx-runtime";
import { getVariableValue, styled } from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { getSize } from "@tamagui/get-token";
import { withStaticProperties } from "@tamagui/helpers";
import { ThemeableStack } from "@tamagui/stacks";
import * as React from "react";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var PROGRESS_NAME = "Progress", _createContextScope = _sliced_to_array(createContextScope(PROGRESS_NAME), 2), createProgressContext = _createContextScope[0], createProgressScope = _createContextScope[1], _createProgressContext = _sliced_to_array(createProgressContext(PROGRESS_NAME), 2), ProgressProvider = _createProgressContext[0], useProgressContext = _createProgressContext[1], INDICATOR_NAME = "ProgressIndicator", ProgressIndicatorFrame = styled(ThemeableStack, {
  name: INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        height: "100%",
        width: "100%",
        backgrounded: !0
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ProgressIndicator = ProgressIndicatorFrame.styleable(function(props, forwardedRef) {
  var __scopeProgress = props.__scopeProgress, indicatorProps = _object_without_properties(props, [
    "__scopeProgress"
  ]), context = useProgressContext(INDICATOR_NAME, __scopeProgress), _context_value, pct = context.max - ((_context_value = context.value) !== null && _context_value !== void 0 ? _context_value : 0), x = -(context.width === 0 ? 300 : context.width) * (pct / 100), _context_value1;
  return /* @__PURE__ */ _jsx(ProgressIndicatorFrame, _object_spread_props(_object_spread({
    "data-state": getProgressState(context.value, context.max),
    "data-value": (_context_value1 = context.value) !== null && _context_value1 !== void 0 ? _context_value1 : void 0,
    "data-max": context.max,
    x,
    width: context.width
  }, !props.unstyled && {
    animateOnly: [
      "transform"
    ],
    opacity: context.width === 0 ? 0 : 1
  }, indicatorProps), {
    ref: forwardedRef
  }));
});
function defaultGetValueLabel(value, max) {
  return "".concat(Math.round(value / max * 100), "%");
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isNumber(value) {
  return typeof value == "number";
}
function isValidMaxNumber(max) {
  return isNumber(max) && !Number.isNaN(max) && max > 0;
}
function isValidValueNumber(value, max) {
  return isNumber(value) && !Number.isNaN(value) && value <= max && value >= 0;
}
var DEFAULT_MAX = 100, ProgressFrame = styled(ThemeableStack, {
  name: "Progress",
  variants: {
    unstyled: {
      false: {
        borderRadius: 1e5,
        overflow: "hidden",
        backgrounded: !0
      }
    },
    size: {
      "...size": function(val) {
        var size = Math.round(getVariableValue(getSize(val)) * 0.25);
        return {
          height: size,
          minWidth: getVariableValue(size) * 20,
          width: "100%"
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), Progress = withStaticProperties(ProgressFrame.styleable(function(props, forwardedRef) {
  var __scopeProgress = props.__scopeProgress, valueProp = props.value, maxProp = props.max, _props_getValueLabel = props.getValueLabel, getValueLabel = _props_getValueLabel === void 0 ? defaultGetValueLabel : _props_getValueLabel, _props_size = props.size, size = _props_size === void 0 ? "$true" : _props_size, progressProps = _object_without_properties(props, [
    "__scopeProgress",
    "value",
    "max",
    "getValueLabel",
    "size"
  ]), max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX, value = isValidValueNumber(valueProp, max) ? valueProp : null, valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0, _React_useState = _sliced_to_array(React.useState(0), 2), width = _React_useState[0], setWidth = _React_useState[1];
  return /* @__PURE__ */ _jsx(ProgressProvider, {
    scope: __scopeProgress,
    value,
    max,
    width,
    children: /* @__PURE__ */ _jsx(ProgressFrame, _object_spread_props(_object_spread({
      "aria-valuemax": max,
      "aria-valuemin": 0,
      "aria-valuenow": isNumber(value) ? value : void 0,
      "aria-valuetext": valueLabel,
      // @ts-ignore
      role: "progressbar",
      "data-state": getProgressState(value, max),
      "data-value": value ?? void 0,
      "data-max": max
    }, progressProps.unstyled !== !0 && {
      size
    }, progressProps), {
      onLayout: function(e) {
        var _progressProps_onLayout;
        setWidth(e.nativeEvent.layout.width), (_progressProps_onLayout = progressProps.onLayout) === null || _progressProps_onLayout === void 0 || _progressProps_onLayout.call(progressProps, e);
      },
      ref: forwardedRef
    }))
  });
}), {
  Indicator: ProgressIndicator
});
export {
  Progress,
  ProgressFrame,
  ProgressIndicator,
  ProgressIndicatorFrame,
  createProgressScope
};
//# sourceMappingURL=Progress.js.map
