"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var GorhomPortal_exports = {};
__export(GorhomPortal_exports, {
  ACTIONS: () => ACTIONS,
  INITIAL_STATE: () => INITIAL_STATE,
  PortalHost: () => PortalHost,
  PortalItem: () => PortalItem,
  PortalProvider: () => PortalProvider,
  usePortal: () => usePortal
});
module.exports = __toCommonJS(GorhomPortal_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_react = __toESM(require("react"));
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var ACTIONS;
(function(ACTIONS2) {
  ACTIONS2[ACTIONS2.REGISTER_HOST = 0] = "REGISTER_HOST", ACTIONS2[ACTIONS2.DEREGISTER_HOST = 1] = "DEREGISTER_HOST", ACTIONS2[ACTIONS2.ADD_UPDATE_PORTAL = 2] = "ADD_UPDATE_PORTAL", ACTIONS2[ACTIONS2.REMOVE_PORTAL = 3] = "REMOVE_PORTAL";
})(ACTIONS || (ACTIONS = {}));
var INITIAL_STATE = {};
var registerHost = function(state, hostName) {
  return hostName in state || (state[hostName] = []), state;
}, deregisterHost = function(state, hostName) {
  return delete state[hostName], state;
}, addUpdatePortal = function(state, hostName, portalName, node) {
  hostName in state || (state = registerHost(state, hostName));
  var index = state[hostName].findIndex(function(item) {
    return item.name === portalName;
  });
  return index !== -1 ? state[hostName][index].node = node : state[hostName].push({
    name: portalName,
    node
  }), state;
}, removePortal = function(state, hostName, portalName) {
  if (!(hostName in state))
    return console.info("Failed to remove portal '".concat(portalName, "', '").concat(hostName, "' was not registered!")), state;
  var index = state[hostName].findIndex(function(item) {
    return item.name === portalName;
  });
  return index !== -1 && state[hostName].splice(index, 1), state;
}, reducer = function(state, action) {
  var type = action.type;
  switch (type) {
    case 0:
      return registerHost(_object_spread({}, state), action.hostName);
    case 1:
      return deregisterHost(_object_spread({}, state), action.hostName);
    case 2:
      return addUpdatePortal(_object_spread({}, state), action.hostName, action.portalName, action.node);
    case 3:
      return removePortal(_object_spread({}, state), action.hostName, action.portalName);
    default:
      return state;
  }
}, PortalStateContext = /* @__PURE__ */ (0, import_react.createContext)(null), PortalDispatchContext = /* @__PURE__ */ (0, import_react.createContext)(null), usePortalState = function(hostName) {
  var state = (0, import_react.useContext)(PortalStateContext);
  if (state === null)
    throw new Error("'PortalStateContext' cannot be null, please add 'PortalProvider' to the root component.");
  return state[hostName] || [];
}, usePortal = function() {
  var hostName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "root", dispatch = (0, import_react.useContext)(PortalDispatchContext);
  if (dispatch === null)
    throw new Error("'PortalDispatchContext' cannot be null, please add 'PortalProvider' to the root component.");
  var registerHost2 = (0, import_react.useCallback)(function() {
    dispatch({
      type: 0,
      hostName
    });
  }, []), deregisterHost2 = (0, import_react.useCallback)(function() {
    dispatch({
      type: 1,
      hostName
    });
  }, []), addUpdatePortal2 = (0, import_react.useCallback)(function(name, node) {
    dispatch({
      type: 2,
      hostName,
      portalName: name,
      node
    });
  }, []), removePortal2 = (0, import_react.useCallback)(function(name) {
    dispatch({
      type: 3,
      hostName,
      portalName: name
    });
  }, []);
  return {
    registerHost: registerHost2,
    deregisterHost: deregisterHost2,
    addPortal: addUpdatePortal2,
    updatePortal: addUpdatePortal2,
    removePortal: removePortal2
  };
}, PortalProviderComponent = function(param) {
  var _param_rootHostName = param.rootHostName, rootHostName = _param_rootHostName === void 0 ? "root" : _param_rootHostName, _param_shouldAddRootHost = param.shouldAddRootHost, shouldAddRootHost = _param_shouldAddRootHost === void 0 ? !0 : _param_shouldAddRootHost, children = param.children, _useReducer = _sliced_to_array((0, import_react.useReducer)(reducer, INITIAL_STATE), 2), state = _useReducer[0], dispatch = _useReducer[1], transitionDispatch = (0, import_react.useMemo)(function() {
    var next = function(value) {
      (0, import_react.startTransition)(function() {
        dispatch(value);
      });
    };
    return next;
  }, [
    dispatch
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PortalDispatchContext.Provider, {
    value: transitionDispatch,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(PortalStateContext.Provider, {
      value: state,
      children: [
        children,
        shouldAddRootHost && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PortalHost, {
          name: rootHostName
        })
      ]
    })
  });
}, PortalProvider = /* @__PURE__ */ (0, import_react.memo)(PortalProviderComponent);
PortalProvider.displayName = "PortalProvider";
var defaultRenderer = function(children) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children
  });
}, PortalHostComponent = function(props) {
  var name = props.name, forwardProps = props.forwardProps, _props_render = props.render, render = _props_render === void 0 ? defaultRenderer : _props_render, state = usePortalState(name), _usePortal = usePortal(props.name), registerHost2 = _usePortal.registerHost, deregisterHost2 = _usePortal.deregisterHost;
  return (0, import_react.useEffect)(function() {
    if (!(typeof window > "u"))
      return registerHost2(), function() {
        deregisterHost2();
      };
  }, []), render(forwardProps ? state.map(function(item) {
    var next = item.node;
    return forwardProps ? import_react.default.Children.map(next, function(child) {
      return /* @__PURE__ */ import_react.default.isValidElement(child) ? /* @__PURE__ */ import_react.default.cloneElement(child, _object_spread({
        key: child.key
      }, forwardProps)) : child;
    }) : next;
  }) : state.map(function(item) {
    return item.node;
  }));
}, PortalHost = /* @__PURE__ */ (0, import_react.memo)(PortalHostComponent);
PortalHost.displayName = "PortalHost";
var PortalComponent = function(props) {
  var _providedName = props.name, hostName = props.hostName, _providedHandleOnMount = props.handleOnMount, _providedHandleOnUnmount = props.handleOnUnmount, _providedHandleOnUpdate = props.handleOnUpdate, children = props.children, _usePortal = usePortal(hostName), addUpdatePortal2 = _usePortal.addPortal, removePortal2 = _usePortal.removePortal, id = (0, import_react.useId)(), name = _providedName || id, handleOnMount = (0, import_core.useEvent)(function() {
    _providedHandleOnMount ? _providedHandleOnMount(function() {
      return addUpdatePortal2(name, children);
    }) : addUpdatePortal2(name, children);
  }), handleOnUnmount = (0, import_core.useEvent)(function() {
    _providedHandleOnUnmount ? _providedHandleOnUnmount(function() {
      return removePortal2(name);
    }) : removePortal2(name);
  }), handleOnUpdate = (0, import_core.useEvent)(function() {
    _providedHandleOnUpdate ? _providedHandleOnUpdate(function() {
      return addUpdatePortal2(name, children);
    }) : addUpdatePortal2(name, children);
  });
  return (0, import_constants.useIsomorphicLayoutEffect)(function() {
    return handleOnMount(), function() {
      handleOnUnmount();
    };
  }, []), (0, import_react.useEffect)(function() {
    handleOnUpdate();
  }, [
    children
  ]), null;
}, PortalItem = /* @__PURE__ */ (0, import_react.memo)(PortalComponent);
PortalItem.displayName = "Portal";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ACTIONS,
  INITIAL_STATE,
  PortalHost,
  PortalItem,
  PortalProvider,
  usePortal
});
//# sourceMappingURL=GorhomPortal.js.map
