import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Adapt, useAdaptParent } from "@tamagui/adapt";
import { AnimatePresence } from "@tamagui/animate-presence";
import { hideOthers } from "@tamagui/aria-hidden";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/constants";
import { Theme, View, spacedChildren, styled, useGet, useMedia, useThemeName } from "@tamagui/core";
import { createContext, createContextScope } from "@tamagui/create-context";
import { Dismissable } from "@tamagui/dismissable";
import { FocusScope } from "@tamagui/focus-scope";
import { composeEventHandlers, withStaticProperties } from "@tamagui/helpers";
import { Portal, PortalHost, PortalItem } from "@tamagui/portal";
import { RemoveScroll } from "@tamagui/remove-scroll";
import { Overlay, Sheet, SheetController } from "@tamagui/sheet";
import { ButtonNestingContext, ThemeableStack, YStack } from "@tamagui/stacks";
import { H2, Paragraph } from "@tamagui/text";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _instanceof(left, right) {
  return right != null && typeof Symbol < "u" && right[Symbol.hasInstance] ? !!right[Symbol.hasInstance](left) : left instanceof right;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var DIALOG_NAME = "Dialog", _createContextScope = _sliced_to_array(createContextScope(DIALOG_NAME), 2), createDialogContext = _createContextScope[0], createDialogScope = _createContextScope[1], _createDialogContext = _sliced_to_array(createDialogContext(DIALOG_NAME), 2), DialogProvider = _createDialogContext[0], useDialogContext = _createDialogContext[1], TRIGGER_NAME = "DialogTrigger", DialogTriggerFrame = styled(View, {
  name: TRIGGER_NAME
}), DialogTrigger = DialogTriggerFrame.styleable(function(props, forwardedRef) {
  var __scopeDialog = props.__scopeDialog, triggerProps = _object_without_properties(props, [
    "__scopeDialog"
  ]), isInsideButton = React.useContext(ButtonNestingContext), context = useDialogContext(TRIGGER_NAME, __scopeDialog), composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
  return /* @__PURE__ */ _jsx(ButtonNestingContext.Provider, {
    value: !0,
    children: /* @__PURE__ */ _jsx(DialogTriggerFrame, _object_spread_props(_object_spread({
      tag: isInsideButton ? "span" : "button",
      "aria-haspopup": "dialog",
      "aria-expanded": context.open,
      "aria-controls": context.contentId,
      "data-state": getState(context.open)
    }, triggerProps), {
      ref: composedTriggerRef,
      onPress: composeEventHandlers(props.onPress, context.onOpenToggle)
    }))
  });
}), PORTAL_NAME = "DialogPortal", _createDialogContext1 = _sliced_to_array(createDialogContext(PORTAL_NAME, {
  forceMount: void 0
}), 2), PortalProvider = _createDialogContext1[0], usePortalContext = _createDialogContext1[1], DialogPortalFrame = styled(YStack, {
  pointerEvents: "none",
  variants: {
    unstyled: {
      false: _object_spread({
        alignItems: "center",
        justifyContent: "center",
        fullscreen: !0,
        zIndex: 1e5
      }, isWeb && {
        maxHeight: "100vh",
        position: "fixed"
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), DialogPortalItem = function(props) {
  var themeName = useThemeName(), context = useDialogContext(PORTAL_NAME, props.__scopeDialog);
  return /* @__PURE__ */ _jsx(PortalItem, {
    hostName: props.hostName,
    children: /* @__PURE__ */ _jsx(DialogPortalItemContent, _object_spread_props(_object_spread({}, props), {
      themeName,
      context
    }))
  });
};
function DialogPortalItemContent(props) {
  var __scopeDialog = props.__scopeDialog, children = props.children, context = props.context, themeName = props.themeName, space = props.space, spaceDirection = props.spaceDirection, separator = props.separator, childrenSpaced = children;
  return (space || separator) && (childrenSpaced = spacedChildren({
    children,
    separator,
    space,
    direction: spaceDirection
  })), /* @__PURE__ */ _jsx(DialogProvider, _object_spread_props(_object_spread({
    scope: __scopeDialog
  }, context), {
    children: /* @__PURE__ */ _jsx(Theme, {
      name: themeName,
      children: childrenSpaced
    })
  }));
}
var DialogPortal = function(props) {
  var __scopeDialog = props.__scopeDialog, forceMount = props.forceMount, children = props.children, frameProps = _object_without_properties(props, [
    "__scopeDialog",
    "forceMount",
    "children"
  ]), context = useDialogContext(PORTAL_NAME, __scopeDialog), isShowing = forceMount || context.open, _React_useState = _sliced_to_array(React.useState(!isShowing), 2), isFullyHidden = _React_useState[0], setIsFullyHidden = _React_useState[1];
  isShowing && isFullyHidden && setIsFullyHidden(!1);
  var handleExitComplete = React.useCallback(function() {
    setIsFullyHidden(!0);
  }, []), contents = /* @__PURE__ */ _jsx(AnimatePresence, {
    onExitComplete: handleExitComplete,
    children: isShowing ? children : null
  }), isSheet = useShowDialogSheet(context);
  if (isSheet)
    return children;
  if (context.modal) {
    if (isFullyHidden)
      return null;
    var framedContents = /* @__PURE__ */ _jsx(PortalProvider, {
      scope: __scopeDialog,
      forceMount,
      children: /* @__PURE__ */ _jsx(DialogPortalFrame, _object_spread_props(_object_spread({
        pointerEvents: isShowing ? "auto" : "none"
      }, frameProps), {
        children: contents
      }))
    });
    if (isWeb) {
      var _props_zIndex;
      return /* @__PURE__ */ _jsx(Portal, {
        zIndex: (_props_zIndex = props.zIndex) !== null && _props_zIndex !== void 0 ? _props_zIndex : 1e5,
        children: /* @__PURE__ */ _jsx(PassthroughTheme, {
          children: framedContents
        })
      });
    }
    return /* @__PURE__ */ _jsx(DialogPortalItem, {
      __scopeDialog,
      children: framedContents
    });
  }
  return contents;
}, PassthroughTheme = function(param) {
  var children = param.children, themeName = useThemeName();
  return /* @__PURE__ */ _jsx(Theme, {
    name: themeName,
    forceClassName: !0,
    children
  });
}, OVERLAY_NAME = "DialogOverlay", DialogOverlayFrame = styled(Overlay, {
  name: OVERLAY_NAME
}), DialogOverlay = DialogOverlayFrame.extractable(/* @__PURE__ */ React.forwardRef(function(_param, forwardedRef) {
  var __scopeDialog = _param.__scopeDialog, props = _object_without_properties(_param, [
    "__scopeDialog"
  ]), portalContext = usePortalContext(OVERLAY_NAME, __scopeDialog), _props_forceMount = props.forceMount, forceMount = _props_forceMount === void 0 ? portalContext.forceMount : _props_forceMount, overlayProps = _object_without_properties(props, [
    "forceMount"
  ]), context = useDialogContext(OVERLAY_NAME, __scopeDialog), showSheet = useShowDialogSheet(context);
  return !forceMount && (!context.modal || showSheet) ? null : /* @__PURE__ */ _jsx(DialogOverlayFrame, _object_spread_props(_object_spread({
    "data-state": getState(context.open),
    // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.
    pointerEvents: context.open ? "auto" : "none"
  }, overlayProps), {
    ref: forwardedRef
  }));
})), CONTENT_NAME = "DialogContent", DialogContentFrame = styled(ThemeableStack, {
  name: CONTENT_NAME,
  tag: "dialog",
  variants: {
    size: {
      "...size": function(val, extras) {
        return {};
      }
    },
    unstyled: {
      false: {
        position: "relative",
        backgrounded: !0,
        padded: !0,
        radiused: !0,
        elevate: !0,
        zIndex: 1e5
      }
    }
  },
  defaultVariants: {
    size: "$true",
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), DialogContent = DialogContentFrame.extractable(/* @__PURE__ */ React.forwardRef(function(_param, forwardedRef) {
  var __scopeDialog = _param.__scopeDialog, props = _object_without_properties(_param, [
    "__scopeDialog"
  ]), portalContext = usePortalContext(CONTENT_NAME, __scopeDialog), _props_forceMount = props.forceMount, forceMount = _props_forceMount === void 0 ? portalContext.forceMount : _props_forceMount, contentProps = _object_without_properties(props, [
    "forceMount"
  ]), context = useDialogContext(CONTENT_NAME, __scopeDialog), contents = context.modal ? /* @__PURE__ */ _jsx(DialogContentModal, _object_spread_props(_object_spread({
    context
  }, contentProps), {
    ref: forwardedRef
  })) : /* @__PURE__ */ _jsx(DialogContentNonModal, _object_spread_props(_object_spread({
    context
  }, contentProps), {
    ref: forwardedRef
  }));
  return !isWeb || context.disableRemoveScroll ? contents : /* @__PURE__ */ _jsx(RemoveScroll, {
    forwardProps: !0,
    enabled: context.open,
    allowPinchZoom: context.allowPinchZoom,
    shards: [
      context.contentRef
    ],
    // causes lots of bugs on touch web on site
    removeScrollBar: !1,
    children: /* @__PURE__ */ _jsx("div", {
      "data-remove-scroll-container": !0,
      className: "_dsp_contents",
      children: contents
    })
  });
})), DialogContentModal = /* @__PURE__ */ React.forwardRef(function(_param, forwardedRef) {
  var children = _param.children, context = _param.context, props = _object_without_properties(_param, [
    "children",
    "context"
  ]), contentRef = React.useRef(null), composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
  return isWeb && React.useEffect(function() {
    if (context.open) {
      var content = contentRef.current;
      if (content) return hideOthers(content);
    }
  }, [
    context.open
  ]), /* @__PURE__ */ _jsx(DialogContentImpl, _object_spread_props(_object_spread(_object_spread_props(_object_spread({}, props), {
    context,
    ref: composedRefs,
    // we make sure focus isn't trapped once `DialogContent` has been closed
    // (closed !== unmounted when animating out)
    trapFocus: context.open,
    disableOutsidePointerEvents: !0,
    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, function(event) {
      var _context_triggerRef_current;
      event.preventDefault(), (_context_triggerRef_current = context.triggerRef.current) === null || _context_triggerRef_current === void 0 || _context_triggerRef_current.focus();
    }),
    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, function(event) {
      var originalEvent = event.detail.originalEvent, ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === !0, isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      isRightClick && event.preventDefault();
    }),
    // When focus is trapped, a `focusout` event may still happen.
    // We make sure we don't trigger our `onDismiss` in such case.
    onFocusOutside: composeEventHandlers(props.onFocusOutside, function(event) {
      return event.preventDefault();
    })
  }), !props.unstyled && {
    outlineStyle: "none"
  }), {
    children
  }));
}), DialogContentNonModal = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var hasInteractedOutsideRef = React.useRef(!1);
  return /* @__PURE__ */ _jsx(DialogContentImpl, _object_spread_props(_object_spread({}, props), {
    ref: forwardedRef,
    trapFocus: !1,
    disableOutsidePointerEvents: !1,
    onCloseAutoFocus: function(event) {
      var _props_onCloseAutoFocus;
      if ((_props_onCloseAutoFocus = props.onCloseAutoFocus) === null || _props_onCloseAutoFocus === void 0 || _props_onCloseAutoFocus.call(props, event), !event.defaultPrevented) {
        if (!hasInteractedOutsideRef.current) {
          var _props_context_triggerRef_current;
          (_props_context_triggerRef_current = props.context.triggerRef.current) === null || _props_context_triggerRef_current === void 0 || _props_context_triggerRef_current.focus();
        }
        event.preventDefault();
      }
      hasInteractedOutsideRef.current = !1;
    },
    onInteractOutside: function(event) {
      var _props_onInteractOutside;
      (_props_onInteractOutside = props.onInteractOutside) === null || _props_onInteractOutside === void 0 || _props_onInteractOutside.call(props, event), event.defaultPrevented || (hasInteractedOutsideRef.current = !0);
      var target = event.target, trigger = props.context.triggerRef.current;
      if (_instanceof(trigger, HTMLElement)) {
        var targetIsTrigger = trigger.contains(target);
        targetIsTrigger && event.preventDefault();
      }
    }
  }));
}), DialogContentImpl = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeDialog = props.__scopeDialog, trapFocus = props.trapFocus, onOpenAutoFocus = props.onOpenAutoFocus, onCloseAutoFocus = props.onCloseAutoFocus, disableOutsidePointerEvents = props.disableOutsidePointerEvents, onEscapeKeyDown = props.onEscapeKeyDown, onPointerDownOutside = props.onPointerDownOutside, onFocusOutside = props.onFocusOutside, onInteractOutside = props.onInteractOutside, context = props.context, contentProps = _object_without_properties(props, [
    "__scopeDialog",
    "trapFocus",
    "onOpenAutoFocus",
    "onCloseAutoFocus",
    "disableOutsidePointerEvents",
    "onEscapeKeyDown",
    "onPointerDownOutside",
    "onFocusOutside",
    "onInteractOutside",
    "context"
  ]), contentRef = React.useRef(null), composedRefs = useComposedRefs(forwardedRef, contentRef), showSheet = useShowDialogSheet(context), contents = /* @__PURE__ */ _jsx(DialogContentFrame, _object_spread({
    id: context.contentId,
    "aria-describedby": context.descriptionId,
    "aria-labelledby": context.titleId,
    "data-state": getState(context.open)
  }, contentProps));
  return showSheet ? /* @__PURE__ */ _jsx(DialogPortalItem, {
    hostName: getSheetContentsName(context),
    children: contentProps.children
  }) : isWeb ? /* @__PURE__ */ _jsxs(_Fragment, {
    children: [
      /* @__PURE__ */ _jsx(Dismissable, {
        disableOutsidePointerEvents: context.open && disableOutsidePointerEvents,
        forceUnmount: !context.open,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        // @ts-ignore
        ref: composedRefs,
        onDismiss: function() {
          return context.onOpenChange(!1);
        },
        children: /* @__PURE__ */ _jsx(FocusScope, {
          loop: !0,
          enabled: context.open,
          trapped: trapFocus,
          onMountAutoFocus: onOpenAutoFocus,
          forceUnmount: !context.open,
          onUnmountAutoFocus: onCloseAutoFocus,
          children: contents
        })
      }),
      process.env.NODE_ENV === "development" && /* @__PURE__ */ _jsxs(_Fragment, {
        children: [
          /* @__PURE__ */ _jsx(TitleWarning, {
            titleId: context.titleId
          }),
          /* @__PURE__ */ _jsx(DescriptionWarning, {
            contentRef,
            descriptionId: context.descriptionId
          })
        ]
      })
    ]
  }) : contents;
}), DialogTitleFrame = styled(H2, {
  name: "DialogTitle"
}), DialogTitle = DialogTitleFrame.styleable(function(props, forwardedRef) {
  var __scopeDialog = props.__scopeDialog, titleProps = _object_without_properties(props, [
    "__scopeDialog"
  ]), context = useDialogContext("DialogTitle", __scopeDialog);
  return /* @__PURE__ */ _jsx(DialogTitleFrame, _object_spread_props(_object_spread({
    id: context.titleId
  }, titleProps), {
    ref: forwardedRef
  }));
}), DialogDescriptionFrame = styled(Paragraph, {
  name: "DialogDescription"
}), DESCRIPTION_NAME = "DialogDescription", DialogDescription = DialogDescriptionFrame.styleable(function(props, forwardedRef) {
  var __scopeDialog = props.__scopeDialog, descriptionProps = _object_without_properties(props, [
    "__scopeDialog"
  ]), context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
  return /* @__PURE__ */ _jsx(DialogDescriptionFrame, _object_spread_props(_object_spread({
    id: context.descriptionId
  }, descriptionProps), {
    ref: forwardedRef
  }));
}), CLOSE_NAME = "DialogClose", DialogCloseFrame = styled(View, {
  name: CLOSE_NAME,
  tag: "button"
}), DialogClose = DialogCloseFrame.styleable(function(props, forwardedRef) {
  var __scopeDialog = props.__scopeDialog, displayWhenAdapted = props.displayWhenAdapted, closeProps = _object_without_properties(props, [
    "__scopeDialog",
    "displayWhenAdapted"
  ]), context = useDialogContext(CLOSE_NAME, __scopeDialog, {
    warn: !1,
    fallback: {}
  }), isSheet = useShowDialogSheet(context), isInsideButton = React.useContext(ButtonNestingContext);
  return isSheet && !displayWhenAdapted ? null : /* @__PURE__ */ _jsx(DialogCloseFrame, _object_spread_props(_object_spread({
    accessibilityLabel: "Dialog Close",
    tag: isInsideButton ? "span" : "button"
  }, closeProps), {
    ref: forwardedRef,
    onPress: composeEventHandlers(props.onPress, function() {
      context.onOpenChange(!1);
    })
  }));
});
function getState(open) {
  return open ? "open" : "closed";
}
var TITLE_WARNING_NAME = "DialogTitleWarning", _createContext = _sliced_to_array(createContext(TITLE_WARNING_NAME, {
  contentName: CONTENT_NAME,
  titleName: "DialogTitle",
  docsSlug: "dialog"
}), 2), DialogWarningProvider = _createContext[0], useWarningContext = _createContext[1], TitleWarning = function(param) {
  var titleId = param.titleId;
  if (process.env.NODE_ENV === "development") {
    var titleWarningContext = useWarningContext(TITLE_WARNING_NAME), MESSAGE = "`".concat(titleWarningContext.contentName, "` requires a `").concat(titleWarningContext.titleName, "` for the component to be accessible for screen reader users.\n\nIf you want to hide the `").concat(titleWarningContext.titleName, "`, you can wrap it with our VisuallyHidden component.");
    React.useEffect(function() {
      if (isWeb && titleId) {
        var hasTitle = document.getElementById(titleId);
        hasTitle || console.warn(MESSAGE);
      }
    }, [
      MESSAGE,
      titleId
    ]);
  }
  return null;
}, DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning", DescriptionWarning = function(param) {
  var contentRef = param.contentRef, descriptionId = param.descriptionId;
  if (process.env.NODE_ENV === "development") {
    var descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME), MESSAGE = "Warning: Missing `Description` or `aria-describedby={undefined}` for {".concat(descriptionWarningContext.contentName, "}.");
    React.useEffect(function() {
      if (isWeb) {
        var contentNode = contentRef.current;
        if (_instanceof(contentNode, HTMLElement)) {
          var describedById = contentNode.getAttribute("aria-describedby");
          if (descriptionId && describedById) {
            var hasDescription = document.getElementById(descriptionId);
            hasDescription || console.warn(MESSAGE);
          }
        }
      }
    }, [
      MESSAGE,
      contentRef,
      descriptionId
    ]);
  }
  return null;
}, Dialog = withStaticProperties(/* @__PURE__ */ React.forwardRef(function(props, ref) {
  var __scopeDialog = props.__scopeDialog, children = props.children, openProp = props.open, _props_defaultOpen = props.defaultOpen, defaultOpen = _props_defaultOpen === void 0 ? !1 : _props_defaultOpen, onOpenChange = props.onOpenChange, _props_modal = props.modal, modal = _props_modal === void 0 ? !0 : _props_modal, _props_allowPinchZoom = props.allowPinchZoom, allowPinchZoom = _props_allowPinchZoom === void 0 ? !1 : _props_allowPinchZoom, _props_disableRemoveScroll = props.disableRemoveScroll, disableRemoveScroll = _props_disableRemoveScroll === void 0 ? !1 : _props_disableRemoveScroll, baseId = React.useId(), scopeId = "scope-".concat(baseId), contentId = "content-".concat(baseId), titleId = "title-".concat(baseId), descriptionId = "description-".concat(baseId), scopeKey = __scopeDialog ? Object.keys(__scopeDialog)[0] : scopeId, sheetContentsName = getSheetContentsName({
    scopeKey,
    contentId
  }), triggerRef = React.useRef(null), contentRef = React.useRef(null), _useControllableState = _sliced_to_array(useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  }), 2), open = _useControllableState[0], setOpen = _useControllableState[1], onOpenToggle = React.useCallback(function() {
    setOpen(function(prevOpen) {
      return !prevOpen;
    });
  }, [
    setOpen
  ]), context = {
    scope: __scopeDialog,
    scopeKey,
    triggerRef,
    contentRef,
    contentId,
    titleId,
    descriptionId,
    open,
    onOpenChange: setOpen,
    onOpenToggle,
    modal,
    allowPinchZoom
  }, _useAdaptParent = useAdaptParent({
    Contents: React.useCallback(function(props2) {
      return /* @__PURE__ */ _jsx(PortalHost, {
        forwardProps: props2,
        name: sheetContentsName
      });
    }, [
      sheetContentsName
    ])
  }), when = _useAdaptParent.when, AdaptProvider = _useAdaptParent.AdaptProvider;
  return React.useImperativeHandle(ref, function() {
    return {
      open: setOpen
    };
  }, [
    setOpen
  ]), /* @__PURE__ */ _jsx(AdaptProvider, {
    children: /* @__PURE__ */ _jsx(DialogProvider, _object_spread_props(_object_spread({}, context), {
      sheetBreakpoint: when,
      disableRemoveScroll,
      children: /* @__PURE__ */ _jsx(DialogSheetController, {
        onOpenChange: setOpen,
        __scopeDialog,
        children
      })
    }))
  });
}), {
  Trigger: DialogTrigger,
  Portal: DialogPortal,
  Overlay: DialogOverlay,
  Content: DialogContent,
  Title: DialogTitle,
  Description: DialogDescription,
  Close: DialogClose,
  Sheet: Sheet.Controlled,
  Adapt
});
var DialogSheetContents = function(_param) {
  var name = _param.name, props = _object_without_properties(_param, [
    "name"
  ]);
  return /* @__PURE__ */ _jsx(PortalHost, {
    forwardProps: props,
    name
  });
}, getSheetContentsName = function(param) {
  var scopeKey = param.scopeKey, contentId = param.contentId;
  return "".concat(scopeKey || contentId, "SheetContents");
}, DialogSheetController = function(props) {
  var context = useDialogContext("DialogSheetController", props.__scopeDialog), showSheet = useShowDialogSheet(context), breakpointActive = useSheetBreakpointActive(context), getShowSheet = useGet(showSheet);
  return /* @__PURE__ */ _jsx(SheetController, {
    onOpenChange: function(val) {
      getShowSheet() && props.onOpenChange(val);
    },
    open: context.open,
    hidden: breakpointActive === !1,
    children: props.children
  });
}, useSheetBreakpointActive = function(context) {
  var media = useMedia();
  return context.sheetBreakpoint ? context.sheetBreakpoint === !0 ? !0 : media[context.sheetBreakpoint] : !1;
}, useShowDialogSheet = function(context) {
  var breakpointActive = useSheetBreakpointActive(context);
  return context.open === !1 ? !1 : breakpointActive;
};
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogOverlay,
  DialogOverlayFrame,
  DialogPortal,
  DialogPortalFrame,
  DialogSheetContents,
  DialogTitle,
  DialogTrigger,
  DialogWarningProvider,
  createDialogScope
};
//# sourceMappingURL=Dialog.js.map
