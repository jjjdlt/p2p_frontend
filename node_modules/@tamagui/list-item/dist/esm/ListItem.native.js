import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { getFontSize } from "@tamagui/font-size";
import { getFontSized } from "@tamagui/get-font-sized";
import { getSize, getSpace } from "@tamagui/get-token";
import { withStaticProperties } from "@tamagui/helpers";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { ThemeableStack, YStack } from "@tamagui/stacks";
import { SizableText, wrapChildrenInText } from "@tamagui/text";
import { Spacer, getTokens, getVariableValue, styled, useProps } from "@tamagui/web";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var NAME = "ListItem", ListItemFrame = styled(ThemeableStack, {
  name: NAME,
  tag: "li",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        alignItems: "center",
        justifyContent: "space-between",
        flexWrap: "nowrap",
        width: "100%",
        borderColor: "$borderColor",
        maxWidth: "100%",
        overflow: "hidden",
        flexDirection: "row",
        backgroundColor: "$background"
      }
    },
    size: {
      "...size": function(val, param) {
        var tokens = param.tokens;
        return {
          minHeight: tokens.size[val],
          paddingHorizontal: tokens.space[val],
          paddingVertical: getSpace(tokens.space[val], {
            shift: -4
          })
        };
      }
    },
    active: {
      true: {
        hoverStyle: {
          backgroundColor: "$background"
        }
      }
    },
    disabled: {
      true: {
        opacity: 0.5,
        // TODO breaking types
        pointerEvents: "none"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ListItemText = styled(SizableText, {
  name: "ListItemText",
  variants: {
    unstyled: {
      false: {
        color: "$color",
        size: "$true",
        flexGrow: 1,
        flexShrink: 1,
        ellipse: !0,
        cursor: "default"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ListItemSubtitle = styled(ListItemText, {
  name: "ListItemSubtitle",
  variants: {
    unstyled: {
      false: {
        opacity: 0.6,
        maxWidth: "100%",
        color: "$color"
      }
    },
    size: {
      "...size": function(val, extras) {
        var oneSmaller = getSize(val, {
          shift: -1,
          excludeHalfSteps: !0
        }), fontStyle = getFontSized(oneSmaller.key, extras);
        return fontStyle;
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ListItemTitle = styled(ListItemText, {
  name: "ListItemTitle"
}), useListItem = function(propsIn) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    Text: ListItemText,
    Subtitle: ListItemSubtitle,
    Title: ListItemTitle
  }, _ref_Text = _ref.Text, Text = _ref_Text === void 0 ? ListItemText : _ref_Text, _ref_Subtitle = _ref.Subtitle, Subtitle = _ref_Subtitle === void 0 ? ListItemSubtitle : _ref_Subtitle, _ref_Title = _ref.Title, Title = _ref_Title === void 0 ? ListItemTitle : _ref_Title, props = useProps(propsIn), children = props.children, icon = props.icon, iconAfter = props.iconAfter, noTextWrap = props.noTextWrap, themeName = props.theme, space = props.space, spaceFlex = props.spaceFlex, _props_scaleIcon = props.scaleIcon, scaleIcon = _props_scaleIcon === void 0 ? 1 : _props_scaleIcon, _props_scaleSpace = props.scaleSpace, scaleSpace = _props_scaleSpace === void 0 ? 1 : _props_scaleSpace, _props_unstyled = props.unstyled, unstyled = _props_unstyled === void 0 ? !1 : _props_unstyled, subTitle = props.subTitle, title = props.title, color = props.color, fontWeight = props.fontWeight, fontSize = props.fontSize, fontFamily = props.fontFamily, letterSpacing = props.letterSpacing, textAlign = props.textAlign, ellipse = props.ellipse, rest = _object_without_properties(props, [
    "children",
    "icon",
    "iconAfter",
    "noTextWrap",
    "theme",
    "space",
    "spaceFlex",
    "scaleIcon",
    "scaleSpace",
    "unstyled",
    "subTitle",
    "title",
    "color",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "letterSpacing",
    "textAlign",
    "ellipse"
  ]), textProps = {
    color,
    fontWeight,
    fontSize,
    fontFamily,
    letterSpacing,
    textAlign,
    ellipse,
    children
  }, size = props.size || "$true", iconSize = getFontSize(size) * scaleIcon, getThemedIcon = useGetThemedIcon({
    size: iconSize,
    color
  }), _map = _sliced_to_array([
    icon,
    iconAfter
  ].map(getThemedIcon), 2), themedIcon = _map[0], themedIconAfter = _map[1], _getTokens_space_props_space, spaceSize = getVariableValue((_getTokens_space_props_space = getTokens().space[props.space]) !== null && _getTokens_space_props_space !== void 0 ? _getTokens_space_props_space : iconSize) * scaleSpace, contents = wrapChildrenInText(Text, textProps);
  return {
    props: _object_spread_props(_object_spread({}, rest), {
      children: /* @__PURE__ */ _jsxs(_Fragment, {
        children: [
          themedIcon ? /* @__PURE__ */ _jsxs(_Fragment, {
            children: [
              themedIcon,
              /* @__PURE__ */ _jsx(Spacer, {
                size: spaceSize
              })
            ]
          }) : null,
          /* helper for common title/subtitle pttern */
          /* biome-ignore lint/complexity/noExtraBooleanCast: <explanation> */
          title || subTitle ? /* @__PURE__ */ _jsxs(YStack, {
            flex: 1,
            children: [
              noTextWrap === "all" ? title : /* @__PURE__ */ _jsx(Title, {
                size,
                children: title
              }),
              subTitle ? /* @__PURE__ */ _jsx(_Fragment, {
                children: typeof subTitle == "string" && noTextWrap !== "all" ? (
                  // TODO can use theme but we need to standardize to alt themes
                  // or standardize on subtle colors in themes
                  /* @__PURE__ */ _jsx(Subtitle, {
                    unstyled,
                    size,
                    children: subTitle
                  })
                ) : subTitle
              }) : null,
              contents
            ]
          }) : contents,
          themedIconAfter ? /* @__PURE__ */ _jsxs(_Fragment, {
            children: [
              /* @__PURE__ */ _jsx(Spacer, {
                size: spaceSize
              }),
              themedIconAfter
            ]
          }) : null
        ]
      })
    })
  };
}, ListItemComponent = ListItemFrame.styleable(function(props, ref) {
  var _useListItem = useListItem(props), listItemProps = _useListItem.props;
  return /* @__PURE__ */ _jsx(ListItemFrame, _object_spread({
    ref
  }, listItemProps));
}), ListItem2 = withStaticProperties(ListItemComponent, {
  Text: ListItemText,
  Subtitle: ListItemSubtitle
});
export {
  ListItem2 as ListItem,
  ListItemFrame,
  ListItemSubtitle,
  ListItemText,
  ListItemTitle,
  useListItem
};
//# sourceMappingURL=ListItem.js.map
