"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ThemeBuilder_exports = {};
__export(ThemeBuilder_exports, {
  ThemeBuilder: () => ThemeBuilder,
  createThemeBuilder: () => createThemeBuilder
});
module.exports = __toCommonJS(ThemeBuilder_exports);
var import_create_theme = require("@tamagui/create-theme");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var ThemeBuilder = /* @__PURE__ */ function() {
  "use strict";
  function ThemeBuilder2(state) {
    _class_call_check(this, ThemeBuilder2), _define_property(this, "state", void 0), _define_property(this, "_addedThemes", void 0), this.state = state, this._addedThemes = [];
  }
  return _create_class(ThemeBuilder2, [
    {
      key: "addPalettes",
      value: function(palettes) {
        return this.state.palettes = _object_spread(
          {},
          // as {} prevents generic string key merge messing up types
          this.state.palettes,
          palettes
        ), this;
      }
    },
    {
      key: "addTemplates",
      value: function(templates) {
        return this.state.templates = _object_spread(
          {},
          // as {} prevents generic string key merge messing up types
          this.state.templates,
          templates
        ), this;
      }
    },
    {
      key: "addMasks",
      value: function(masks) {
        return this.state.masks = _object_spread(
          {},
          // as {} prevents generic string key merge messing up types
          this.state.masks,
          (0, import_create_theme.objectFromEntries)((0, import_create_theme.objectEntries)(masks).map(function(param) {
            var _param = _sliced_to_array(param, 2), key = _param[0], val = _param[1];
            return [
              key,
              (0, import_create_theme.createMask)(val)
            ];
          }))
        ), this;
      }
    },
    {
      key: "addThemes",
      value: function(themes) {
        return this._addedThemes.push({
          type: "themes",
          args: [
            themes
          ]
        }), this.state.themes = _object_spread(
          {},
          // as {} prevents generic string key merge messing up types
          this.state.themes,
          themes
        ), this;
      }
    },
    {
      // lets infer template themes directly onto here to avoid some type nesting issues later one
      // themes: {
      //   [Key in keyof T]: TemplateToTheme<T[Key]>
      // } & State['themes']
      // these wont be typed to save some complexity and because they don't need to be typed!
      key: "addComponentThemes",
      value: function(childThemeDefinition, options) {
        return this.addChildThemes(childThemeDefinition, options), this;
      }
    },
    {
      key: "addChildThemes",
      value: function(childThemeDefinition, options) {
        var currentThemes = this.state.themes;
        if (!currentThemes)
          throw new Error("No themes defined yet, use addThemes first to set your base themes");
        this._addedThemes.push({
          type: "childThemes",
          args: [
            childThemeDefinition,
            options
          ]
        });
        var currentThemeNames = Object.keys(currentThemes), incomingThemeNames = Object.keys(childThemeDefinition), namesWithDefinitions = currentThemeNames.flatMap(function(prefix) {
          var avoidNestingWithin = options == null ? void 0 : options.avoidNestingWithin;
          return avoidNestingWithin && avoidNestingWithin.some(function(avoidName) {
            return prefix.startsWith(avoidName) || prefix.endsWith(avoidName);
          }) ? [] : incomingThemeNames.map(function(subName) {
            var fullName = "".concat(prefix, "_").concat(subName), definition = childThemeDefinition[subName];
            if ("avoidNestingWithin" in definition) {
              var avoidNest = definition.avoidNestingWithin;
              if (avoidNest.some(function(name) {
                return prefix.startsWith(name) || prefix.endsWith(name);
              }))
                return null;
            }
            return [
              fullName,
              definition
            ];
          }).filter(Boolean);
        }), childThemes = Object.fromEntries(namesWithDefinitions), next = _object_spread(
          {},
          // as {} prevents generic string key merge messing up types
          this.state.themes,
          childThemes
        );
        return this.state.themes = next, this;
      }
    },
    {
      key: "build",
      value: function() {
        var _this, _loop = function(_ref2) {
          var themeName2 = _ref2, nameParts = themeName2.split("_"), parentName2 = nameParts.slice(0, nameParts.length - 1).join("_"), definitions = _this.state.themes[themeName2], themeDefinition = Array.isArray(definitions) ? function() {
            var found = definitions.find(
              // endWith match stronger than startsWith
              function(d) {
                return d.parent ? parentName2.endsWith(d.parent) || parentName2.startsWith(d.parent) : !0;
              }
            );
            return found || null;
          }() : definitions;
          if (!themeDefinition)
            return "continue";
          if ("theme" in themeDefinition)
            out[themeName2] = themeDefinition.theme;
          else if ("mask" in themeDefinition)
            maskedThemes.push({
              parentName: parentName2,
              themeName: themeName2,
              mask: themeDefinition
            });
          else {
            var _this_state_templates, _this_state_templates1, tmp = themeDefinition.palette, paletteName = tmp === void 0 ? "" : tmp, templateName = themeDefinition.template, options2 = _object_without_properties(themeDefinition, [
              "palette",
              "template"
            ]), parentDefinition = _this.state.themes[parentName2];
            if (!_this.state.palettes)
              throw new Error("No palettes defined for theme with palette expected: ".concat(themeName2));
            for (var palette = _this.state.palettes[paletteName || ""], attemptParentName = "".concat(parentName2, "_").concat(paletteName); !palette && attemptParentName; )
              attemptParentName in _this.state.palettes ? (palette = _this.state.palettes[attemptParentName], paletteName = attemptParentName) : attemptParentName = attemptParentName.split("_").slice(0, -1).join("_");
            if (!palette) {
              var msg = process.env.NODE_ENV !== "production" ? ": ".concat(themeName2, ": ").concat(paletteName, `
          Definition: `).concat(JSON.stringify(themeDefinition), `
          Parent: `).concat(JSON.stringify(parentDefinition), `
          Potential: (`).concat(Object.keys(_this.state.palettes).join(", "), ")") : "";
              throw new Error("No palette for theme".concat(msg));
            }
            var _this_state_templates_templateName, template = (_this_state_templates_templateName = (_this_state_templates = _this.state.templates) === null || _this_state_templates === void 0 ? void 0 : _this_state_templates[templateName]) !== null && _this_state_templates_templateName !== void 0 ? _this_state_templates_templateName : (_this_state_templates1 = _this.state.templates) === null || _this_state_templates1 === void 0 ? void 0 : _this_state_templates1["".concat(nameParts[0], "_").concat(templateName)];
            if (!template)
              throw new Error("No template for theme ".concat(themeName2, ": ").concat(templateName));
            out[themeName2] = (0, import_create_theme.createThemeWithPalettes)(_this.state.palettes, paletteName, template, options2, themeName2, !0);
          }
        };
        if (!this.state.themes)
          return {};
        var out = {}, maskedThemes = [];
        for (var _ref in this.state.themes) _this = this, _loop(_ref);
        var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
        try {
          for (var _iterator = maskedThemes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
            var _ref1 = _step.value, mask = _ref1.mask, themeName = _ref1.themeName, parentName = _ref1.parentName, _this_state_masks, parent = out[parentName];
            if (parent) {
              var maskName = mask.mask, options = _object_without_properties(mask, [
                "mask"
              ]), maskFunction = (_this_state_masks = this.state.masks) === null || _this_state_masks === void 0 ? void 0 : _this_state_masks[maskName];
              if (!maskFunction)
                throw new Error("No mask ".concat(maskName));
              var parentTheme = this.state.themes[parentName];
              if (parentTheme && "childOptions" in parentTheme) {
                var _parentTheme_childOptions = parentTheme.childOptions, mask1 = _parentTheme_childOptions.mask, childOpts = _object_without_properties(_parentTheme_childOptions, [
                  "mask"
                ]);
                if (mask1) {
                  var _this_state_masks1;
                  maskFunction = (_this_state_masks1 = this.state.masks) === null || _this_state_masks1 === void 0 ? void 0 : _this_state_masks1[mask1];
                }
                Object.assign(options, childOpts);
              }
              out[themeName] = (0, import_create_theme.applyMask)(parent, maskFunction, options, parentName, themeName);
            }
          }
        } catch (err) {
          _didIteratorError = !0, _iteratorError = err;
        } finally {
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError)
              throw _iteratorError;
          }
        }
        return out;
      }
    }
  ]), ThemeBuilder2;
}();
function createThemeBuilder() {
  return new ThemeBuilder({});
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThemeBuilder,
  createThemeBuilder
});
//# sourceMappingURL=ThemeBuilder.js.map
