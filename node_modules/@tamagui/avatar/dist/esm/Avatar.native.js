import { jsx as _jsx } from "react/jsx-runtime";
import { getTokens, getVariableValue, styled } from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { withStaticProperties } from "@tamagui/helpers";
import { Image } from "@tamagui/image";
import { Square, getShapeSize } from "@tamagui/shapes";
import { YStack } from "@tamagui/stacks";
import * as React from "react";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var AVATAR_NAME = "Avatar", _createContextScope = _sliced_to_array(createContextScope(AVATAR_NAME), 2), createAvatarContext = _createContextScope[0], createAvatarScope = _createContextScope[1], _createAvatarContext = _sliced_to_array(createAvatarContext(AVATAR_NAME), 2), AvatarProvider = _createAvatarContext[0], useAvatarContext = _createAvatarContext[1], IMAGE_NAME = "AvatarImage", AvatarImage = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var _getShapeSize, __scopeAvatar = props.__scopeAvatar, src = props.src, _props_onLoadingStatusChange = props.onLoadingStatusChange, onLoadingStatusChange = _props_onLoadingStatusChange === void 0 ? function() {
  } : _props_onLoadingStatusChange, imageProps = _object_without_properties(props, [
    "__scopeAvatar",
    "src",
    "onLoadingStatusChange"
  ]), context = useAvatarContext(IMAGE_NAME, __scopeAvatar), _React_useState = _sliced_to_array(React.useState("idle"), 2), status = _React_useState[0], setStatus = _React_useState[1], shapeSize = getVariableValue((_getShapeSize = getShapeSize(
    context.size,
    // @ts-expect-error
    {
      tokens: getTokens()
    }
  )) === null || _getShapeSize === void 0 ? void 0 : _getShapeSize.width);
  return React.useEffect(function() {
    setStatus("idle");
  }, [
    JSON.stringify(src)
  ]), React.useEffect(function() {
    onLoadingStatusChange(status), context.onImageLoadingStatusChange(status);
  }, [
    status
  ]), /* @__PURE__ */ _jsx(YStack, {
    fullscreen: !0,
    zIndex: 1,
    children: /* @__PURE__ */ _jsx(Image, _object_spread_props(_object_spread({
      fullscreen: !0
    }, typeof shapeSize == "number" && !Number.isNaN(shapeSize) && {
      width: shapeSize,
      height: shapeSize
    }, imageProps), {
      // @ts-ignore
      ref: forwardedRef,
      // @ts-ignore
      src,
      // onLoadStart={() => {
      //   // setStatus('loading')
      // }}
      onError: function() {
        setStatus("error");
      },
      onLoad: function() {
        setStatus("loaded");
      }
    }))
  });
});
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback", AvatarFallbackFrame = styled(YStack, {
  name: FALLBACK_NAME,
  position: "absolute",
  fullscreen: !0,
  zIndex: 0
}), AvatarFallback = AvatarFallbackFrame.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAvatar = props.__scopeAvatar, delayMs = props.delayMs, fallbackProps = _object_without_properties(props, [
    "__scopeAvatar",
    "delayMs"
  ]), context = useAvatarContext(FALLBACK_NAME, __scopeAvatar), _React_useState = _sliced_to_array(React.useState(delayMs === void 0), 2), canRender = _React_useState[0], setCanRender = _React_useState[1];
  return React.useEffect(function() {
    if (delayMs !== void 0) {
      var timerId = setTimeout(function() {
        return setCanRender(!0);
      }, delayMs);
      return function() {
        return clearTimeout(timerId);
      };
    }
  }, [
    delayMs
  ]), canRender && context.imageLoadingStatus !== "loaded" ? /* @__PURE__ */ _jsx(AvatarFallbackFrame, _object_spread_props(_object_spread({}, fallbackProps), {
    ref: forwardedRef
  })) : null;
}));
AvatarFallback.displayName = FALLBACK_NAME;
var AvatarFrame = styled(Square, {
  name: AVATAR_NAME,
  position: "relative",
  overflow: "hidden"
}), Avatar = withStaticProperties(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeAvatar = props.__scopeAvatar, _props_size = props.size, size = _props_size === void 0 ? "$true" : _props_size, avatarProps = _object_without_properties(props, [
    "__scopeAvatar",
    "size"
  ]), _React_useState = _sliced_to_array(React.useState("idle"), 2), imageLoadingStatus = _React_useState[0], setImageLoadingStatus = _React_useState[1];
  return /* @__PURE__ */ _jsx(AvatarProvider, {
    size,
    scope: __scopeAvatar,
    imageLoadingStatus,
    onImageLoadingStatusChange: setImageLoadingStatus,
    children: /* @__PURE__ */ _jsx(AvatarFrame, _object_spread_props(_object_spread({
      size
    }, avatarProps), {
      ref: forwardedRef
    }))
  });
}), {
  Image: AvatarImage,
  Fallback: AvatarFallback
});
Avatar.displayName = AVATAR_NAME;
export {
  Avatar,
  AvatarFallback,
  AvatarFallbackFrame,
  AvatarFrame,
  AvatarImage,
  createAvatarScope
};
//# sourceMappingURL=Avatar.js.map
