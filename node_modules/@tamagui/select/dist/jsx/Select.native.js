import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { Adapt, useAdaptParent } from "@tamagui/adapt";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb, useIsomorphicLayoutEffect } from "@tamagui/constants";
import { getVariableValue, styled, useEvent, useGet } from "@tamagui/core";
import { getSpace } from "@tamagui/get-token";
import { withStaticProperties } from "@tamagui/helpers";
import { ListItem } from "@tamagui/list-item";
import { PortalHost } from "@tamagui/portal";
import { Separator } from "@tamagui/separator";
import { registerFocusable } from "@tamagui/focusable";
import { Sheet, SheetController } from "@tamagui/sheet";
import { ThemeableStack, XStack, YStack } from "@tamagui/stacks";
import { Paragraph, SizableText } from "@tamagui/text";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { useDebounce } from "@tamagui/use-debounce";
import { SELECT_NAME } from "./constants";
import { SelectItemParentProvider, SelectProvider, createSelectContext, useSelectContext, useSelectItemParentContext } from "./context";
import { SelectContent } from "./SelectContent";
import { SelectInlineImpl } from "./SelectImpl";
import { SelectItem, useSelectItemContext } from "./SelectItem";
import { ITEM_TEXT_NAME, SelectItemText } from "./SelectItemText";
import { SelectScrollDownButton, SelectScrollUpButton } from "./SelectScrollButton";
import { SelectTrigger } from "./SelectTrigger";
import { SelectViewport } from "./SelectViewport";
import { useSelectBreakpointActive, useShowSelectSheet } from "./useSelectBreakpointActive";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var VALUE_NAME = "SelectValue", SelectValueFrame = styled(SizableText, {
  name: VALUE_NAME,
  userSelect: "none"
}), SelectValue = SelectValueFrame.styleable(function(_param, forwardedRef) {
  var __scopeSelect = _param.__scopeSelect, childrenProp = _param.children, placeholder = _param.placeholder, props = _object_without_properties(_param, [
    "__scopeSelect",
    "children",
    "placeholder"
  ]), context = useSelectContext(VALUE_NAME, __scopeSelect), itemParentContext = useSelectItemParentContext(VALUE_NAME, __scopeSelect), composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange), children = childrenProp ?? context.selectedItem, isEmptyValue = context.value == null || context.value === "", selectValueChildren = isEmptyValue ? placeholder ?? children : children;
  return /* @__PURE__ */ _jsx(SelectValueFrame, _object_spread_props(_object_spread(_object_spread_props(_object_spread({}, !props.unstyled && {
    size: itemParentContext.size,
    ellipse: !0,
    // we don't want events from the portalled `SelectValue` children to bubble
    // through the item they came from
    pointerEvents: "none"
  }), {
    ref: composedRefs
  }), props), {
    children: unwrapSelectItem(selectValueChildren)
  }));
});
function unwrapSelectItem(selectValueChildren) {
  return React.Children.map(selectValueChildren, function(child) {
    if (child) {
      var _child_type_staticConfig, _child_type, _child_props;
      if (((_child_type = child.type) === null || _child_type === void 0 || (_child_type_staticConfig = _child_type.staticConfig) === null || _child_type_staticConfig === void 0 ? void 0 : _child_type_staticConfig.componentName) === ITEM_TEXT_NAME)
        return child.props.children;
      if (!((_child_props = child.props) === null || _child_props === void 0) && _child_props.children)
        return unwrapSelectItem(child.props.children);
    }
    return child;
  });
}
var SelectIcon = styled(XStack, {
  name: "SelectIcon",
  // @ts-ignore
  "aria-hidden": !0,
  children: /* @__PURE__ */ _jsx(Paragraph, {
    children: "\u25BC"
  })
}), ITEM_INDICATOR_NAME = "SelectItemIndicator", SelectItemIndicatorFrame = styled(XStack, {
  name: ITEM_TEXT_NAME
}), SelectItemIndicator = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeSelect = props.__scopeSelect, itemIndicatorProps = _object_without_properties(props, [
    "__scopeSelect"
  ]), context = useSelectItemParentContext(ITEM_INDICATOR_NAME, __scopeSelect), itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
  return context.shouldRenderWebNative ? null : itemContext.isSelected ? /* @__PURE__ */ _jsx(SelectItemIndicatorFrame, _object_spread_props(_object_spread({
    "aria-hidden": !0
  }, itemIndicatorProps), {
    ref: forwardedRef
  })) : null;
});
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var GROUP_NAME = "SelectGroup", _createSelectContext = _sliced_to_array(createSelectContext(GROUP_NAME), 2), SelectGroupContextProvider = _createSelectContext[0], useSelectGroupContext = _createSelectContext[1], SelectGroupFrame = styled(YStack, {
  name: GROUP_NAME,
  width: "100%"
}), NativeSelectTextFrame = styled(SizableText, {
  tag: "select",
  backgroundColor: "$background",
  borderColor: "$borderColor",
  hoverStyle: {
    backgroundColor: "$backgroundHover"
  }
}), NativeSelectFrame = styled(ThemeableStack, {
  name: "NativeSelect",
  bordered: !0,
  userSelect: "none",
  outlineWidth: 0,
  paddingRight: 10,
  variants: {
    size: {
      "...size": function(val, extras) {
        var tokens = extras.tokens, paddingHorizontal = getVariableValue(tokens.space[val]), _tokens_radius_val;
        return {
          borderRadius: (_tokens_radius_val = tokens.radius[val]) !== null && _tokens_radius_val !== void 0 ? _tokens_radius_val : val,
          minHeight: tokens.size[val],
          paddingRight: paddingHorizontal + 20,
          paddingLeft: paddingHorizontal,
          paddingVertical: getSpace(val, {
            shift: -3
          })
        };
      }
    }
  },
  defaultVariants: {
    size: "$2"
  }
}), SelectGroup = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeSelect = props.__scopeSelect, groupProps = _object_without_properties(props, [
    "__scopeSelect"
  ]), groupId = React.useId(), context = useSelectContext(GROUP_NAME, __scopeSelect), itemParentContext = useSelectItemParentContext(GROUP_NAME, __scopeSelect), _itemParentContext_size, size = (_itemParentContext_size = itemParentContext.size) !== null && _itemParentContext_size !== void 0 ? _itemParentContext_size : "$true", nativeSelectRef = React.useRef(null), content = function() {
    return itemParentContext.shouldRenderWebNative ? /* @__PURE__ */ _jsx(NativeSelectFrame, {
      asChild: !0,
      size,
      // @ts-expect-error until we support typing based on tag
      value: context.value,
      id: itemParentContext.id,
      children: /* @__PURE__ */ _jsx(NativeSelectTextFrame, {
        // @ts-ignore it's ok since tag="select"
        onChange: function(event) {
          itemParentContext.onChange(event.currentTarget.value);
        },
        size,
        ref: nativeSelectRef,
        style: {
          color: "var(--color)",
          // @ts-ignore
          appearance: "none"
        },
        children: props.children
      })
    }) : /* @__PURE__ */ _jsx(SelectGroupFrame, _object_spread_props(_object_spread({
      // @ts-ignore
      role: "group",
      "aria-labelledby": groupId
    }, groupProps), {
      ref: forwardedRef
    }));
  }();
  return /* @__PURE__ */ _jsx(SelectGroupContextProvider, {
    scope: __scopeSelect,
    id: groupId || "",
    children: content
  });
});
SelectGroup.displayName = GROUP_NAME;
var LABEL_NAME = "SelectLabel", SelectLabel = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeSelect = props.__scopeSelect, labelProps = _object_without_properties(props, [
    "__scopeSelect"
  ]), context = useSelectItemParentContext(LABEL_NAME, __scopeSelect), groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
  return context.shouldRenderWebNative ? null : /* @__PURE__ */ _jsx(ListItem, _object_spread_props(_object_spread({
    tag: "div",
    componentName: LABEL_NAME,
    fontWeight: "800",
    id: groupContext.id,
    size: context.size
  }, labelProps), {
    ref: forwardedRef
  }));
});
SelectLabel.displayName = LABEL_NAME;
var SelectSeparator = styled(Separator, {
  name: "SelectSeparator"
}), SelectSheetController = function(props) {
  var context = useSelectContext("SelectSheetController", props.__scopeSelect), showSheet = useShowSelectSheet(context), breakpointActive = useSelectBreakpointActive(context.sheetBreakpoint), getShowSheet = useGet(showSheet);
  return /* @__PURE__ */ _jsx(SheetController, {
    onOpenChange: function(val) {
      getShowSheet() && props.onOpenChange(val);
    },
    open: context.open,
    hidden: breakpointActive === !1,
    children: props.children
  });
}, SelectSheetImpl = function(props) {
  return /* @__PURE__ */ _jsx(_Fragment, {
    children: props.children
  });
}, Select = withStaticProperties(function(props) {
  var __scopeSelect = props.__scopeSelect, native = props.native, children = props.children, openProp = props.open, defaultOpen = props.defaultOpen, onOpenChange = props.onOpenChange, valueProp = props.value, defaultValue = props.defaultValue, onValueChange = props.onValueChange, disablePreventBodyScroll = props.disablePreventBodyScroll, tmp = props.size, sizeProp = tmp === void 0 ? "$true" : tmp, onActiveChange = props.onActiveChange, dir = props.dir, id = props.id, internalId = React.useId(), _Object_keys_, scopeKey = __scopeSelect && (_Object_keys_ = Object.keys(__scopeSelect)[0]) !== null && _Object_keys_ !== void 0 ? _Object_keys_ : internalId, _useAdaptParent = useAdaptParent({
    Contents: React.useCallback(function() {
      return /* @__PURE__ */ _jsx(PortalHost, {
        name: "".concat(scopeKey, "SheetContents")
      });
    }, [
      scopeKey
    ])
  }), when = _useAdaptParent.when, AdaptProvider = _useAdaptParent.AdaptProvider, sheetBreakpoint = when, isSheet = useSelectBreakpointActive(sheetBreakpoint), SelectImpl = isSheet || !isWeb ? SelectSheetImpl : SelectInlineImpl, forceUpdate = React.useReducer(function() {
    return {};
  }, {})[1], _React_useState = _sliced_to_array(React.useState(null), 2), selectedItem = _React_useState[0], setSelectedItem = _React_useState[1], _useControllableState = _sliced_to_array(useControllableState({
    prop: openProp,
    defaultProp: defaultOpen || !1,
    onChange: onOpenChange
  }), 2), open = _useControllableState[0], setOpen = _useControllableState[1], _useControllableState1 = _sliced_to_array(useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || "",
    onChange: onValueChange,
    transition: !0
  }), 2), value = _useControllableState1[0], setValue = _useControllableState1[1];
  React.useEffect(function() {
    open && emitValue(value);
  }, [
    open
  ]), React.useEffect(function() {
    emitValue(value);
  }, [
    value
  ]), React.useEffect(function() {
    if (props.id)
      return registerFocusable(props.id, {
        focusAndSelect: function() {
          setOpen == null || setOpen(function(value2) {
            return !value2;
          });
        },
        focus: function() {
        }
      });
  }, [
    props.id
  ]);
  var _React_useState1 = _sliced_to_array(React.useState(0), 2), activeIndex = _React_useState1[0], setActiveIndex = _React_useState1[1], _useEmitter = _sliced_to_array(useEmitter(), 2), emitValue = _useEmitter[0], valueSubscribe = _useEmitter[1], _useEmitter1 = _sliced_to_array(useEmitter(), 2), emitActiveIndex = _useEmitter1[0], activeIndexSubscribe = _useEmitter1[1], selectedIndexRef = React.useRef(null), activeIndexRef = React.useRef(null), listContentRef = React.useRef([]), _React_useState2 = _sliced_to_array(React.useState(0), 2), selectedIndex = _React_useState2[0], setSelectedIndex = _React_useState2[1], _React_useState3 = _sliced_to_array(React.useState(null), 2), valueNode = _React_useState3[0], setValueNode = _React_useState3[1];
  useIsomorphicLayoutEffect(function() {
    selectedIndexRef.current = selectedIndex, activeIndexRef.current = activeIndex;
  });
  var shouldRenderWebNative = isWeb && (native === !0 || native === "web" || Array.isArray(native) && native.includes("web")), setActiveIndexDebounced = useDebounce(function(index) {
    setActiveIndex(function(prev) {
      return prev !== index && typeof index == "number" && activeIndexRef.current !== index ? (emitActiveIndex(index), index) : null;
    });
  }, 1, {}, []);
  return /* @__PURE__ */ _jsx(AdaptProvider, {
    children: /* @__PURE__ */ _jsx(SelectItemParentProvider, {
      scope: __scopeSelect,
      initialValue: React.useMemo(function() {
        return value;
      }, [
        open
      ]),
      size: sizeProp,
      activeIndexSubscribe,
      valueSubscribe,
      setOpen,
      id,
      onChange: React.useCallback(function(val) {
        setValue(val), emitValue(val);
      }, []),
      onActiveChange: useEvent(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
          args[_key] = arguments[_key];
        onActiveChange == null || onActiveChange.apply(void 0, _to_consumable_array(args));
      }),
      setSelectedIndex,
      setValueAtIndex: React.useCallback(function(index, value2) {
        listContentRef.current[index] = value2;
      }, []),
      shouldRenderWebNative,
      children: /* @__PURE__ */ _jsx(SelectProvider, {
        scope: __scopeSelect,
        disablePreventBodyScroll,
        dir,
        blockSelection: !1,
        fallback: !1,
        selectedItem,
        setSelectedItem,
        forceUpdate,
        valueNode,
        onValueNodeChange: setValueNode,
        scopeKey,
        sheetBreakpoint,
        activeIndex,
        selectedIndex,
        setActiveIndex: setActiveIndexDebounced,
        value,
        open,
        native,
        children: /* @__PURE__ */ _jsx(SelectSheetController, {
          onOpenChange: setOpen,
          __scopeSelect,
          children: shouldRenderWebNative ? children : /* @__PURE__ */ _jsx(SelectImpl, _object_spread_props(_object_spread({
            activeIndexRef,
            listContentRef,
            selectedIndexRef
          }, props), {
            open,
            value,
            children
          }))
        })
      })
    })
  });
}, {
  Adapt,
  Content: SelectContent,
  Group: SelectGroup,
  Icon: SelectIcon,
  Item: SelectItem,
  ItemIndicator: SelectItemIndicator,
  ItemText: SelectItemText,
  Label: SelectLabel,
  ScrollDownButton: SelectScrollDownButton,
  ScrollUpButton: SelectScrollUpButton,
  Trigger: SelectTrigger,
  Value: SelectValue,
  Viewport: SelectViewport,
  Sheet: Sheet.Controlled
});
function useEmitter() {
  var listeners = React.useRef();
  listeners.current || (listeners.current = /* @__PURE__ */ new Set());
  var emit = function(value) {
    listeners.current.forEach(function(l) {
      return l(value);
    });
  }, subscribe = React.useCallback(function(listener) {
    return listeners.current.add(listener), function() {
      listeners.current.delete(listener);
    };
  }, []);
  return [
    emit,
    subscribe
  ];
}
Select.displayName = SELECT_NAME;
export {
  Select,
  SelectGroupFrame,
  SelectIcon,
  SelectSeparator
};
//# sourceMappingURL=Select.js.map
