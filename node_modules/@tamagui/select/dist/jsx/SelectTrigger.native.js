import { jsx as _jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isClient, isWeb } from "@tamagui/core";
import { ListItem } from "@tamagui/list-item";
import * as React from "react";
import { useSelectContext, useSelectItemParentContext } from "./context";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var TRIGGER_NAME = "SelectTrigger", isPointerCoarse = isWeb && isClient ? window.matchMedia("(pointer:coarse)").matches : !0, SelectTrigger = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var _context_floatingContext, __scopeSelect = props.__scopeSelect, _props_disabled = props.disabled, disabled = _props_disabled === void 0 ? !1 : _props_disabled, _props_unstyled = props.unstyled, unstyled = _props_unstyled === void 0 ? !1 : _props_unstyled, triggerProps = _object_without_properties(props, [
    "__scopeSelect",
    "disabled",
    "unstyled"
  ]), context = useSelectContext(TRIGGER_NAME, __scopeSelect), itemParentContext = useSelectItemParentContext(TRIGGER_NAME, __scopeSelect), composedRefs = useComposedRefs(forwardedRef, (_context_floatingContext = context.floatingContext) === null || _context_floatingContext === void 0 ? void 0 : _context_floatingContext.refs.setReference);
  return itemParentContext.shouldRenderWebNative ? null : /* @__PURE__ */ _jsx(ListItem, _object_spread(_object_spread_props(_object_spread(_object_spread_props(_object_spread({
    componentName: TRIGGER_NAME,
    unstyled,
    tag: "button",
    type: "button",
    id: itemParentContext.id
  }, !unstyled && {
    backgrounded: !0,
    radiused: !0,
    hoverTheme: !0,
    pressTheme: !0,
    focusable: !0,
    focusVisibleStyle: {
      outlineStyle: "solid",
      outlineWidth: 2,
      outlineColor: "$outlineColor"
    },
    borderWidth: 1,
    size: itemParentContext.size
  }), {
    // aria-controls={context.contentId}
    "aria-expanded": context.open,
    "aria-autocomplete": "none",
    dir: context.dir,
    disabled,
    "data-disabled": disabled ? "" : void 0
  }), triggerProps), {
    ref: composedRefs
  }), {
    onPress: function() {
      itemParentContext.setOpen(!context.open);
    }
  }));
});
export {
  SelectTrigger
};
//# sourceMappingURL=SelectTrigger.js.map
