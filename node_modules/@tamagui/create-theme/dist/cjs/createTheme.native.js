"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createTheme_exports = {};
__export(createTheme_exports, {
  addChildren: () => addChildren,
  createTheme: () => createTheme,
  createThemeWithPalettes: () => createThemeWithPalettes
});
module.exports = __toCommonJS(createTheme_exports);
var import_isMinusZero = require("./isMinusZero"), import_themeInfo = require("./themeInfo");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var identityCache = /* @__PURE__ */ new Map();
function createThemeWithPalettes(palettes, defaultPalette, definition, options, name) {
  var skipCache = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !1;
  if (!palettes[defaultPalette])
    throw new Error("No pallete: ".concat(defaultPalette));
  var newDef = _object_spread({}, definition);
  for (var key in definition) {
    var val = definition[key];
    if (typeof val == "string" && val[0] === "$") {
      var _val_split = _sliced_to_array(val.split("."), 2), altPaletteName$ = _val_split[0], altPaletteIndex = _val_split[1], altPaletteName = altPaletteName$.slice(1), parentName = defaultPalette.split("_")[0], altPalette = palettes[altPaletteName] || palettes["".concat(parentName, "_").concat(altPaletteName)];
      if (altPalette) {
        var next = getValue(altPalette, +altPaletteIndex);
        typeof next < "u" && (newDef[key] = next);
      }
    }
  }
  return createTheme(palettes[defaultPalette], newDef, options, name, skipCache);
}
function createTheme(palette, definition, options, name) {
  var skipCache = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, cacheKey = skipCache ? "" : JSON.stringify([
    name,
    palette,
    definition,
    options
  ]);
  if (!skipCache && identityCache.has(cacheKey))
    return identityCache.get(cacheKey);
  var theme = _object_spread({}, Object.fromEntries(Object.entries(definition).map(function(param) {
    var _param = _sliced_to_array(param, 2), key = _param[0], offset = _param[1];
    return [
      key,
      getValue(palette, offset)
    ];
  })), options == null ? void 0 : options.nonInheritedValues);
  return (0, import_themeInfo.setThemeInfo)(theme, {
    palette,
    definition,
    options,
    name
  }), cacheKey && identityCache.set(cacheKey, theme), theme;
}
var getValue = function(palette, value) {
  if (!palette)
    throw new Error("No palette!");
  if (typeof value == "string")
    return value;
  var max = palette.length - 1, isPositive = value === 0 ? !(0, import_isMinusZero.isMinusZero)(value) : value >= 0, next = isPositive ? value : max + value, index = Math.min(Math.max(0, next), max);
  return palette[index];
};
function addChildren(themes, getChildren) {
  var out = _object_spread({}, themes);
  for (var key in themes) {
    var subThemes = getChildren(key, themes[key]);
    for (var sKey in subThemes)
      out["".concat(key, "_").concat(sKey)] = subThemes[sKey];
  }
  return out;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addChildren,
  createTheme,
  createThemeWithPalettes
});
//# sourceMappingURL=createTheme.js.map
