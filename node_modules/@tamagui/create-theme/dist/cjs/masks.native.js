"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var masks_exports = {};
__export(masks_exports, {
  createIdentityMask: () => createIdentityMask,
  createInverseMask: () => createInverseMask,
  createMask: () => createMask,
  createShiftMask: () => createShiftMask,
  createSoftenMask: () => createSoftenMask,
  createStrengthenMask: () => createStrengthenMask,
  createWeakenMask: () => createWeakenMask,
  skipMask: () => skipMask
});
module.exports = __toCommonJS(masks_exports);
var import_helpers = require("./helpers"), import_isMinusZero = require("./isMinusZero");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var createMask = function(createMask2) {
  return typeof createMask2 == "function" ? {
    name: createMask2.name || "unnamed",
    mask: createMask2
  } : createMask2;
}, skipMask = {
  name: "skip-mask",
  mask: function(template, opts) {
    var skip = opts.skip, result = Object.fromEntries(Object.entries(template).filter(function(param) {
      var _param = _sliced_to_array(param, 1), k = _param[0];
      return !skip || !(k in skip);
    }).map(function(param) {
      var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
      return [
        k,
        applyOverrides(k, v, opts)
      ];
    }));
    return result;
  }
};
function applyOverrides(key, value, opts) {
  var _opts_overrideSwap, override, strategy = opts.overrideStrategy, overrideSwap = (_opts_overrideSwap = opts.overrideSwap) === null || _opts_overrideSwap === void 0 ? void 0 : _opts_overrideSwap[key];
  if (typeof overrideSwap < "u")
    override = overrideSwap, strategy = "swap";
  else {
    var _opts_overrideShift, overrideShift = (_opts_overrideShift = opts.overrideShift) === null || _opts_overrideShift === void 0 ? void 0 : _opts_overrideShift[key];
    if (typeof overrideShift < "u")
      override = overrideShift, strategy = "shift";
    else {
      var _opts_override, overrideDefault = (_opts_override = opts.override) === null || _opts_override === void 0 ? void 0 : _opts_override[key];
      typeof overrideDefault < "u" && (override = overrideDefault, strategy = opts.overrideStrategy);
    }
  }
  return typeof override > "u" || typeof override == "string" ? value : strategy === "swap" ? override : value;
}
var createIdentityMask = function() {
  return {
    name: "identity-mask",
    mask: function(template, opts) {
      return skipMask.mask(template, opts);
    }
  };
}, createInverseMask = function() {
  var mask = {
    name: "inverse-mask",
    mask: function(template, opts) {
      var inversed = (0, import_helpers.objectFromEntries)((0, import_helpers.objectEntries)(template).map(function(param) {
        var _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
        return [
          k,
          -v
        ];
      }));
      return skipMask.mask(inversed, opts);
    }
  };
  return mask;
}, createShiftMask = function() {
  var inverse = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).inverse, defaultOptions = arguments.length > 1 ? arguments[1] : void 0, mask = {
    name: "shift-mask",
    mask: function(template, opts) {
      var _$_object_spread = _object_spread({}, defaultOptions, opts), override = _$_object_spread.override, _object_spread_overrideStrategy = _$_object_spread.overrideStrategy, overrideStrategy = _object_spread_overrideStrategy === void 0 ? "shift" : _object_spread_overrideStrategy, maxIn = _$_object_spread.max, palette = _$_object_spread.palette, _object_spread_min = _$_object_spread.min, min = _object_spread_min === void 0 ? 0 : _object_spread_min, _object_spread_strength = _$_object_spread.strength, strength = _object_spread_strength === void 0 ? 1 : _object_spread_strength, values = Object.entries(template), max = maxIn ?? (palette ? Object.values(palette).length - 1 : Number.POSITIVE_INFINITY), out = {}, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
      try {
        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
          var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], value = _step_value[1];
          if (typeof value != "string") {
            if (typeof (override == null ? void 0 : override[key]) == "number") {
              var overrideVal = override[key];
              out[key] = overrideStrategy === "shift" ? value + overrideVal : overrideVal;
              continue;
            }
            if (typeof (override == null ? void 0 : override[key]) == "string") {
              out[key] = override[key];
              continue;
            }
            var isPositive = value === 0 ? !(0, import_isMinusZero.isMinusZero)(value) : value >= 0, direction = isPositive ? 1 : -1, invert = inverse ? -1 : 1, next = value + strength * direction * invert, clamped = isPositive ? Math.max(min, Math.min(max, next)) : Math.min(-min, Math.max(-max, next));
            out[key] = clamped;
          }
        }
      } catch (err) {
        _didIteratorError = !0, _iteratorError = err;
      } finally {
        try {
          !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
        } finally {
          if (_didIteratorError)
            throw _iteratorError;
        }
      }
      var skipped = skipMask.mask(out, opts);
      return skipped;
    }
  };
  return mask;
}, createWeakenMask = function(defaultOptions) {
  return {
    name: "soften-mask",
    mask: createShiftMask({}, defaultOptions).mask
  };
}, createSoftenMask = createWeakenMask, createStrengthenMask = function(defaultOptions) {
  return {
    name: "strengthen-mask",
    mask: createShiftMask({
      inverse: !0
    }, defaultOptions).mask
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createIdentityMask,
  createInverseMask,
  createMask,
  createShiftMask,
  createSoftenMask,
  createStrengthenMask,
  createWeakenMask,
  skipMask
});
//# sourceMappingURL=masks.js.map
