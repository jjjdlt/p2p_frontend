import { jsx as _jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/constants";
import { Slot, createStyledContext } from "@tamagui/core";
import React from "react";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function createCollection(name) {
  var _createStyledContext = createStyledContext({
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  }), CollectionProviderImpl = _createStyledContext.Provider, useCollectionContext = _createStyledContext.useStyledContext, CollectionProvider = function(props) {
    var __scopeCollection = props.__scopeCollection, children = props.children, ref = React.useRef(null), itemMap = React.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ _jsx(CollectionProviderImpl, {
      scope: __scopeCollection,
      itemMap,
      collectionRef: ref,
      children
    });
  };
  CollectionProvider.displayName = "CollectionProvider";
  var COLLECTION_SLOT_NAME = name + "CollectionSlot", CollectionSlot = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
    var __scopeCollection = props.__scopeCollection, children = props.children, context = useCollectionContext(__scopeCollection), composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ _jsx(Slot, {
      ref: composedRefs,
      children
    });
  });
  CollectionSlot.displayName = COLLECTION_SLOT_NAME;
  var ITEM_SLOT_NAME = name + "CollectionItemSlot", ITEM_DATA_ATTR = "data-collection-item", CollectionItemSlot = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
    var __scopeCollection = props.__scopeCollection, children = props.children, itemData = _object_without_properties(props, [
      "__scopeCollection",
      "children"
    ]), ref = React.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), context = useCollectionContext(__scopeCollection);
    React.useEffect(function() {
      return context.itemMap.set(ref, _object_spread({
        ref
      }, itemData)), function() {
        return void context.itemMap.delete(ref);
      };
    });
    var _obj;
    return /* @__PURE__ */ _jsx(Slot, (_obj = {}, _define_property(_obj, ITEM_DATA_ATTR, ""), _define_property(_obj, "ref", composedRefs), _define_property(_obj, "children", children), _obj));
  });
  CollectionItemSlot.displayName = ITEM_SLOT_NAME;
  function useCollection(__scopeCollection) {
    var context = useCollectionContext(__scopeCollection), getItems = React.useCallback(function() {
      if (!isWeb)
        return [];
      var collectionNode = context.collectionRef.current;
      if (!collectionNode) return [];
      var orderedNodes = Array.from(collectionNode.querySelectorAll("[".concat(ITEM_DATA_ATTR, "]"))), items = Array.from(context.itemMap.values()), orderedItems = items.sort(function(a, b) {
        return orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current);
      });
      return orderedItems;
    }, [
      context.collectionRef,
      context.itemMap
    ]);
    return getItems;
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot
    },
    useCollection
  ];
}
export {
  createCollection
};
//# sourceMappingURL=Collection.js.map
