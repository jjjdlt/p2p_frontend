import { jsx as _jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/constants";
import { registerFocusable } from "@tamagui/focusable";
import { getFontSize } from "@tamagui/font-size";
import { getSize } from "@tamagui/get-token";
import { Group, useGroupItem } from "@tamagui/group";
import { withStaticProperties } from "@tamagui/helpers";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { RovingFocusGroup } from "@tamagui/roving-focus";
import { useControllableState } from "@tamagui/use-controllable-state";
import { useDirection } from "@tamagui/use-direction";
import { createStyledContext, getVariableValue, styled, useTheme } from "@tamagui/web";
import React from "react";
import { Toggle, ToggleFrame } from "./Toggle";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var TOGGLE_GROUP_NAME = "ToggleGroup", TOGGLE_GROUP_ITEM_NAME = "ToggleGroupItem", TOGGLE_GROUP_CONTEXT = "ToggleGroup", _createStyledContext = createStyledContext(), ToggleGroupItemProvider = _createStyledContext.Provider, useToggleGroupItemContext = _createStyledContext.useStyledContext, _createStyledContext1 = createStyledContext(), ToggleGroupContext = _createStyledContext1.Provider, useToggleGroupContext = _createStyledContext1.useStyledContext, ToggleGroupItem = ToggleFrame.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var disablePassStyles = props.disablePassStyles, rest = _object_without_properties(props, [
    "disablePassStyles"
  ]), valueContext = useToggleGroupValueContext(props.__scopeToggleGroup), context = useToggleGroupContext(props.__scopeToggleGroup), pressed = valueContext == null ? void 0 : valueContext.value.includes(props.value), disabled = context.disabled || props.disabled || !1, groupItemProps = useGroupItem({
    disabled
  }), _props_size, size = (_props_size = props.size) !== null && _props_size !== void 0 ? _props_size : context.size, sizeProps = props.unstyled ? {} : {
    width: void 0,
    height: void 0,
    padding: getVariableValue(size) * 0.6
  }, iconSize = (typeof size == "number" ? size * 0.7 : getFontSize(size)) * 1.2, theme = useTheme(), getThemedIcon = useGetThemedIcon({
    size: iconSize,
    color: theme.color
  }), childrens = React.Children.toArray(props.children), children = childrens.map(function(child) {
    return props.disablePassStyles || !/* @__PURE__ */ React.isValidElement(child) ? child : getThemedIcon(child);
  }), commonProps = _object_spread_props(_object_spread({
    pressed,
    disabled
  }, sizeProps, rest), {
    children
  }), inner = /* @__PURE__ */ _jsx(ToggleGroupItemImpl, _object_spread(_object_spread_props(_object_spread({}, commonProps), {
    ref: forwardedRef,
    focusable: !disabled,
    disabled
  }), groupItemProps));
  return /* @__PURE__ */ _jsx(ToggleGroupItemProvider, {
    scope: props.__scopeToggleGroup,
    children: context.rovingFocus ? /* @__PURE__ */ _jsx(RovingFocusGroup.Item, {
      asChild: "except-style",
      __scopeRovingFocusGroup: props.__scopeToggleGroup || TOGGLE_GROUP_CONTEXT,
      focusable: !disabled,
      active: pressed,
      children: inner
    }) : inner
  });
}));
ToggleGroupItem.displayName = TOGGLE_GROUP_ITEM_NAME;
var ToggleGroupItemImpl = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeToggleGroup = props.__scopeToggleGroup, value = props.value, itemProps = _object_without_properties(props, [
    "__scopeToggleGroup",
    "value"
  ]), valueContext = useToggleGroupValueContext(__scopeToggleGroup), singleProps = {
    "aria-pressed": void 0
  }, typeProps = valueContext.type === "single" ? singleProps : void 0;
  return /* @__PURE__ */ _jsx(Toggle, _object_spread_props(_object_spread({}, typeProps, itemProps), {
    ref: forwardedRef,
    onPressedChange: function(pressed) {
      pressed ? valueContext.onItemActivate(value) : valueContext.onItemDeactivate(value);
    }
  }));
}), ToggleGroup = withStaticProperties(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var type = props.type, toggleGroupProps = _object_without_properties(props, [
    "type"
  ]);
  if (isWeb || React.useEffect(function() {
    if (props.id)
      return registerFocusable(props.id, {
        // TODO: would be nice to focus on the first child later - could be done with reforest
        // for now leaving it empty
        focus: function() {
        }
      });
  }, [
    props.id
  ]), type === "single") {
    var singleProps = toggleGroupProps;
    return /* @__PURE__ */ _jsx(ToggleGroupImplSingle, _object_spread_props(_object_spread({}, singleProps), {
      ref: forwardedRef
    }));
  }
  if (type === "multiple") {
    var multipleProps = toggleGroupProps;
    return /* @__PURE__ */ _jsx(ToggleGroupImplMultiple, _object_spread_props(_object_spread({}, multipleProps), {
      ref: forwardedRef
    }));
  }
  throw new Error("Missing prop `type` expected on `".concat(TOGGLE_GROUP_NAME, "`"));
}), {
  Item: ToggleGroupItem
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var _createStyledContext2 = createStyledContext(), ToggleGroupValueProvider = _createStyledContext2.Provider, useToggleGroupValueContext = _createStyledContext2.useStyledContext, ToggleGroupImplSingle = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var valueProp = props.value, defaultValue = props.defaultValue, _props_onValueChange = props.onValueChange, onValueChange = _props_onValueChange === void 0 ? function() {
  } : _props_onValueChange, _props_disableDeactivation = props.disableDeactivation, disableDeactivation = _props_disableDeactivation === void 0 ? !1 : _props_disableDeactivation, toggleGroupSingleProps = _object_without_properties(props, [
    "value",
    "defaultValue",
    "onValueChange",
    "disableDeactivation"
  ]), _useControllableState = _sliced_to_array(useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  }), 2), value = _useControllableState[0], setValue = _useControllableState[1];
  return /* @__PURE__ */ _jsx(ToggleGroupValueProvider, {
    scope: props.__scopeToggleGroup,
    type: "single",
    value: value ? [
      value
    ] : [],
    defaultValue: value,
    onItemActivate: setValue,
    onItemDeactivate: React.useCallback(function() {
      return disableDeactivation ? null : setValue("");
    }, [
      setValue,
      disableDeactivation
    ]),
    children: /* @__PURE__ */ _jsx(ToggleGroupImpl, _object_spread_props(_object_spread({}, toggleGroupSingleProps), {
      ref: forwardedRef
    }))
  });
}), ToggleGroupImplMultiple = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var valueProp = props.value, defaultValue = props.defaultValue, _props_onValueChange = props.onValueChange, onValueChange = _props_onValueChange === void 0 ? function() {
  } : _props_onValueChange, disableDeactivation = props.disableDeactivation, toggleGroupMultipleProps = _object_without_properties(props, [
    "value",
    "defaultValue",
    "onValueChange",
    "disableDeactivation"
  ]), _useControllableState = _sliced_to_array(useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  }), 2), tmp = _useControllableState[0], value = tmp === void 0 ? [] : tmp, setValue = _useControllableState[1], handleButtonActivate = React.useCallback(function(itemValue) {
    return setValue(function() {
      var prevValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return _to_consumable_array(prevValue).concat([
        itemValue
      ]);
    });
  }, [
    setValue
  ]), handleButtonDeactivate = React.useCallback(function(itemValue) {
    return setValue(function() {
      var prevValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return prevValue.filter(function(value2) {
        return value2 !== itemValue;
      });
    });
  }, [
    setValue
  ]);
  return /* @__PURE__ */ _jsx(ToggleGroupValueProvider, {
    scope: props.__scopeToggleGroup,
    type: "multiple",
    value,
    defaultValue: value,
    onItemActivate: handleButtonActivate,
    onItemDeactivate: handleButtonDeactivate,
    children: /* @__PURE__ */ _jsx(ToggleGroupImpl, _object_spread_props(_object_spread({}, toggleGroupMultipleProps), {
      ref: forwardedRef
    }))
  });
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var ToggleGroupImplElementFrame = styled(Group, {
  name: TOGGLE_GROUP_NAME,
  variants: {
    unstyled: {
      false: {
        backgroundColor: "$background"
      }
    },
    orientation: {
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      },
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), ToggleGroupImpl = ToggleGroupImplElementFrame.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeToggleGroup = props.__scopeToggleGroup, _props_disabled = props.disabled, disabled = _props_disabled === void 0 ? !1 : _props_disabled, _props_orientation = props.orientation, orientation = _props_orientation === void 0 ? "horizontal" : _props_orientation, dir = props.dir, _props_rovingFocus = props.rovingFocus, rovingFocus = _props_rovingFocus === void 0 ? !0 : _props_rovingFocus, _props_loop = props.loop, loop = _props_loop === void 0 ? !0 : _props_loop, _props_unstyled = props.unstyled, unstyled = _props_unstyled === void 0 ? !1 : _props_unstyled, tmp = props.size, sizeProp = tmp === void 0 ? "$true" : tmp, _props_sizeAdjust = props.sizeAdjust, sizeAdjust = _props_sizeAdjust === void 0 ? 0 : _props_sizeAdjust, toggleGroupProps = _object_without_properties(props, [
    "__scopeToggleGroup",
    "disabled",
    "orientation",
    "dir",
    "rovingFocus",
    "loop",
    "unstyled",
    "size",
    "sizeAdjust"
  ]), direction = useDirection(dir), commonProps = _object_spread({
    role: "group",
    dir: direction
  }, toggleGroupProps), adjustedSize = getVariableValue(getSize(sizeProp, {
    shift: sizeAdjust
  })), size = Math.round(adjustedSize * 0.45);
  return /* @__PURE__ */ _jsx(ToggleGroupContext, {
    scope: __scopeToggleGroup,
    rovingFocus,
    disabled,
    size,
    children: rovingFocus ? /* @__PURE__ */ _jsx(RovingFocusGroup, {
      asChild: "except-style",
      __scopeRovingFocusGroup: __scopeToggleGroup || TOGGLE_GROUP_CONTEXT,
      orientation,
      dir: direction,
      loop,
      children: /* @__PURE__ */ _jsx(ToggleGroupImplElementFrame, _object_spread({
        "aria-orientation": orientation,
        orientation,
        axis: orientation,
        ref: forwardedRef,
        "data-disabled": disabled ? "" : void 0,
        unstyled
      }, commonProps))
    }) : /* @__PURE__ */ _jsx(ToggleGroupImplElementFrame, _object_spread({
      "aria-orientation": orientation,
      ref: forwardedRef,
      orientation,
      "data-disabled": disabled ? "" : void 0,
      unstyled
    }, commonProps))
  });
}));
export {
  ToggleGroup
};
//# sourceMappingURL=ToggleGroup.js.map
