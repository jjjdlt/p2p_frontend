var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Adapt_exports = {};
__export(Adapt_exports, {
  Adapt: () => Adapt,
  AdaptContents: () => AdaptContents,
  AdaptParentContext: () => AdaptParentContext,
  useAdaptParent: () => useAdaptParent
});
module.exports = __toCommonJS(Adapt_exports);
var import_constants = require("@tamagui/constants"), import_constants2 = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_helpers = require("@tamagui/helpers"), import_react = require("react"), import_jsx_runtime = require("react/jsx-runtime");
const AdaptParentContext = (0, import_react.createContext)(null), AdaptContents = (props) => {
  const context = (0, import_react.useContext)(AdaptParentContext);
  if (!context?.Contents)
    throw new Error(
      process.env.NODE_ENV === "production" ? "tamagui.dev/docs/intro/errors#warning-002" : "You're rendering a Tamagui <Adapt /> component without nesting it inside a parent that is able to adapt."
    );
  return (0, import_react.createElement)(context.Contents, props);
};
AdaptContents.shouldForwardSpace = !0;
const useAdaptParent = ({
  Contents
}) => {
  const [when, setWhen] = (0, import_react.useState)(null);
  return {
    AdaptProvider: (0, import_react.useMemo)(() => {
      const context = {
        Contents,
        setWhen
      };
      function AdaptProviderView(props) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AdaptParentContext.Provider, { value: context, children: props.children });
      }
      return AdaptProviderView;
    }, [Contents]),
    when
  };
}, Adapt = (0, import_helpers.withStaticProperties)(
  function({ platform, when, children }) {
    const context = (0, import_react.useContext)(AdaptParentContext), media = (0, import_core.useMedia)();
    let enabled = !platform;
    return platform === "touch" && (enabled = import_constants2.isTouchable), platform === "native" && (enabled = !import_constants.isWeb), platform === "web" && (enabled = import_constants.isWeb), platform === "ios" && (enabled = import_constants.isIos), platform === "android" && (enabled = import_constants.isAndroid), when && !media[when] && (enabled = !1), (0, import_constants.useIsomorphicLayoutEffect)(() => {
      enabled && context?.setWhen(when || enabled);
    }, [when, context, enabled]), enabled ? children : null;
  },
  {
    Contents: AdaptContents
  }
);
//# sourceMappingURL=Adapt.js.map
