"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var src_exports = {};
__export(src_exports, {
  default: () => FullySpecified
});
module.exports = __toCommonJS(src_exports);
var import_node_fs = require("node:fs"), import_node_path = require("node:path"), import_types = require("@babel/types");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var makeDeclaration = function(param) {
  var declaration = param.declaration, makeNodes = param.makeNodes, _param_ensureFileExists = param.ensureFileExists, ensureFileExists = _param_ensureFileExists === void 0 ? !1 : _param_ensureFileExists, _param_esExtensionDefault = param.esExtensionDefault, esExtensionDefault = _param_esExtensionDefault === void 0 ? ".js" : _param_esExtensionDefault, _param_tryExtensions = param.tryExtensions, tryExtensions = _param_tryExtensions === void 0 ? [
    ".js",
    ".mjs",
    ".cjs"
  ] : _param_tryExtensions, _param_esExtensions = param.esExtensions, esExtensions = _param_esExtensions === void 0 ? [
    ".js",
    ".mjs",
    ".cjs"
  ] : _param_esExtensions, _param_includePackages = param.includePackages, includePackages = _param_includePackages === void 0 ? [] : _param_includePackages;
  return function(path, param2) {
    var _param_file = param2.file, filename = _param_file.opts.filename, source = path.node.source;
    if (!(!source || !filename)) {
      var _path_node = path.node, exportKind = _path_node.exportKind, importKind = _path_node.importKind, isTypeOnly = exportKind === "type" || importKind === "type";
      if (!isTypeOnly) {
        var value = source.value, module2 = value, packageData = null;
        if (!(!isLocalFile(module2) && (includePackages.some(function(name) {
          return module2.startsWith(name);
        }) && (packageData = getPackageData(module2)), !(packageData && packageData.hasPath)))) {
          var filenameExtension = (0, import_node_path.extname)(filename), filenameDirectory = (0, import_node_path.dirname)(filename), isDirectory = isLocalDirectory((0, import_node_path.resolve)(filenameDirectory, module2)), currentModuleExtension = (0, import_node_path.extname)(module2), targetModule = evaluateTargetModule({
            module: module2,
            filenameDirectory,
            filenameExtension,
            packageData,
            currentModuleExtension,
            isDirectory,
            tryExtensions,
            esExtensions,
            esExtensionDefault,
            ensureFileExists
          });
          if (!(targetModule === !1 || currentModuleExtension === targetModule.extension)) {
            var nodes = makeNodes(path);
            path.replaceWith(
              // @ts-ignore
              declaration.apply(null, _to_consumable_array(nodes).concat([
                (0, import_types.stringLiteral)(targetModule.module)
              ]))
            );
          }
        }
      }
    }
  };
};
function FullySpecified(api, options) {
  return api.assertVersion(7), {
    name: "babel-plugin-fully-specified",
    visitor: {
      ImportDeclaration: makeDeclaration(_object_spread_props(_object_spread({}, options), {
        declaration: import_types.importDeclaration,
        makeNodes: function(param) {
          var specifiers = param.node.specifiers;
          return [
            specifiers
          ];
        }
      })),
      ExportNamedDeclaration: makeDeclaration(_object_spread_props(_object_spread({}, options), {
        declaration: import_types.exportNamedDeclaration,
        makeNodes: function(param) {
          var _param_node = param.node, declaration = _param_node.declaration, specifiers = _param_node.specifiers;
          return [
            declaration,
            specifiers
          ];
        }
      })),
      ExportAllDeclaration: makeDeclaration(_object_spread_props(_object_spread({}, options), {
        declaration: import_types.exportAllDeclaration,
        makeNodes: function() {
          return [];
        }
      }))
    }
  };
}
function getPackageData(module2) {
  try {
    for (var packagePath = require.resolve(module2), parts = packagePath.split("/"), packageDir = "", i = parts.length; i >= 0; i--) {
      var dir = (0, import_node_path.dirname)(parts.slice(0, i).join("/"));
      if ((0, import_node_fs.existsSync)("".concat(dir, "/package.json"))) {
        packageDir = dir;
        break;
      }
    }
    if (!packageDir)
      throw new Error("no package dir");
    var packageJson = JSON.parse((0, import_node_fs.readFileSync)("".concat(packageDir, "/package.json")).toString()), hasPath = !module2.endsWith(packageJson.name);
    return {
      hasPath,
      packagePath
    };
  } catch {
  }
  return null;
}
function isLocalFile(module2) {
  return module2.startsWith(".") || module2.startsWith("/");
}
function isLocalDirectory(absoluteDirectory) {
  return (0, import_node_fs.existsSync)(absoluteDirectory) && (0, import_node_fs.lstatSync)(absoluteDirectory).isDirectory();
}
function evaluateTargetModule(param) {
  var module2 = param.module, currentModuleExtension = param.currentModuleExtension, packageData = param.packageData, isDirectory = param.isDirectory, filenameDirectory = param.filenameDirectory, filenameExtension = param.filenameExtension, tryExtensions = param.tryExtensions, esExtensions = param.esExtensions, esExtensionDefault = param.esExtensionDefault, ensureFileExists = param.ensureFileExists;
  if (packageData)
    return packageData.packagePath.endsWith("index.js") && !module2.endsWith("index.js") && (module2 = "".concat(module2, "/index")), {
      module: module2 + esExtensionDefault,
      extension: esExtensionDefault
    };
  if (currentModuleExtension && !esExtensions.includes(currentModuleExtension))
    return !1;
  isDirectory && !(0, import_node_fs.existsSync)((0, import_node_path.resolve)(filenameDirectory, currentModuleExtension ? module2 : module2 + esExtensionDefault)) && (module2 = "".concat(module2, "/index"));
  var targetFile = (0, import_node_path.resolve)(filenameDirectory, module2);
  if (ensureFileExists) {
    if (esExtensions.includes(filenameExtension) && (0, import_node_fs.existsSync)(targetFile + filenameExtension))
      return {
        module: module2 + filenameExtension,
        extension: filenameExtension
      };
    var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
    try {
      for (var _iterator = tryExtensions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
        var extension = _step.value;
        if ((0, import_node_fs.existsSync)(targetFile + extension))
          return {
            module: module2 + ".mjs",
            extension
          };
      }
    } catch (err) {
      _didIteratorError = !0, _iteratorError = err;
    } finally {
      try {
        !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
      } finally {
        if (_didIteratorError)
          throw _iteratorError;
      }
    }
  } else return esExtensions.includes(filenameExtension) ? {
    module: module2 + filenameExtension,
    extension: filenameExtension
  } : {
    module: module2 + esExtensionDefault,
    extension: esExtensionDefault
  };
  return !1;
}
//# sourceMappingURL=index.js.map
