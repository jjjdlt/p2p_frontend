"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var SheetScrollView_exports = {};
__export(SheetScrollView_exports, {
  SheetScrollView: () => SheetScrollView
});
module.exports = __toCommonJS(SheetScrollView_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_compose_refs = require("@tamagui/compose-refs"), import_scroll_view = require("@tamagui/scroll-view"), import_react = require("react"), import_SheetContext = require("./SheetContext");
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var SHEET_SCROLL_VIEW_NAME = "SheetScrollView", SheetScrollView = /* @__PURE__ */ (0, import_react.forwardRef)(function(_param, ref) {
  var __scopeSheet = _param.__scopeSheet, children = _param.children, onScroll = _param.onScroll, props = _object_without_properties(_param, [
    "__scopeSheet",
    "children",
    "onScroll"
  ]), context = (0, import_SheetContext.useSheetContext)(SHEET_SCROLL_VIEW_NAME, __scopeSheet), scrollBridge = context.scrollBridge, scrollRef = (0, import_react.useRef)(null), state = (0, import_react.useRef)({
    lastPageY: 0,
    dragAt: 0,
    dys: [],
    // store a few recent dys to get velocity on release
    isScrolling: !1,
    isDragging: !1
  }), release = function() {
    if (state.current.isDragging) {
      state.current.isDragging = !1, scrollBridge.scrollStartY = -1, state.current.isScrolling = !1;
      var vy = 0;
      if (state.current.dys.length) {
        var recentDys = state.current.dys.slice(-10), dist = recentDys.length ? recentDys.reduce(function(a, b) {
          return a + b;
        }, 0) : 0, avgDy = dist / recentDys.length;
        vy = avgDy * 0.04;
      }
      state.current.dys = [], scrollBridge.release({
        dragAt: state.current.dragAt,
        vy
      });
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_scroll_view.ScrollView, _object_spread_props(_object_spread({
    ref: (0, import_compose_refs.composeRefs)(scrollRef, ref),
    flex: 1,
    scrollEventThrottle: 8,
    // scrollEnabled={scrollEnabled}
    onScroll: function(e) {
      var y = e.nativeEvent.contentOffset.y;
      scrollBridge.y = y, y > 0 && (scrollBridge.scrollStartY = -1), onScroll == null || onScroll(e);
    },
    // This assures that we do not skip the "scrollBridge" values processing
    // when passing this prop into a <Sheet.ScrollView /> overriding it here
    // Useful when using this ScrollView with lists such as "FlashList", i.e.
    // ```
    // renderScrollComponent={Sheet.ScrollView}
    // ```
    onStartShouldSetResponder: function() {
      return scrollBridge.scrollStartY = -1, state.current.isDragging = !0, !0;
    },
    // setting to false while onResponderMove is disabled
    onMoveShouldSetResponder: function() {
      return !1;
    },
    // somehow disabling works better, regression, no more nice drag continue scroll
    // onResponderMove={(e) => {
    //   const { pageY } = e.nativeEvent
    //   if (state.current.isScrolling) {
    //     return
    //   }
    //   if (scrollBridge.scrollStartY === -1) {
    //     scrollBridge.scrollStartY = pageY
    //     state.current.lastPageY = pageY
    //   }
    //   const dragAt = pageY - scrollBridge.scrollStartY
    //   const dy = pageY - state.current.lastPageY
    //   state.current.lastPageY = pageY // after dy
    //   const isDraggingUp = dy < 0
    //   const isPaneAtTop = scrollBridge.paneY <= scrollBridge.paneMinY
    //   if ((dy === 0 || isDraggingUp) && isPaneAtTop) {
    //     state.current.isScrolling = true
    //     setScrollEnabled(true)
    //     return
    //   }
    //   setScrollEnabled(false)
    //   scrollBridge.drag(dragAt)
    //   state.current.dragAt = dragAt
    //   state.current.dys.push(dy)
    //   // only do every so often, cut down to 10 again
    //   if (state.current.dys.length > 100) {
    //     state.current.dys = state.current.dys.slice(-10)
    //   }
    // }}
    onResponderRelease: release,
    className: "_ovs-contain"
  }, props), {
    children: (0, import_react.useMemo)(function() {
      return children;
    }, [
      children
    ])
  }));
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SheetScrollView
});
//# sourceMappingURL=SheetScrollView.js.map
