import vm from "node:vm";
import generate from "@babel/generator";
import * as t from "@babel/types";
import esbuild from "esbuild";
import { FAILED_EVAL } from "../constants";
import { evaluateAstNode } from "./evaluateAstNode";
function createEvaluator(param) {
  var props = param.props, staticNamespace = param.staticNamespace, sourcePath = param.sourcePath, traversePath = param.traversePath, shouldPrintDebug = param.shouldPrintDebug, evalFn = function(n) {
    if (t.isIdentifier(n) && typeof staticNamespace[n.name] < "u")
      return staticNamespace[n.name];
    var evalContext = vm.createContext(staticNamespace), codeWithTypescriptAnnotations = "(".concat(generate(n).code, ")"), code = esbuild.transformSync(codeWithTypescriptAnnotations, {
      loader: "tsx"
    }).code.replace(/;\n$/, "");
    return shouldPrintDebug && console.info("evaluating", code), vm.runInContext(code, evalContext);
  };
  return function(n) {
    return evaluateAstNode(n, evalFn);
  };
}
function createSafeEvaluator(attemptEval) {
  return function(n) {
    try {
      return attemptEval(n);
    } catch {
      return FAILED_EVAL;
    }
  };
}
export {
  createEvaluator,
  createSafeEvaluator
};
//# sourceMappingURL=createEvaluator.js.map
