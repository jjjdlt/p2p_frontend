import * as t from "@babel/types";
function hoistClassNames(path, existing, expr) {
  var hoist = hoistClassNames.bind(null, path, existing);
  if (t.isStringLiteral(expr)) {
    if (expr.value.trim() === "")
      return expr;
    if (existing[expr.value])
      return existing[expr.value];
    var identifier = replaceStringWithVariable(expr);
    return existing[expr.value] = identifier, identifier;
  }
  if (t.isBinaryExpression(expr))
    return t.binaryExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isLogicalExpression(expr))
    return t.logicalExpression(expr.operator, hoist(expr.left), hoist(expr.right));
  if (t.isConditionalExpression(expr))
    return t.conditionalExpression(expr.test, hoist(expr.consequent), hoist(expr.alternate));
  return expr;
  function replaceStringWithVariable(str) {
    var uid = path.scope.generateUidIdentifier("cn"), parent = path.findParent(function(path2) {
      return path2.isProgram();
    });
    if (!parent) throw new Error("no program?");
    var variable = t.variableDeclaration("const", [
      // adding a space for extra safety
      t.variableDeclarator(uid, t.stringLiteral(" ".concat(str.value)))
    ]);
    return parent.unshiftContainer("body", variable), uid;
  }
}
export {
  hoistClassNames
};
//# sourceMappingURL=hoistClassNames.js.map
