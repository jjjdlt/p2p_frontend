import generate from "@babel/generator";
import * as t from "@babel/types";
import invariant from "invariant";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function normalizeTernaries(ternaries) {
  if (invariant(Array.isArray(ternaries), "extractStaticTernaries expects param 1 to be an array of ternaries"), ternaries.length === 0)
    return [];
  for (var ternariesByKey = {}, idx = -1, len = ternaries.length; ++idx < len; ) {
    var _ternaries_idx = ternaries[idx], test = _ternaries_idx.test, consequent = _ternaries_idx.consequent, alternate = _ternaries_idx.alternate, remove = _ternaries_idx.remove, rest = _object_without_properties(_ternaries_idx, [
      "test",
      "consequent",
      "alternate",
      "remove"
    ]), ternaryTest = test;
    t.isExpressionStatement(test) && (ternaryTest = test.expression);
    var shouldSwap = !1;
    t.isUnaryExpression(test) && test.operator === "!" ? (ternaryTest = test.argument, shouldSwap = !0) : t.isBinaryExpression(test) && (test.operator === "!==" || test.operator === "!=") && (ternaryTest = t.binaryExpression(test.operator.replace("!", "="), test.left, test.right), shouldSwap = !0);
    var key = generate(ternaryTest).code;
    ternariesByKey[key] || (ternariesByKey[key] = _object_spread_props(_object_spread({}, rest), {
      alternate: {},
      consequent: {},
      test: ternaryTest,
      remove
    }));
    var _ref, altStyle = (_ref = shouldSwap ? consequent : alternate) !== null && _ref !== void 0 ? _ref : {}, _ref1, consStyle = (_ref1 = shouldSwap ? alternate : consequent) !== null && _ref1 !== void 0 ? _ref1 : {};
    Object.assign(ternariesByKey[key].alternate, altStyle), Object.assign(ternariesByKey[key].consequent, consStyle);
  }
  var ternaryExpression = Object.keys(ternariesByKey).map(function(key2) {
    return ternariesByKey[key2];
  });
  return ternaryExpression;
}
export {
  normalizeTernaries
};
//# sourceMappingURL=normalizeTernaries.js.map
