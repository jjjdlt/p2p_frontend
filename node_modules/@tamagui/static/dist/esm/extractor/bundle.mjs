import { basename, dirname, join } from "node:path";
import esbuild from "esbuild";
import * as FS from "fs-extra";
import { esbuildAliasPlugin } from "./esbuildAliasPlugin.mjs";
import { resolveWebOrNativeSpecificEntry } from "./loadTamagui.mjs";
const esbuildLoaderConfig = {
    ".js": "jsx",
    ".png": "dataurl",
    ".jpg": "dataurl",
    ".jpeg": "dataurl",
    ".svg": "dataurl",
    ".gif": "dataurl",
    ".webp": "dataurl",
    ".woff2": "dataurl",
    ".woff": "dataurl",
    ".eot": "dataurl",
    ".otf": "dataurl",
    ".ttf": "dataurl",
    ".mp4": "file",
    ".mpeg4": "file",
    ".mov": "file",
    ".avif": "file",
    ".wmv": "file",
    ".webm": "file",
    ".wav": "file",
    ".aac": "file",
    ".ogg": "file",
    ".flac": "file"
  },
  dataExtensions = Object.keys(esbuildLoaderConfig).filter(k => esbuildLoaderConfig[k] === "file" || esbuildLoaderConfig[k] === "dataurl").map(k => k.slice(1)),
  esbuildIgnoreFilesRegex = new RegExp(`.(${dataExtensions.join("|")})$`, "i");
function getESBuildConfig({
  entryPoints,
  resolvePlatformSpecificEntries,
  ...options
}, platform, aliases) {
  return process.env.DEBUG?.startsWith("tamagui") && console.info("Building", entryPoints), {
    bundle: !0,
    entryPoints: resolvePlatformSpecificEntries ? entryPoints.map(resolveWebOrNativeSpecificEntry) : entryPoints,
    format: "cjs",
    target: "node16",
    jsx: "transform",
    jsxFactory: "react",
    allowOverwrite: !0,
    keepNames: !0,
    resolveExtensions: [".web.tsx", ".web.ts", ".web.jsx", ".web.js", ".tsx", ".ts", ".jsx", ".js"],
    platform: "node",
    tsconfigRaw: {
      compilerOptions: {
        jsx: "react-jsx"
      }
    },
    loader: esbuildLoaderConfig,
    logLevel: "warning",
    plugins: [{
      name: "external",
      setup(build) {
        build.onResolve({
          filter: /@tamagui\/core/
        }, args => ({
          path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
          external: !0
        })), build.onResolve({
          filter: /react-native\/package.json$/
        }, args => ({
          path: "react-native/package.json",
          external: !0
        })), build.onResolve({
          filter: /@tamagui\/web/
        }, args => ({
          path: platform === "native" ? "@tamagui/core/native" : "@tamagui/core",
          external: !0
        })), build.onResolve({
          filter: /^(react-native|react-native\/.*)$/
        }, args => ({
          path: "react-native-web-lite",
          external: !0
        })), build.onResolve({
          filter: /react-native-reanimated/
        }, args => ({
          path: "react-native-reanimated",
          external: !0
        }));
      }
    }, esbuildAliasPlugin({
      ...aliases
    })],
    ...options
  };
}
async function bundle(props, platform, aliases) {
  await asyncLock(props);
  const config = getESBuildConfig(props, platform, aliases);
  return esbuild.build(config);
}
async function asyncLock(props) {
  const lockFile = join(dirname(props.outfile), basename(props.outfile, ".lock")),
    lockStat = await FS.stat(lockFile).catch(() => {});
  if ((lockStat ? ( /* @__PURE__ */new Date()).getTime() - new Date(lockStat.mtime).getTime() : Number.POSITIVE_INFINITY) < 500) {
    process.env.DEBUG?.startsWith("tamagui") && console.info("Waiting for existing build", props.entryPoints);
    let tries = 5;
    for (; tries--;) {
      if (await FS.pathExists(props.outfile)) return;
      await new Promise(res => setTimeout(res, 50));
    }
  }
  FS.writeFile(lockFile, "");
}
export { bundle, esbuildIgnoreFilesRegex, esbuildLoaderConfig };