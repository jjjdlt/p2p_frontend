import { register } from "esbuild-register/dist/node";
import { requireTamaguiCore } from "./helpers/requireTamaguiCore";
import { esbuildIgnoreFilesRegex } from "./extractor/bundle";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var _process_env_TAMAGUI_IGNORE_BUNDLE_ERRORS, nameToPaths = {}, getNameToPaths = function() {
  return nameToPaths;
}, Module = require("node:module"), packageJson = require("react-native-web/package.json"), proxyWorm = require("@tamagui/proxy-worm"), rnw = require("react-native-web"), isRegistered = !1, og, whitelisted = {
  react: !0
}, compiled = {};
function setRequireResult(name, result) {
  compiled[name] = result;
}
function registerRequire(platform) {
  var proxyWormImports = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
    proxyWormImports: !1
  }).proxyWormImports;
  if (isRegistered)
    return {
      tamaguiRequire: require,
      unregister: function() {
      }
    };
  var unregister = register({
    hookIgnoreNodeModules: !1
  }).unregister;
  og || (og = Module.prototype.require), isRegistered = !0, Module.prototype.require = tamaguiRequire;
  function tamaguiRequire(path) {
    var _this = this;
    if (path === "tamagui" && platform === "native")
      return og.apply(this, [
        "tamagui/native"
      ]);
    if (path === "@tamagui/core" || path === "@tamagui/web")
      return requireTamaguiCore(platform, function(path2) {
        return og.apply(_this, [
          path2
        ]);
      });
    if (path in compiled)
      return compiled[path];
    if (esbuildIgnoreFilesRegex.test(path))
      return {};
    if (path === "@gorhom/bottom-sheet" || path.startsWith("react-native-reanimated") || path === "expo-linear-gradient" || path === "@expo/vector-icons" || path === "tamagui/linear-gradient" || path === "react-native-svg")
      return proxyWorm;
    if (path === "react-native/package.json")
      return packageJson;
    if (path === "react-native-web-lite" || path.startsWith("react-native"))
      return rnw;
    if (path in knownIgnorableModules)
      return proxyWorm;
    if (!whitelisted[path] && proxyWormImports && !path.includes(".tamagui-dynamic-eval"))
      return path === "tamagui" ? og.apply(this, [
        path
      ]) : proxyWorm;
    try {
      var out = og.apply(this, arguments);
      return out;
    } catch (err) {
      return !process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && path.includes("tamagui-dynamic-eval") ? void 0 : (allowedIgnores[path] || IGNORES === "true" || (!process.env.TAMAGUI_SHOW_FULL_BUNDLE_ERRORS && !process.env.DEBUG ? hasWarnedForModules.has(path) || (hasWarnedForModules.add(path), console.info("  tamagui: skipping ".concat(path, " tamagui.dev/docs/intro/errors#warning-001"))) : console.error('Tamagui failed loading "'.concat(path, `"
  
  `).concat(err.message, `
  `).concat(err.stack, `

  `))), proxyWorm);
    }
  }
  return {
    tamaguiRequire,
    unregister: function() {
      unregister(), isRegistered = !1, Module.prototype.require = og;
    }
  };
}
var IGNORES = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS, extraIgnores = IGNORES === "true" ? [] : (_process_env_TAMAGUI_IGNORE_BUNDLE_ERRORS = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS) === null || _process_env_TAMAGUI_IGNORE_BUNDLE_ERRORS === void 0 ? void 0 : _process_env_TAMAGUI_IGNORE_BUNDLE_ERRORS.split(","), knownIgnorableModules = _object_spread({
  "expo-modules": !0,
  solito: !0
}, Object.fromEntries((extraIgnores == null ? void 0 : extraIgnores.map(function(k) {
  return [
    k,
    !0
  ];
})) || [])), hasWarnedForModules = /* @__PURE__ */ new Set(), allowedIgnores = {
  "expo-constants": !0,
  "./ExpoHaptics": !0,
  "./js/MaskedView": !0
};
export {
  getNameToPaths,
  registerRequire,
  setRequireResult
};
//# sourceMappingURL=registerRequire.js.map
