import net from "node:net";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _ts_generator(thisArg, body) {
  var f, y, t, g, _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t = op[0] & 2 ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      switch (y = 0, t && (op = [
        op[0] & 2,
        t.value
      ]), op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t = _.trys, !(t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1], t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2], _.ops.push(op);
            break;
          }
          t[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
function startServer(options) {
  return _startServer.apply(this, arguments);
}
function _startServer() {
  return _startServer = _async_to_generator(function(options) {
    var port, server;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return [
            4,
            getAvailablePort()
          ];
        case 1:
          return port = _state.sent(), server = net.createServer(), server.unref(), [
            4,
            new Promise(function(resolve, reject) {
              server.on("error", reject), server.on("connection", function(conn) {
                conn.on("data", function(data) {
                  console.info("got", data.toString());
                });
              }), server.listen({
                port
              }, function() {
                var port2 = server.address().port;
                server.close(function() {
                  resolve(port2);
                });
              });
            })
          ];
        case 2:
          return _state.sent(), [
            2
          ];
      }
    });
  }), _startServer.apply(this, arguments);
}
function getAvailablePort() {
  return _getAvailablePort.apply(this, arguments);
}
function _getAvailablePort() {
  return _getAvailablePort = _async_to_generator(function() {
    var port, _arguments = arguments;
    return _ts_generator(this, function(_state) {
      return port = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : 8089, [
        2,
        checkAvailablePort(port).catch(function() {
          return getAvailablePort(port + 1);
        })
      ];
    });
  }), _getAvailablePort.apply(this, arguments);
}
function checkAvailablePort(port) {
  return new Promise(function(resolve, reject) {
    var server = net.createServer();
    server.unref(), server.on("error", reject), server.listen({
      port
    }, function() {
      var _$port = server.address().port;
      server.close(function() {
        resolve(_$port);
      });
    });
  });
}
export {
  startServer
};
//# sourceMappingURL=server.js.map
