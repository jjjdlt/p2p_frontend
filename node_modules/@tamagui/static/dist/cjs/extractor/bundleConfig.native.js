"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var bundleConfig_exports = {};
__export(bundleConfig_exports, {
  bundleConfig: () => bundleConfig,
  esbuildOptions: () => esbuildOptions,
  getBundledConfig: () => getBundledConfig,
  hasBundledConfigChanged: () => hasBundledConfigChanged,
  loadComponents: () => loadComponents,
  loadComponentsInner: () => loadComponentsInner
});
module.exports = __toCommonJS(bundleConfig_exports);
var import_node_fs = require("node:fs"), import_node_path = require("node:path"), import_generator = __toESM(require("@babel/generator")), import_traverse = __toESM(require("@babel/traverse")), t = __toESM(require("@babel/types")), import_cli_color = require("@tamagui/cli-color"), import_esbuild = __toESM(require("esbuild")), FS = __toESM(require("fs-extra")), import_registerRequire = require("../registerRequire"), import_babelParse = require("./babelParse"), import_bundle = require("./bundle"), import_getTamaguiConfigPathFromOptionsConfig = require("./getTamaguiConfigPathFromOptionsConfig");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function _ts_generator(thisArg, body) {
  var f, y, t2, g, _ = {
    label: 0,
    sent: function() {
      if (t2[0] & 1) throw t2[1];
      return t2[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t2 = op[0] & 2 ? y.return : op[0] ? y.throw || ((t2 = y.return) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
      switch (y = 0, t2 && (op = [
        op[0] & 2,
        t2.value
      ]), op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t2 = _.trys, !(t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t2[1]) {
            _.label = t2[1], t2 = op;
            break;
          }
          if (t2 && _.label < t2[2]) {
            _.label = t2[2], _.ops.push(op);
            break;
          }
          t2[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
var external = [
  "@tamagui/core",
  "@tamagui/web",
  "react",
  "react-dom",
  "react-native-svg"
], esbuildExtraOptions = {
  define: {
    __DEV__: "".concat(process.env.NODE_ENV === "development")
  }
}, esbuildOptions = _object_spread({
  target: "es2018",
  format: "cjs",
  jsx: "automatic",
  platform: "node"
}, esbuildExtraOptions), currentBundle = null, isBundling = !1, lastBundle = null, waitForBundle = /* @__PURE__ */ new Set();
function hasBundledConfigChanged() {
  return lastBundle === currentBundle ? !1 : (lastBundle = currentBundle, !0);
}
function getBundledConfig(props) {
  return _getBundledConfig.apply(this, arguments);
}
function _getBundledConfig() {
  return _getBundledConfig = _async_to_generator(function(props) {
    var rebuild, _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          return rebuild = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : !1, isBundling ? [
            4,
            new Promise(function(res) {
              waitForBundle.add(res);
            })
          ] : [
            3,
            2
          ];
        case 1:
          return _state.sent(), [
            3,
            4
          ];
        case 2:
          return !currentBundle || rebuild ? [
            4,
            bundleConfig(props)
          ] : [
            3,
            4
          ];
        case 3:
          return [
            2,
            _state.sent()
          ];
        case 4:
          return [
            2,
            currentBundle
          ];
      }
    });
  }), _getBundledConfig.apply(this, arguments);
}
function bundleConfig(props) {
  return _bundleConfig.apply(this, arguments);
}
function _bundleConfig() {
  return _bundleConfig = _async_to_generator(function(props) {
    var _process_env_DEBUG, _process_env_DEBUG1, configEntry, tmpDir, configOutPath, baseComponents, componentOutPaths, e, start, out, unregister, config, components, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, component, _process_env_DEBUG2, res, err, _process_env_DEBUG3;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          if (_state.trys.push([
            0,
            7,
            8,
            9
          ]), isBundling = !0, configEntry = props.config ? (0, import_getTamaguiConfigPathFromOptionsConfig.getTamaguiConfigPathFromOptionsConfig)(props.config) : "", tmpDir = (0, import_node_path.join)(process.cwd(), ".tamagui"), configOutPath = (0, import_node_path.join)(tmpDir, "tamagui.config.cjs"), baseComponents = (props.components || []).filter(function(x) {
            return x !== "@tamagui/core";
          }), componentOutPaths = baseComponents.map(function(componentModule) {
            return (0, import_node_path.join)(tmpDir, "".concat(componentModule.split(import_node_path.sep).join("-").replace(/[^a-z0-9]+/gi, ""), "-components.config.cjs"));
          }), process.env.NODE_ENV === "development" && (!((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui")) && console.info("Building config entry", configEntry), props.disableInitialBuild) return [
            3,
            6
          ];
          _state.label = 1;
        case 1:
          return _state.trys.push([
            1,
            3,
            ,
            4
          ]), [
            4,
            FS.ensureDir(tmpDir)
          ];
        case 2:
          return _state.sent(), [
            3,
            4
          ];
        case 3:
          return e = _state.sent(), [
            3,
            4
          ];
        case 4:
          return start = Date.now(), [
            4,
            Promise.all([
              props.config ? (0, import_bundle.bundle)(_object_spread({
                entryPoints: [
                  configEntry
                ],
                external,
                outfile: configOutPath,
                target: "node16"
              }, esbuildExtraOptions), props.platform || "web") : null
            ].concat(_to_consumable_array(baseComponents.map(function(componentModule, i) {
              return (0, import_bundle.bundle)(_object_spread({
                entryPoints: [
                  componentModule
                ],
                resolvePlatformSpecificEntries: !0,
                external,
                outfile: componentOutPaths[i],
                target: "node16"
              }, esbuildExtraOptions), props.platform || "web");
            }))))
          ];
        case 5:
          _state.sent(), (0, import_cli_color.colorLog)(import_cli_color.Color.FgYellow, `
    \u27A1 [tamagui] built config and components (`.concat(Date.now() - start, "ms):")), (0, import_cli_color.colorLog)(import_cli_color.Color.Dim, `
        Config     .`.concat(import_node_path.sep).concat((0, import_node_path.relative)(process.cwd(), configOutPath), `
        Components `).concat(_to_consumable_array(componentOutPaths.map(function(p) {
            return ".".concat(import_node_path.sep).concat((0, import_node_path.relative)(process.cwd(), p));
          })).join(`
             `), `
        `)), _state.label = 6;
        case 6:
          unregister = (0, import_registerRequire.registerRequire)(props.platform || "web").unregister;
          try {
            out = require(configOutPath);
          } catch (err2) {
            throw err2;
          } finally {
            unregister();
          }
          if (config = out.default || out || out.config, config && config.config && !config.tokens && (config = config.config), !config)
            throw new Error("No config: ".concat(config));
          if (components = loadComponents(_object_spread_props(_object_spread({}, props), {
            components: componentOutPaths
          })), !components)
            throw new Error("No components found: ".concat(componentOutPaths.join(", ")));
          _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
          try {
            for (_iterator = components[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0)
              component = _step.value, component.moduleName = baseComponents[componentOutPaths.indexOf(component.moduleName)] || component.moduleName, component.moduleName || (!((_process_env_DEBUG2 = process.env.DEBUG) === null || _process_env_DEBUG2 === void 0) && _process_env_DEBUG2.includes("tamagui") || process.env.IS_TAMAGUI_DEV) && console.warn("\u26A0\uFE0F no module name found: ".concat(component.moduleName, " ").concat(JSON.stringify(baseComponents), " in ").concat(JSON.stringify(componentOutPaths)));
          } catch (err2) {
            _didIteratorError = !0, _iteratorError = err2;
          } finally {
            try {
              !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
            } finally {
              if (_didIteratorError)
                throw _iteratorError;
            }
          }
          return process.env.NODE_ENV === "development" && (!((_process_env_DEBUG1 = process.env.DEBUG) === null || _process_env_DEBUG1 === void 0) && _process_env_DEBUG1.startsWith("tamagui")) && console.info("Loaded components", components), res = {
            components,
            nameToPaths: {},
            tamaguiConfig: config
          }, currentBundle = res, [
            2,
            res
          ];
        case 7:
          return err = _state.sent(), console.error("Error bundling tamagui config: ".concat(err == null ? void 0 : err.message, " (run with DEBUG=tamagui to see stack)")), !((_process_env_DEBUG3 = process.env.DEBUG) === null || _process_env_DEBUG3 === void 0) && _process_env_DEBUG3.includes("tamagui") && console.error(err.stack), [
            3,
            9
          ];
        case 8:
          return isBundling = !1, waitForBundle.forEach(function(cb) {
            return cb();
          }), waitForBundle.clear(), [
            7
          ];
        case 9:
          return [
            2
          ];
      }
    });
  }), _bundleConfig.apply(this, arguments);
}
function loadComponents(props) {
  var forceExports = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, coreComponents = getCoreComponents(props), otherComponents = loadComponentsInner(props, forceExports);
  return _to_consumable_array(coreComponents).concat(_to_consumable_array(otherComponents || []));
}
function getCoreComponents(props) {
  var loaded = loadComponentsInner(_object_spread_props(_object_spread({}, props), {
    components: [
      "@tamagui/core"
    ]
  }));
  if (!loaded)
    throw new Error("Core should always load");
  return [
    _object_spread_props(_object_spread({}, loaded[0]), {
      moduleName: "@tamagui/core"
    })
  ];
}
function loadComponentsInner(props) {
  var forceExports = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, componentsModules = props.components || [], key = componentsModules.join("");
  if (!forceExports && cacheComponents[key])
    return cacheComponents[key];
  var unregister = (0, import_registerRequire.registerRequire)(props.platform || "web", {
    proxyWormImports: forceExports
  }).unregister;
  try {
    var info = componentsModules.flatMap(function(name) {
      var attemptLoad = function() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_forceExports = _ref.forceExports, forceExports2 = _ref_forceExports === void 0 ? !1 : _ref_forceExports;
        isDynamic && (writtenContents = forceExports2 ? transformAddExports((0, import_babelParse.babelParse)(esbuildit(fileContents, "modern"), name)) : fileContents, FS.writeFileSync(loadModule, writtenContents), import_esbuild.default.buildSync(_object_spread_props(_object_spread({}, esbuildOptions), {
          entryPoints: [
            loadModule
          ],
          outfile: loadModule,
          alias: {
            "react-native": require.resolve("react-native-web-lite")
          },
          bundle: !0,
          packages: "external",
          allowOverwrite: !0,
          // logLevel: 'silent',
          sourcemap: !1,
          loader: import_bundle.esbuildLoaderConfig
        }))), process.env.DEBUG === "tamagui" && console.info("loadModule", loadModule, require.resolve(loadModule));
        var moduleResult = require(loadModule);
        forceExports2 || (0, import_registerRequire.setRequireResult)(name, moduleResult);
        var nameToInfo = getComponentStaticConfigByName(name, interopDefaultExport(moduleResult));
        return {
          moduleName: name,
          nameToInfo
        };
      }, extension = (0, import_node_path.extname)(name), isLocal = !!extension, isDynamic = isLocal && forceExports, fileContents = isDynamic ? (0, import_node_fs.readFileSync)(name, "utf-8") : "", loadModule = isDynamic ? (0, import_node_path.join)((0, import_node_path.dirname)(name), ".tamagui-dynamic-eval-".concat((0, import_node_path.basename)(name), ".tsx")) : name, writtenContents = fileContents, didBabel = !1, dispose = function() {
        isDynamic && FS.removeSync(loadModule);
      };
      try {
        var res = attemptLoad({
          forceExports: !0
        });
        return didBabel = !0, res;
      } catch (err) {
        var _process_env_DEBUG;
        console.info("babel err", err, writtenContents), writtenContents = fileContents, !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.info("Error parsing babel likely", err);
      } finally {
        dispose();
      }
      try {
        return attemptLoad({
          forceExports: !1
        });
      } catch (err) {
        return process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && (console.info(`

Tamagui attempted but failed to dynamically optimize components in:
  `.concat(name, `
`)), console.info(err), console.info("At: ".concat(loadModule), `
didBabel: `.concat(didBabel), `
In:`, writtenContents, `
isDynamic: `, isDynamic)), [];
      } finally {
        dispose();
      }
    });
    return cacheComponents[key] = info, info;
  } catch (err) {
    return console.info("Tamagui error bundling components", err.message, err.stack), null;
  } finally {
    unregister();
  }
}
var esbuildit = function(src, target) {
  return import_esbuild.default.transformSync(src, _object_spread({}, esbuildOptions, target === "modern" && {
    target: "es2022",
    jsx: "automatic",
    loader: "tsx",
    platform: "neutral",
    format: "esm"
  })).code;
};
function getComponentStaticConfigByName(name, exported) {
  var components = {};
  try {
    if (!exported || typeof exported != "object" || Array.isArray(exported))
      throw new Error("Invalid export from package ".concat(name, ": ").concat(typeof exported > "u" ? "undefined" : _type_of(exported)));
    for (var _ref in exported) {
      var key = _ref, found = getTamaguiComponent(key, exported[key]);
      if (found) {
        var _found_staticConfig = found.staticConfig, Component = _found_staticConfig.Component, sc = _object_without_properties(_found_staticConfig, [
          "Component"
        ]);
        components[key] = {
          staticConfig: sc
        };
      }
    }
  } catch (err) {
    process.env.TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD && (console.error("Tamagui failed getting components from ".concat(name, " (Disable error by setting environment variable TAMAGUI_ENABLE_WARN_DYNAMIC_LOAD=1)")), console.error(err));
  }
  return components;
}
function getTamaguiComponent(name, Component) {
  if (name[0].toUpperCase() === name[0]) {
    var staticConfig = Component == null ? void 0 : Component.staticConfig;
    if (staticConfig)
      return Component;
  }
}
function interopDefaultExport(mod) {
  var _mod_default;
  return (_mod_default = mod == null ? void 0 : mod.default) !== null && _mod_default !== void 0 ? _mod_default : mod;
}
var cacheComponents = {};
function transformAddExports(ast) {
  var usedNames = /* @__PURE__ */ new Set();
  return (0, import_traverse.default)(ast, {
    ExportNamedDeclaration: function(nodePath) {
      if (nodePath.node.specifiers) {
        var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
        try {
          for (var _iterator = nodePath.node.specifiers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
            var spec = _step.value;
            usedNames.add(t.isIdentifier(spec.exported) ? spec.exported.name : spec.exported.value);
          }
        } catch (err) {
          _didIteratorError = !0, _iteratorError = err;
        } finally {
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError)
              throw _iteratorError;
          }
        }
      }
    }
  }), (0, import_traverse.default)(ast, {
    VariableDeclaration: function(nodePath) {
      if (t.isProgram(nodePath.parent)) {
        var decs = nodePath.node.declarations;
        if (!(decs.length > 1)) {
          var _decs = _sliced_to_array(decs, 1), dec = _decs[0];
          t.isIdentifier(dec.id) && dec.init && (usedNames.has(dec.id.name) || (usedNames.add(dec.id.name), nodePath.replaceWith(t.exportNamedDeclaration(t.variableDeclaration("let", [
            dec
          ]), [
            t.exportSpecifier(t.identifier(dec.id.name), t.identifier(dec.id.name))
          ]))));
        }
      }
    }
  }), (0, import_generator.default)(ast, {
    concise: !1,
    filename: "test.tsx",
    retainLines: !1,
    sourceMaps: !1
  }).code;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bundleConfig,
  esbuildOptions,
  getBundledConfig,
  hasBundledConfigChanged,
  loadComponents,
  loadComponentsInner
});
//# sourceMappingURL=bundleConfig.js.map
