"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var getStaticBindingsForScope_exports = {};
__export(getStaticBindingsForScope_exports, {
  cleanupBeforeExit: () => cleanupBeforeExit,
  getStaticBindingsForScope: () => getStaticBindingsForScope
});
module.exports = __toCommonJS(getStaticBindingsForScope_exports);
var import_node_child_process = require("node:child_process"), import_node_path = require("node:path"), t = __toESM(require("@babel/types")), import_evaluateAstNode = require("./evaluateAstNode"), import_getSourceModule = require("./getSourceModule");
function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg), value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve2, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _type_of(obj) {
  "@swc/helpers - typeof";
  return obj && typeof Symbol < "u" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _ts_generator(thisArg, body) {
  var f, y, t2, g, _ = {
    label: 0,
    sent: function() {
      if (t2[0] & 1) throw t2[1];
      return t2[1];
    },
    trys: [],
    ops: []
  };
  return g = {
    next: verb(0),
    throw: verb(1),
    return: verb(2)
  }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([
        n,
        v
      ]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    for (; _; ) try {
      if (f = 1, y && (t2 = op[0] & 2 ? y.return : op[0] ? y.throw || ((t2 = y.return) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done) return t2;
      switch (y = 0, t2 && (op = [
        op[0] & 2,
        t2.value
      ]), op[0]) {
        case 0:
        case 1:
          t2 = op;
          break;
        case 4:
          return _.label++, {
            value: op[1],
            done: !1
          };
        case 5:
          _.label++, y = op[1], op = [
            0
          ];
          continue;
        case 7:
          op = _.ops.pop(), _.trys.pop();
          continue;
        default:
          if (t2 = _.trys, !(t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t2[1]) {
            _.label = t2[1], t2 = op;
            break;
          }
          if (t2 && _.label < t2[2]) {
            _.label = t2[2], _.ops.push(op);
            break;
          }
          t2[2] && _.ops.pop(), _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [
        6,
        e
      ], y = 0;
    } finally {
      f = t2 = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: !0
    };
  }
}
function _ts_values(o) {
  var s = typeof Symbol == "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length == "number") return {
    next: function() {
      return o && i >= o.length && (o = void 0), {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
var isLocalImport = function(path) {
  return path.startsWith(".") || path.startsWith("/");
};
function resolveImportPath(sourcePath, path) {
  var sourceDir = (0, import_node_path.dirname)(sourcePath);
  return isLocalImport(path) ? ((0, import_node_path.extname)(path) === "" && (path += ""), (0, import_node_path.resolve)(sourceDir, path)) : path;
}
var cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Map(), loadCmd = "".concat((0, import_node_path.join)(__dirname, "loadFile.js")), exited = !1, child = null;
function forkChild() {
  child = (0, import_node_child_process.fork)(loadCmd, [], {
    execArgv: [
      "-r",
      "esbuild-register"
    ],
    detached: !1,
    stdio: "ignore"
  });
}
function cleanupBeforeExit() {
  exited || child && (child.removeAllListeners(), child.unref(), child.disconnect(), child.kill(), exited = !0);
}
process.once("SIGTERM", cleanupBeforeExit);
process.once("SIGINT", cleanupBeforeExit);
process.once("beforeExit", cleanupBeforeExit);
function importModule(path) {
  if (child || forkChild(), pending.has(path))
    return pending.get(path);
  var promise = new Promise(function(res, rej) {
    if (child) {
      if (cache.size > 2e3 && cache.clear(), cache.has(path))
        return cache.get(path);
      var listener = function(msg) {
        if (child && msg && typeof msg == "string") {
          if (msg[0] === "-") {
            rej(new Error(msg.slice(1)));
            return;
          }
          child.removeListener("message", listener);
          var val = JSON.parse(msg);
          cache.set(path, val), res(val);
        }
      };
      child.once("message", listener), child.send("".concat(path.replace(".js", "")));
    }
  });
  return pending.set(path, promise), promise;
}
function getStaticBindingsForScope(scope) {
  return _getStaticBindingsForScope.apply(this, arguments);
}
function _getStaticBindingsForScope() {
  return _getStaticBindingsForScope = _async_to_generator(function(scope) {
    var _loop, whitelist, sourcePath, bindingCache, shouldPrintDebug, bindings, ret, program, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop1, _iterator, _step, err, k, _ret, _arguments = arguments;
    return _ts_generator(this, function(_state) {
      switch (_state.label) {
        case 0:
          _loop = function(k3) {
            var binding = bindings[k3], sourceModule = (0, import_getSourceModule.getSourceModule)(k3, binding);
            if (sourceModule) {
              if (!sourceModule.sourceModule)
                return "continue";
              var moduleName = resolveImportPath(sourcePath, sourceModule.sourceModule), isOnWhitelist = whitelist.some(function(test) {
                return moduleName.endsWith(test);
              });
              if (isOnWhitelist) {
                var src = importModule(moduleName);
                if (!src)
                  return console.info("    | \u26A0\uFE0F Missing file ".concat(moduleName, " via ").concat(sourcePath, " import ").concat(sourceModule.sourceModule, "?")), {
                    v: {}
                  };
                sourceModule.destructured ? sourceModule.imported && (ret[k3] = src[sourceModule.imported]) : ret[k3] = src;
              }
              return "continue";
            }
            var parent = binding.path.parent;
            if (!t.isVariableDeclaration(parent) || parent.kind !== "const")
              return "continue";
            var dec = parent.declarations.find(function(d) {
              return t.isIdentifier(d.id) && d.id.name === k3;
            });
            if (!dec || !dec.init)
              return "continue";
            if (typeof dec.id.start != "number" || typeof dec.id.end != "number")
              return console.error("dec.id.start/end is not a number"), "continue";
            if (!t.isIdentifier(dec.id))
              return console.error("dec is not an identifier"), "continue";
            var cacheKey = "".concat(dec.id.name, "_").concat(dec.id.start, "-").concat(dec.id.end);
            if (Object.hasOwnProperty.call(bindingCache, cacheKey) || Object.hasOwnProperty.call(bindingCache, cacheKey))
              return ret[k3] = bindingCache[cacheKey], "continue";
            try {
              return ret[k3] = (0, import_evaluateAstNode.evaluateAstNode)(dec.init, void 0, shouldPrintDebug), bindingCache[cacheKey] = ret[k3], "continue";
            } catch {
            }
          }, whitelist = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : [], sourcePath = _arguments.length > 2 ? _arguments[2] : void 0, bindingCache = _arguments.length > 3 ? _arguments[3] : void 0, shouldPrintDebug = _arguments.length > 4 ? _arguments[4] : void 0, bindings = scope.getAllBindings(), ret = {}, program = scope.getProgramParent().block, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0, _state.label = 1;
        case 1:
          _state.trys.push([
            1,
            6,
            7,
            8
          ]), _loop1 = function() {
            var node, importPath, moduleName, isOnWhitelist, src, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step1, specifier, val, err1, _process_env_DEBUG;
            return _ts_generator(this, function(_state2) {
              switch (_state2.label) {
                case 0:
                  if (node = _step.value, !t.isImportDeclaration(node)) return [
                    3,
                    4
                  ];
                  if (importPath = node.source.value, !node.specifiers.length) return [
                    2,
                    "continue"
                  ];
                  if (!isLocalImport(importPath))
                    return [
                      2,
                      "continue"
                    ];
                  if (moduleName = resolveImportPath(sourcePath, importPath), isOnWhitelist = whitelist.some(function(test) {
                    return moduleName.endsWith(test);
                  }), !isOnWhitelist) return [
                    2,
                    "continue"
                  ];
                  _state2.label = 1;
                case 1:
                  return _state2.trys.push([
                    1,
                    3,
                    ,
                    4
                  ]), [
                    4,
                    importModule(moduleName)
                  ];
                case 2:
                  if (src = _state2.sent(), !src) return [
                    2,
                    "continue"
                  ];
                  _iteratorNormalCompletion2 = !0, _didIteratorError2 = !1, _iteratorError2 = void 0;
                  try {
                    for (_iterator2 = node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step1 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0)
                      specifier = _step1.value, t.isImportSpecifier(specifier) && t.isIdentifier(specifier.imported) && typeof src[specifier.imported.name] < "u" && (val = src[specifier.local.name], ret[specifier.local.name] = val);
                  } catch (err2) {
                    _didIteratorError2 = !0, _iteratorError2 = err2;
                  } finally {
                    try {
                      !_iteratorNormalCompletion2 && _iterator2.return != null && _iterator2.return();
                    } finally {
                      if (_didIteratorError2)
                        throw _iteratorError2;
                    }
                  }
                  return [
                    3,
                    4
                  ];
                case 3:
                  return err1 = _state2.sent(), shouldPrintDebug ? console.warn("    | Skipping partial evaluation of constant file: ".concat(moduleName, " (DEBUG=tamagui for more)")) : !((_process_env_DEBUG = process.env.DEBUG) === null || _process_env_DEBUG === void 0) && _process_env_DEBUG.startsWith("tamagui") && console.info("Error in partial evaluation", err1.message, err1.stack), [
                    3,
                    4
                  ];
                case 4:
                  return [
                    2
                  ];
              }
            });
          }, _iterator = program.body[Symbol.iterator](), _state.label = 2;
        case 2:
          return (_iteratorNormalCompletion = (_step = _iterator.next()).done) ? [
            3,
            5
          ] : [
            5,
            _ts_values(_loop1())
          ];
        case 3:
          _state.sent(), _state.label = 4;
        case 4:
          return _iteratorNormalCompletion = !0, [
            3,
            2
          ];
        case 5:
          return [
            3,
            8
          ];
        case 6:
          return err = _state.sent(), _didIteratorError = !0, _iteratorError = err, [
            3,
            8
          ];
        case 7:
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError)
              throw _iteratorError;
          }
          return [
            7
          ];
        case 8:
          if (!bindingCache)
            throw new Error("BindingCache is a required param");
          for (var k2 in bindings)
            if (_ret = _loop(k2), _type_of(_ret) === "object") return [
              2,
              _ret.v
            ];
          return [
            2,
            ret
          ];
      }
    });
  }), _getStaticBindingsForScope.apply(this, arguments);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cleanupBeforeExit,
  getStaticBindingsForScope
});
//# sourceMappingURL=getStaticBindingsForScope.js.map
