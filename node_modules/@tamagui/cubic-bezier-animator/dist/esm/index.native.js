import { bezier } from "./cubicBezier";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function animate(param) {
  var start = null, easing = param.cubicBezier ? bezier.apply(void 0, _to_consumable_array(param.cubicBezier)) : function(v) {
    return v;
  }, _param_from = param.from, fromX = _param_from.x, fromY = _param_from.y, fromScaleX = _param_from.scaleX, fromScaleY = _param_from.scaleY, _param_to = param.to, toX = _param_to.x, toY = _param_to.y, toScaleX = _param_to.scaleX, toScaleY = _param_to.scaleY;
  function frame(timestamp) {
    start || (start = timestamp);
    var progress = timestamp - start, x = toX !== void 0 ? fromX + (toX - fromX) * easing(progress / param.duration) : void 0, y = toY !== void 0 ? fromY + (toY - fromY) * easing(progress / param.duration) : void 0, scaleX = toScaleX !== void 0 ? fromScaleX + (toScaleX - fromScaleX) * easing(progress / param.duration) : void 0, scaleY = toScaleY !== void 0 ? fromScaleY + (toScaleY - fromScaleY) * easing(progress / param.duration) : void 0;
    param.onUpdate({
      x,
      y,
      scaleX,
      scaleY
    }), progress < param.duration && requestAnimationFrame(frame);
  }
  requestAnimationFrame(frame);
}
export {
  animate
};
//# sourceMappingURL=index.js.map
