"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Popper_exports = {};
__export(Popper_exports, {
  Popper: () => Popper,
  PopperAnchor: () => PopperAnchor,
  PopperArrow: () => PopperArrow,
  PopperContent: () => PopperContent,
  PopperContentFrame: () => PopperContentFrame,
  PopperContext: () => PopperContext,
  PopperProvider: () => PopperProvider,
  setupPopper: () => setupPopper,
  usePopperContext: () => usePopperContext
});
module.exports = __toCommonJS(Popper_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_compose_refs = require("@tamagui/compose-refs"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_floating = require("@tamagui/floating"), import_get_token = require("@tamagui/get-token"), import_stacks = require("@tamagui/stacks"), React = __toESM(require("react")), import_react_native = require("react-native");
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var PopperContext = (0, import_core.createStyledContext)({}), usePopperContext = PopperContext.useStyledContext, PopperProvider = PopperContext.Provider, checkFloating = {
  name: "checkFloating",
  fn: function(data) {
    return {
      data: {
        hasFloating: !!data.rects.floating.width
      }
    };
  }
}, setupOptions = {};
function setupPopper(options) {
  Object.assign(setupOptions, options);
}
function Popper(props) {
  var _middlewareData_checkFloating, children = props.children, size = props.size, _props_strategy = props.strategy, strategy = _props_strategy === void 0 ? "absolute" : _props_strategy, _props_placement = props.placement, placement = _props_placement === void 0 ? "bottom" : _props_placement, stayInFrame = props.stayInFrame, allowFlip = props.allowFlip, offset = props.offset, disableRTL = props.disableRTL, __scopePopper = props.__scopePopper, isMounted = (0, import_core.useDidFinishSSR)(), _React_useState = _sliced_to_array(React.useState(null), 2), arrowEl = _React_useState[0], setArrow = _React_useState[1], _React_useState1 = _sliced_to_array(React.useState(0), 2), arrowSize = _React_useState1[0], setArrowSize = _React_useState1[1], offsetOptions = offset ?? arrowSize, floating = (0, import_floating.useFloating)({
    strategy,
    placement,
    sameScrollView: !1,
    // this only takes effect on native
    platform: disableRTL ?? setupOptions.disableRTL ? _object_spread_props(_object_spread({}, import_floating.platform), {
      isRTL: function(element) {
        return !1;
      }
    }) : import_floating.platform,
    middleware: [
      stayInFrame ? (0, import_floating.shift)(typeof stayInFrame == "boolean" ? {} : stayInFrame) : null,
      allowFlip ? (0, import_floating.flip)(typeof allowFlip == "boolean" ? {} : allowFlip) : null,
      arrowEl ? (0, import_floating.arrow)({
        element: arrowEl
      }) : null,
      typeof offsetOptions < "u" ? (0, import_floating.offset)(offsetOptions) : null,
      checkFloating
    ].filter(Boolean)
  }), refs = floating.refs, middlewareData = floating.middlewareData, open = floating.open, dimensions = (0, import_react_native.useWindowDimensions)(), _React_useState2 = _sliced_to_array(React.useState(!1), 2), keyboardOpen = _React_useState2[0], setKeyboardOpen = _React_useState2[1];
  React.useEffect(function() {
    var showSubscription = import_react_native.Keyboard.addListener("keyboardDidShow", function() {
      React.startTransition(function() {
        setKeyboardOpen(!0);
      });
    }), hideSubscription = import_react_native.Keyboard.addListener("keyboardDidHide", function() {
      React.startTransition(function() {
        setKeyboardOpen(!1);
      });
    });
    return function() {
      showSubscription.remove(), hideSubscription.remove();
    };
  }, []), (0, import_constants.useIsomorphicLayoutEffect)(function() {
    floating.update();
  }, [
    dimensions,
    keyboardOpen
  ]);
  var popperContext = _object_spread({
    size,
    arrowRef: setArrow,
    arrowStyle: middlewareData.arrow,
    onArrowSize: setArrowSize,
    isMounted,
    scope: __scopePopper,
    hasFloating: (_middlewareData_checkFloating = middlewareData.checkFloating) === null || _middlewareData_checkFloating === void 0 ? void 0 : _middlewareData_checkFloating.hasFloating
  }, floating);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperProvider, _object_spread_props(_object_spread({}, popperContext), {
    children
  }));
}
var PopperAnchor = import_stacks.YStack.extractable(/* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var virtualRef = props.virtualRef, __scopePopper = props.__scopePopper, anchorProps = _object_without_properties(props, [
    "virtualRef",
    "__scopePopper"
  ]), _usePopperContext = usePopperContext(__scopePopper), getReferenceProps = _usePopperContext.getReferenceProps, refs = _usePopperContext.refs, ref = React.useRef(null), composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, ref, refs.setReference);
  if (React.useEffect(function() {
    virtualRef && refs.setReference(virtualRef.current);
  }, [
    virtualRef
  ]), virtualRef)
    return null;
  var stackProps = _object_spread({
    ref: composedRefs
  }, anchorProps);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.View, _object_spread({}, getReferenceProps ? getReferenceProps(stackProps) : stackProps));
})), PopperContentFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: !0
      }
    },
    size: {
      "...size": function(val, param) {
        var tokens = param.tokens;
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperContent = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopePopper = props.__scopePopper, enableAnimationForPositionChange = props.enableAnimationForPositionChange, rest = _object_without_properties(props, [
    "__scopePopper",
    "enableAnimationForPositionChange"
  ]), _usePopperContext = usePopperContext(__scopePopper), strategy = _usePopperContext.strategy, placement = _usePopperContext.placement, refs = _usePopperContext.refs, x = _usePopperContext.x, y = _usePopperContext.y, getFloatingProps = _usePopperContext.getFloatingProps, size = _usePopperContext.size, isMounted = _usePopperContext.isMounted, update = _usePopperContext.update, floatingStyles = _usePopperContext.floatingStyles, hasFloating = _usePopperContext.hasFloating, contentRefs = (0, import_compose_refs.useComposedRefs)(refs.setFloating, forwardedRef), finalHasFloatingValue = !1;
  if (import_constants.isAndroid) {
    var initialRender = React.useRef(!0), finalHasFloating = React.useRef(!1);
    hasFloating === !1 && (initialRender.current = !1), initialRender.current || (finalHasFloating.current = hasFloating), finalHasFloatingValue = finalHasFloating.current;
  }
  var contents = React.useMemo(function() {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperContentFrame, _object_spread({
      "data-placement": placement,
      "data-strategy": strategy,
      contain: "layout",
      size
    }, rest), "popper-content-frame");
  }, [
    placement,
    strategy,
    props
  ]), _React_useState = _sliced_to_array(React.useState(!0), 2), needsMeasure = _React_useState[0], setNeedsMeasure = _React_useState[1];
  React.useEffect(function() {
    (x || y) && setNeedsMeasure(!1);
  }, [
    x,
    y
  ]), (0, import_constants.useIsomorphicLayoutEffect)(function() {
    isMounted && update();
  }, [
    isMounted
  ]);
  var show = !0;
  if (import_constants.isAndroid) {
    var _React_useState1 = _sliced_to_array(React.useState(!1), 2), show_ = _React_useState1[0], setShow = _React_useState1[1];
    show = show_, React.useEffect(function() {
      finalHasFloatingValue && setShow(!0);
    }, [
      finalHasFloatingValue,
      x,
      y
    ]);
  }
  if (!isMounted)
    return null;
  var frameProps = _object_spread({
    ref: contentRefs,
    x: x || 0,
    y: y || 0,
    top: 0,
    left: 0,
    position: strategy,
    opacity: show ? 1 : 0
  }, enableAnimationForPositionChange && {
    // apply animation but disable it on initial render to avoid animating from 0 to the first position
    animation: rest.animation,
    animateOnly: needsMeasure ? [
      "none"
    ] : rest.animateOnly,
    animatePresence: !1
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.Stack, _object_spread_props(_object_spread({}, getFloatingProps ? getFloatingProps(frameProps) : frameProps), {
    children: contents
  }));
}), PopperArrowFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), PopperArrowOuterFrame = (0, import_core.styled)(import_stacks.YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: 1e6,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
}, PopperArrow = PopperArrowFrame.styleable(function(propsIn, forwardedRef) {
  var _context_arrowStyle, _context_arrowStyle1, __scopePopper = propsIn.__scopePopper, rest = _object_without_properties(propsIn, [
    "__scopePopper"
  ]), props = (0, import_core.useProps)(rest), offset = props.offset, sizeProp = props.size, _props_borderWidth = props.borderWidth, borderWidth = _props_borderWidth === void 0 ? 0 : _props_borderWidth, arrowProps = _object_without_properties(props, [
    "offset",
    "size",
    "borderWidth"
  ]), context = usePopperContext(__scopePopper), sizeVal = typeof sizeProp == "number" ? sizeProp : (0, import_core.getVariableValue)((0, import_get_token.getSpace)(sizeProp ?? context.size, {
    shift: -2,
    bounds: [
      2
    ]
  })), size = Math.max(0, +sizeVal), placement = context.placement, refs = (0, import_compose_refs.useComposedRefs)(context.arrowRef, forwardedRef), x = ((_context_arrowStyle = context.arrowStyle) === null || _context_arrowStyle === void 0 ? void 0 : _context_arrowStyle.x) || 0, y = ((_context_arrowStyle1 = context.arrowStyle) === null || _context_arrowStyle1 === void 0 ? void 0 : _context_arrowStyle1.y) || 0, primaryPlacement = placement ? placement.split("-")[0] : "top", arrowStyle = {
    x,
    y,
    width: size,
    height: size
  }, innerArrowStyle = {}, isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
  if (primaryPlacement) {
    arrowStyle[isVertical ? "width" : "height"] = size * 2;
    var oppSide = opposites[primaryPlacement];
    oppSide && (arrowStyle[oppSide] = -size, innerArrowStyle[oppSide] = size / 2), (oppSide === "top" || oppSide === "bottom") && (arrowStyle.left = 0), (oppSide === "left" || oppSide === "right") && (arrowStyle.top = 0), (0, import_constants.useIsomorphicLayoutEffect)(function() {
      var _context_onArrowSize;
      (_context_onArrowSize = context.onArrowSize) === null || _context_onArrowSize === void 0 || _context_onArrowSize.call(context, size);
    }, [
      size,
      context.onArrowSize
    ]);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperArrowOuterFrame, _object_spread_props(_object_spread({
    ref: refs
  }, arrowStyle), {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PopperArrowFrame, _object_spread(_object_spread_props(_object_spread({
      width: size,
      height: size
    }, arrowProps, innerArrowStyle), {
      rotate: "45deg"
    }), primaryPlacement === "bottom" && {
      borderLeftWidth: borderWidth,
      borderTopWidth: borderWidth
    }, primaryPlacement === "top" && {
      borderBottomWidth: borderWidth,
      borderRightWidth: borderWidth
    }, primaryPlacement === "right" && {
      borderLeftWidth: borderWidth,
      borderBottomWidth: borderWidth
    }, primaryPlacement === "left" && {
      borderTopWidth: borderWidth,
      borderRightWidth: borderWidth
    }))
  }));
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperContext,
  PopperProvider,
  setupPopper,
  usePopperContext
});
//# sourceMappingURL=Popper.js.map
