"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var Collapsible_exports = {};
__export(Collapsible_exports, {
  Collapsible: () => Collapsible,
  CollapsibleContent: () => CollapsibleContent,
  CollapsibleContentFrame: () => CollapsibleContentFrame,
  CollapsibleTrigger: () => CollapsibleTrigger,
  CollapsibleTriggerFrame: () => CollapsibleTriggerFrame
});
module.exports = __toCommonJS(Collapsible_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_animate_presence = require("@tamagui/animate-presence"), import_helpers = require("@tamagui/helpers"), import_use_controllable_state = require("@tamagui/use-controllable-state"), import_web = require("@tamagui/web"), React = __toESM(require("react"));
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var COLLAPSIBLE_NAME = "Collapsible", _createStyledContext = (0, import_web.createStyledContext)(), CollapsibleProvider = _createStyledContext.Provider, useCollapsibleContext = _createStyledContext.useStyledContext, _Collapsible = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var __scopeCollapsible = props.__scopeCollapsible, openProp = props.open, defaultOpen = props.defaultOpen, disabled = props.disabled, onOpenChange = props.onOpenChange, collapsibleProps = _object_without_properties(props, [
    "__scopeCollapsible",
    "open",
    "defaultOpen",
    "disabled",
    "onOpenChange"
  ]), _useControllableState = _sliced_to_array((0, import_use_controllable_state.useControllableState)({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  }), 2), tmp = _useControllableState[0], open = tmp === void 0 ? !1 : tmp, setOpen = _useControllableState[1];
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapsibleProvider, {
    scope: __scopeCollapsible,
    disabled,
    contentId: React.useId(),
    open,
    onOpenToggle: React.useCallback(function() {
      return setOpen(function(prevOpen) {
        return !prevOpen;
      });
    }, [
      setOpen
    ]),
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_web.Stack, _object_spread_props(_object_spread({
      "data-state": getState(open),
      "data-disabled": disabled ? "" : void 0
    }, collapsibleProps), {
      ref: forwardedRef
    }))
  });
});
_Collapsible.displayName = COLLAPSIBLE_NAME;
var TRIGGER_NAME = "CollapsibleTrigger", CollapsibleTriggerFrame = (0, import_web.styled)(import_web.Stack, {
  name: TRIGGER_NAME,
  tag: "button"
}), CollapsibleTrigger = CollapsibleTriggerFrame.styleable(function(props, forwardedRef) {
  var __scopeCollapsible = props.__scopeCollapsible, children = props.children, triggerProps = _object_without_properties(props, [
    "__scopeCollapsible",
    "children"
  ]), context = useCollapsibleContext(__scopeCollapsible);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapsibleTriggerFrame, _object_spread_props(_object_spread({
    "aria-controls": context.contentId,
    "aria-expanded": context.open || !1,
    "data-state": getState(context.open),
    "data-disabled": context.disabled ? "" : void 0,
    disabled: context.disabled
  }, triggerProps), {
    ref: forwardedRef,
    onPress: (0, import_helpers.composeEventHandlers)(props.onPress, context.onOpenToggle),
    children: typeof children == "function" ? children({
      open: context.open
    }) : children
  }));
});
CollapsibleTrigger.displayName = TRIGGER_NAME;
var CONTENT_NAME = "CollapsibleContent", CollapsibleContentFrame = (0, import_web.styled)(import_web.Stack, {
  name: CONTENT_NAME
}), CollapsibleContent = CollapsibleContentFrame.styleable(function(props, forwardedRef) {
  var forceMount = props.forceMount, children = props.children, __scopeCollapsible = props.__scopeCollapsible, contentProps = _object_without_properties(props, [
    "forceMount",
    "children",
    "__scopeCollapsible"
  ]), context = useCollapsibleContext(__scopeCollapsible);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_animate_presence.AnimatePresence, _object_spread_props(_object_spread({}, contentProps), {
    children: forceMount || context.open ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CollapsibleContentFrame, _object_spread_props(_object_spread({
      ref: forwardedRef
    }, contentProps), {
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_animate_presence.ResetPresence, {
        children
      })
    })) : null
  }));
});
CollapsibleContent.displayName = CONTENT_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var Collapsible = (0, import_helpers.withStaticProperties)(_Collapsible, {
  Trigger: CollapsibleTrigger,
  Content: CollapsibleContent
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Collapsible,
  CollapsibleContent,
  CollapsibleContentFrame,
  CollapsibleTrigger,
  CollapsibleTriggerFrame
});
//# sourceMappingURL=Collapsible.js.map
