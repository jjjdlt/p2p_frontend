{"version":3,"file":"WidgetApi.js","names":["_events","require","_WidgetApiDirection","_ApiVersion","_PostmessageTransport","_WidgetApiAction","_GetOpenIDAction","_WidgetType","_ModalWidgetActions","_WidgetEventCapability","_Symbols","_typeof","obj","Symbol","iterator","constructor","prototype","_regeneratorRuntime","exports","Op","Object","hasOwn","hasOwnProperty","defineProperty","key","desc","value","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_inherits","subClass","superClass","_setPrototypeOf","o","p","bind","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","NewTarget","Reflect","construct","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","_defineProperty","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","_awaitAsyncGenerator","_OverloadYield","_wrapAsyncGenerator","_AsyncGenerator","front","back","resume","overloaded","v","nextKey","k","settle","request","kind","WidgetApi","_EventEmitter","_super","_this2","widgetId","clientOrigin","window","parent","transport","PostmessageTransport","WidgetApiDirection","FromWidget","targetOrigin","on","handleMessage","hasCapability","capability","Array","isArray","approvedCapabilities","includes","requestedCapabilities","requestCapability","capabilitiesFinished","supportsMSC2974Renegotiate","requestCapabilities","capabilities","_this3","cap","requestCapabilityForRoomTimeline","roomId","concat","requestCapabilityToSendState","eventType","stateKey","WidgetEventCapability","forStateEvent","EventDirection","Send","raw","requestCapabilityToReceiveState","Receive","requestCapabilityToSendToDevice","forToDeviceEvent","requestCapabilityToReceiveToDevice","requestCapabilityToSendEvent","forRoomEvent","requestCapabilityToReceiveEvent","requestCapabilityToSendMessage","msgtype","forRoomMessageEvent","requestCapabilityToReceiveMessage","requestCapabilityToReceiveRoomAccountData","forRoomAccountData","requestOpenIDConnectToken","_this4","sendComplete","WidgetApiFromWidgetAction","GetOpenIDCredentials","response","rdata","OpenIDRequestState","Allowed","Blocked","PendingUserConfirmation","handlerFn","ev","preventDefault","detail","data","original_request_id","requestId","reply","message","off","WidgetApiToWidgetAction","OpenIDCredentials","updateRequestedCapabilities","send","MSC2974RenegotiateCapabilities","sendContentLoaded","ContentLoaded","sendSticker","sticker","SendSticker","setAlwaysOnScreen","UpdateAlwaysOnScreen","success","openModalWidget","url","buttons","MatrixWidgetType","Custom","OpenModalWidget","closeModalWidget","CloseModalWidget","sendRoomEvent","content","SendEvent","room_id","sendStateEvent","state_key","sendToDevice","encrypted","contentMap","SendToDevice","messages","readRoomAccountData","roomIds","Symbols","AnyRoom","room_ids","BeeperReadRoomAccountData","r","events","readRoomEvents","limit","since","MSC2876ReadEvents","_readEventRelations","_callee","eventId","relationType","from","to","direction","versions","_callee$","_context","getClientVersions","UnstableApiVersion","MSC3869","event_id","rel_type","event_type","MSC3869ReadRelations","readEventRelations","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","readStateEvents","setModalButtonEnabled","buttonId","isEnabled","BuiltInModalButtonID","Close","SetModalButtonEnabled","button","enabled","navigateTo","uri","startsWith","MSC2931Navigate","getTurnServers","_this","_callee3","setTurnServer","onUpdateTurnServers","_callee3$","_context3","_ref","_callee2","_callee2$","_context2","_x9","UpdateTurnServers","turnServerWatchers","WatchTurnServers","t0","UnwatchTurnServers","_searchUserDirectory","_callee4","searchTerm","_callee4$","_context4","MSC3973","search_term","MSC3973UserDirectorySearch","searchUserDirectory","_x10","_x11","_getMediaConfig","_callee5","_callee5$","_context5","MSC4039","MSC4039GetMediaConfigAction","getMediaConfig","_uploadFile","_callee6","file","_callee6$","_context6","MSC4039UploadFileAction","uploadFile","_x12","start","_this5","MSC2974","actionEv","CustomEvent","action","cancelable","emit","defaultPrevented","SupportedApiVersions","replyVersions","Capabilities","handleCapabilities","UpdateVisibility","NotifyCapabilities","supported_versions","CurrentApiVersions","_this6","cachedClientVersions","console","warn","_this7","MSC2871","once","approved","EventEmitter"],"sources":["../src/WidgetApi.ts"],"sourcesContent":["/*\n * Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\nimport { Capability } from \"./interfaces/Capabilities\";\nimport { IWidgetApiRequest, IWidgetApiRequestEmptyData } from \"./interfaces/IWidgetApiRequest\";\nimport { IWidgetApiAcknowledgeResponseData } from \"./interfaces/IWidgetApiResponse\";\nimport { WidgetApiDirection } from \"./interfaces/WidgetApiDirection\";\nimport {\n    ISupportedVersionsActionRequest,\n    ISupportedVersionsActionResponseData,\n} from \"./interfaces/SupportedVersionsAction\";\nimport { ApiVersion, CurrentApiVersions, UnstableApiVersion } from \"./interfaces/ApiVersion\";\nimport {\n    ICapabilitiesActionRequest,\n    ICapabilitiesActionResponseData,\n    INotifyCapabilitiesActionRequest,\n    IRenegotiateCapabilitiesRequestData,\n} from \"./interfaces/CapabilitiesAction\";\nimport { ITransport } from \"./transport/ITransport\";\nimport { PostmessageTransport } from \"./transport/PostmessageTransport\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./interfaces/WidgetApiAction\";\nimport { IWidgetApiErrorResponseData } from \"./interfaces/IWidgetApiErrorResponse\";\nimport { IStickerActionRequestData } from \"./interfaces/StickerAction\";\nimport { IStickyActionRequestData, IStickyActionResponseData } from \"./interfaces/StickyAction\";\nimport {\n    IGetOpenIDActionRequestData,\n    IGetOpenIDActionResponse,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n} from \"./interfaces/GetOpenIDAction\";\nimport { IOpenIDCredentialsActionRequest } from \"./interfaces/OpenIDCredentialsAction\";\nimport { MatrixWidgetType, WidgetType } from \"./interfaces/WidgetType\";\nimport {\n    BuiltInModalButtonID,\n    IModalWidgetCreateData,\n    IModalWidgetOpenRequestData,\n    IModalWidgetOpenRequestDataButton,\n    IModalWidgetReturnData,\n    ModalButtonID,\n} from \"./interfaces/ModalWidgetActions\";\nimport { ISetModalButtonEnabledActionRequestData } from \"./interfaces/SetModalButtonEnabledAction\";\nimport { ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData } from \"./interfaces/SendEventAction\";\nimport {\n    ISendToDeviceFromWidgetRequestData,\n    ISendToDeviceFromWidgetResponseData,\n} from \"./interfaces/SendToDeviceAction\";\nimport { EventDirection, WidgetEventCapability } from \"./models/WidgetEventCapability\";\nimport { INavigateActionRequestData } from \"./interfaces/NavigateAction\";\nimport { IReadEventFromWidgetRequestData, IReadEventFromWidgetResponseData } from \"./interfaces/ReadEventAction\";\nimport {\n    IReadRoomAccountDataFromWidgetRequestData,\n    IReadRoomAccountDataFromWidgetResponseData,\n} from \"./interfaces/ReadRoomAccountDataAction\";\nimport { IRoomEvent } from \"./interfaces/IRoomEvent\";\nimport {IRoomAccountData} from \"./interfaces/IRoomAccountData\";\nimport { ITurnServer, IUpdateTurnServersRequest } from \"./interfaces/TurnServerActions\";\nimport { Symbols } from \"./Symbols\";\nimport {\n    IReadRelationsFromWidgetRequestData,\n    IReadRelationsFromWidgetResponseData,\n} from \"./interfaces/ReadRelationsAction\";\nimport {\n    IUserDirectorySearchFromWidgetRequestData,\n    IUserDirectorySearchFromWidgetResponseData,\n} from \"./interfaces/UserDirectorySearchAction\";\nimport {\n    IGetMediaConfigActionFromWidgetRequestData,\n    IGetMediaConfigActionFromWidgetResponseData,\n} from \"./interfaces/GetMediaConfigAction\";\nimport {\n    IUploadFileActionFromWidgetRequestData,\n    IUploadFileActionFromWidgetResponseData,\n} from \"./interfaces/UploadFileAction\";\n\n/**\n * API handler for widgets. This raises events for each action\n * received as `action:${action}` (eg: \"action:screenshot\").\n * Default handling can be prevented by using preventDefault()\n * on the raised event. The default handling varies for each\n * action: ones which the SDK can handle safely are acknowledged\n * appropriately and ones which are unhandled (custom or require\n * the widget to do something) are rejected with an error.\n *\n * Events which are preventDefault()ed must reply using the\n * transport. The events raised will have a detail of an\n * IWidgetApiRequest interface.\n *\n * When the WidgetApi is ready to start sending requests, it will\n * raise a \"ready\" CustomEvent. After the ready event fires, actions\n * can be sent and the transport will be ready.\n */\nexport class WidgetApi extends EventEmitter {\n    public readonly transport: ITransport;\n\n    private capabilitiesFinished = false;\n    private supportsMSC2974Renegotiate = false;\n    private requestedCapabilities: Capability[] = [];\n    private approvedCapabilities?: Capability[];\n    private cachedClientVersions?: ApiVersion[];\n    private turnServerWatchers = 0;\n\n    /**\n     * Creates a new API handler for the given widget.\n     * @param {string} widgetId The widget ID to listen for. If not supplied then\n     * the API will use the widget ID from the first valid request it receives.\n     * @param {string} clientOrigin The origin of the client, or null if not known.\n     */\n    public constructor(widgetId: string | null = null, private clientOrigin: string | null = null) {\n        super();\n        if (!window.parent) {\n            throw new Error(\"No parent window. This widget doesn't appear to be embedded properly.\");\n        }\n        this.transport = new PostmessageTransport(\n            WidgetApiDirection.FromWidget,\n            widgetId,\n            window.parent,\n            window,\n        );\n        this.transport.targetOrigin = clientOrigin;\n        this.transport.on(\"message\", this.handleMessage.bind(this));\n    }\n\n    /**\n     * Determines if the widget was granted a particular capability. Note that on\n     * clients where the capabilities are not fed back to the widget this function\n     * will rely on requested capabilities instead.\n     * @param {Capability} capability The capability to check for approval of.\n     * @returns {boolean} True if the widget has approval for the given capability.\n     */\n    public hasCapability(capability: Capability): boolean {\n        if (Array.isArray(this.approvedCapabilities)) {\n            return this.approvedCapabilities.includes(capability);\n        }\n        return this.requestedCapabilities.includes(capability);\n    }\n\n    /**\n     * Request a capability from the client. It is not guaranteed to be allowed,\n     * but will be asked for.\n     * @param {Capability} capability The capability to request.\n     * @throws Throws if the capabilities negotiation has already started and the\n     * widget is unable to request additional capabilities.\n     */\n    public requestCapability(capability: Capability) {\n        if (this.capabilitiesFinished && !this.supportsMSC2974Renegotiate) {\n            throw new Error(\"Capabilities have already been negotiated\");\n        }\n\n        this.requestedCapabilities.push(capability);\n    }\n\n    /**\n     * Request capabilities from the client. They are not guaranteed to be allowed,\n     * but will be asked for if the negotiation has not already happened.\n     * @param {Capability[]} capabilities The capabilities to request.\n     * @throws Throws if the capabilities negotiation has already started.\n     */\n    public requestCapabilities(capabilities: Capability[]) {\n        capabilities.forEach(cap => this.requestCapability(cap));\n    }\n\n    /**\n     * Requests the capability to interact with rooms other than the user's currently\n     * viewed room. Applies to event receiving and sending.\n     * @param {string | Symbols.AnyRoom} roomId The room ID, or `Symbols.AnyRoom` to\n     * denote all known rooms.\n     */\n    public requestCapabilityForRoomTimeline(roomId: string | Symbols.AnyRoom) {\n        this.requestCapability(`org.matrix.msc2762.timeline:${roomId}`);\n    }\n\n    /**\n     * Requests the capability to send a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToSendState(eventType: string, stateKey?: string) {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Send, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToReceiveState(eventType: string, stateKey?: string) {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Receive, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to send a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendToDevice(eventType: string) {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveToDevice(eventType: string) {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendEvent(eventType: string) {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveEvent(eventType: string) {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToSendMessage(msgtype?: string) {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Send, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToReceiveMessage(msgtype?: string) {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Receive, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given item in room account data. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     */\n    public requestCapabilityToReceiveRoomAccountData(eventType: string) {\n        this.requestCapability(WidgetEventCapability.forRoomAccountData(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests an OpenID Connect token from the client for the currently logged in\n     * user. This token can be validated server-side with the federation API. Note\n     * that the widget is responsible for validating the token and caching any results\n     * it needs.\n     * @returns {Promise<IOpenIDCredentials>} Resolves to a token for verification.\n     * @throws Throws if the user rejected the request or the request failed.\n     */\n    public requestOpenIDConnectToken(): Promise<IOpenIDCredentials> {\n        return new Promise<IOpenIDCredentials>((resolve, reject) => {\n            this.transport.sendComplete<IGetOpenIDActionRequestData, IGetOpenIDActionResponse>(\n                WidgetApiFromWidgetAction.GetOpenIDCredentials, {},\n            ).then(response => {\n                const rdata = response.response;\n                if (rdata.state === OpenIDRequestState.Allowed) {\n                    resolve(rdata);\n                } else if (rdata.state === OpenIDRequestState.Blocked) {\n                    reject(new Error(\"User declined to verify their identity\"));\n                } else if (rdata.state === OpenIDRequestState.PendingUserConfirmation) {\n                    const handlerFn = (ev: CustomEvent<IOpenIDCredentialsActionRequest>) => {\n                        ev.preventDefault();\n                        const request = ev.detail;\n                        if (request.data.original_request_id !== response.requestId) return;\n                        if (request.data.state === OpenIDRequestState.Allowed) {\n                            resolve(request.data);\n                            this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                        } else if (request.data.state === OpenIDRequestState.Blocked) {\n                            reject(new Error(\"User declined to verify their identity\"));\n                            this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                        } else {\n                            reject(new Error(\"Invalid state on reply: \" + rdata.state));\n                            this.transport.reply(request, <IWidgetApiErrorResponseData>{\n                                error: {\n                                    message: \"Invalid state\",\n                                },\n                            });\n                        }\n                        this.off(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                    };\n                    this.on(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                } else {\n                    reject(new Error(\"Invalid state: \" + rdata.state));\n                }\n            }).catch(reject);\n        });\n    }\n\n    /**\n     * Asks the client for additional capabilities. Capabilities can be queued for this\n     * request with the requestCapability() functions.\n     * @returns {Promise<void>} Resolves when complete. Note that the promise resolves when\n     * the capabilities request has gone through, not when the capabilities are approved/denied.\n     * Use the WidgetApiToWidgetAction.NotifyCapabilities action to detect changes.\n     */\n    public updateRequestedCapabilities(): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.MSC2974RenegotiateCapabilities,\n            <IRenegotiateCapabilitiesRequestData>{\n                capabilities: this.requestedCapabilities,\n            }).then();\n    }\n\n    /**\n     * Tell the client that the content has been loaded.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendContentLoaded(): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.ContentLoaded, <IWidgetApiRequestEmptyData>{}).then();\n    }\n\n    /**\n     * Sends a sticker to the client.\n     * @param {IStickerActionRequestData} sticker The sticker to send.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendSticker(sticker: IStickerActionRequestData): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.SendSticker, sticker).then();\n    }\n\n    /**\n     * Asks the client to set the always-on-screen status for this widget.\n     * @param {boolean} value The new state to request.\n     * @returns {Promise<boolean>} Resolve with true if the client was able to fulfill\n     * the request, resolves to false otherwise. Rejects if an error occurred.\n     */\n    public setAlwaysOnScreen(value: boolean): Promise<boolean> {\n        return this.transport.send<IStickyActionRequestData, IStickyActionResponseData>(\n            WidgetApiFromWidgetAction.UpdateAlwaysOnScreen, {value},\n        ).then(res => res.success);\n    }\n\n    /**\n     * Opens a modal widget.\n     * @param {string} url The URL to the modal widget.\n     * @param {string} name The name of the widget.\n     * @param {IModalWidgetOpenRequestDataButton[]} buttons The buttons to have on the widget.\n     * @param {IModalWidgetCreateData} data Data to supply to the modal widget.\n     * @param {WidgetType} type The type of modal widget.\n     * @returns {Promise<void>} Resolves when the modal widget has been opened.\n     */\n    public openModalWidget(\n        url: string,\n        name: string,\n        buttons: IModalWidgetOpenRequestDataButton[] = [],\n        data: IModalWidgetCreateData = {},\n        type: WidgetType = MatrixWidgetType.Custom,\n    ): Promise<void> {\n        return this.transport.send<IModalWidgetOpenRequestData>(\n            WidgetApiFromWidgetAction.OpenModalWidget, { type, url, name, buttons, data },\n        ).then();\n    }\n\n    /**\n     * Closes the modal widget. The widget's session will be terminated shortly after.\n     * @param {IModalWidgetReturnData} data Optional data to close the modal widget with.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public closeModalWidget(data: IModalWidgetReturnData = {}): Promise<void> {\n        return this.transport.send<IModalWidgetReturnData>(WidgetApiFromWidgetAction.CloseModalWidget, data).then();\n    }\n\n    public sendRoomEvent(\n        eventType: string,\n        content: unknown,\n        roomId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.transport.send<ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendEvent,\n            {type: eventType, content, room_id: roomId},\n        );\n    }\n\n    public sendStateEvent(\n        eventType: string,\n        stateKey: string,\n        content: unknown,\n        roomId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.transport.send<ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendEvent,\n            {type: eventType, content, state_key: stateKey, room_id: roomId},\n        );\n    }\n\n    /**\n     * Sends a to-device event.\n     * @param {string} eventType The type of events being sent.\n     * @param {boolean} encrypted Whether to encrypt the message contents.\n     * @param {Object} contentMap A map from user IDs to device IDs to message contents.\n     * @returns {Promise<ISendToDeviceFromWidgetResponseData>} Resolves when complete.\n     */\n    public sendToDevice(\n        eventType: string,\n        encrypted: boolean,\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\n    ): Promise<ISendToDeviceFromWidgetResponseData> {\n        return this.transport.send<ISendToDeviceFromWidgetRequestData, ISendToDeviceFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendToDevice,\n            {type: eventType, encrypted, messages: contentMap},\n        );\n    }\n\n    public readRoomAccountData(\n        eventType: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n    ): Promise<IRoomAccountData[]> {\n        const data: IReadEventFromWidgetRequestData = {type: eventType};\n\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport.send<\n            IReadRoomAccountDataFromWidgetRequestData,\n            IReadRoomAccountDataFromWidgetResponseData\n        >(\n            WidgetApiFromWidgetAction.BeeperReadRoomAccountData,\n            data,\n        ).then(r => r.events);\n    }\n\n    public readRoomEvents(\n        eventType: string,\n        limit?: number,\n        msgtype?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n        since?: string | undefined,\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = {type: eventType, msgtype: msgtype};\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        if (since) {\n            data.since = since;\n        }\n        return this.transport.send<IReadEventFromWidgetRequestData, IReadEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC2876ReadEvents,\n            data,\n        ).then(r => r.events);\n    }\n\n    /**\n     * Reads all related events given a known eventId.\n     * @param eventId The id of the parent event to be read.\n     * @param roomId The room to look within. When undefined, the user's currently\n     * viewed room.\n     * @param relationType The relationship type of child events to search for.\n     * When undefined, all relations are returned.\n     * @param eventType The event type of child events to search for. When undefined,\n     * all related events are returned.\n     * @param limit The maximum number of events to retrieve per room. If not\n     * supplied, the server will apply a default limit.\n     * @param from The pagination token to start returning results from, as\n     * received from a previous call. If not supplied, results start at the most\n     * recent topological event known to the server.\n     * @param to The pagination token to stop returning results at. If not\n     * supplied, results continue up to limit or until there are no more events.\n     * @param direction The direction to search for according to MSC3715.\n     * @returns Resolves to the room relations.\n     */\n    public async readEventRelations(\n        eventId: string,\n        roomId?: string,\n        relationType?: string,\n        eventType?: string,\n        limit?: number,\n        from?: string,\n        to?: string,\n        direction?: 'f' | 'b',\n    ): Promise<IReadRelationsFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3869)) {\n            throw new Error(\"The read_relations action is not supported by the client.\")\n        }\n\n        const data: IReadRelationsFromWidgetRequestData = {\n            event_id: eventId,\n            rel_type: relationType,\n            event_type: eventType,\n            room_id: roomId,\n            to,\n            from,\n            limit,\n            direction,\n        };\n\n        return this.transport.send<IReadRelationsFromWidgetRequestData, IReadRelationsFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC3869ReadRelations,\n            data,\n        )\n    }\n\n    public readStateEvents(\n        eventType: string,\n        limit?: number,\n        stateKey?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = {\n            type: eventType,\n            state_key: stateKey === undefined ? true : stateKey,\n        };\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport.send<IReadEventFromWidgetRequestData, IReadEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC2876ReadEvents,\n            data,\n        ).then(r => r.events);\n    }\n\n    /**\n     * Sets a button as disabled or enabled on the modal widget. Buttons are enabled by default.\n     * @param {ModalButtonID} buttonId The button ID to enable/disable.\n     * @param {boolean} isEnabled Whether or not the button is enabled.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the button cannot be disabled, or the client refuses to disable the button.\n     */\n    public setModalButtonEnabled(buttonId: ModalButtonID, isEnabled: boolean): Promise<void> {\n        if (buttonId === BuiltInModalButtonID.Close) {\n            throw new Error(\"The close button cannot be disabled\");\n        }\n        return this.transport.send<ISetModalButtonEnabledActionRequestData>(\n            WidgetApiFromWidgetAction.SetModalButtonEnabled, {button: buttonId, enabled: isEnabled},\n        ).then();\n    }\n\n    /**\n     * Attempts to navigate the client to the given URI. This can only be called with Matrix URIs\n     * (currently only matrix.to, but in future a Matrix URI scheme will be defined).\n     * @param {string} uri The URI to navigate to.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the URI is invalid or cannot be processed.\n     * @deprecated This currently relies on an unstable MSC (MSC2931).\n     */\n    public navigateTo(uri: string): Promise<void> {\n        if (!uri || !uri.startsWith(\"https://matrix.to/#\")) {\n            throw new Error(\"Invalid matrix.to URI\");\n        }\n\n        return this.transport.send<INavigateActionRequestData>(\n            WidgetApiFromWidgetAction.MSC2931Navigate, {uri},\n        ).then();\n    }\n\n    /**\n     * Starts watching for TURN servers, yielding an initial set of credentials as soon as possible,\n     * and thereafter yielding new credentials whenever the previous ones expire.\n     * @yields {ITurnServer} The TURN server URIs and credentials currently available to the widget.\n     */\n    public async* getTurnServers(): AsyncGenerator<ITurnServer> {\n        let setTurnServer: (server: ITurnServer) => void;\n\n        const onUpdateTurnServers = async (ev: CustomEvent<IUpdateTurnServersRequest>) => {\n            ev.preventDefault();\n            setTurnServer(ev.detail.data);\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(ev.detail, {});\n        };\n\n        // Start listening for updates before we even start watching, to catch\n        // TURN data that is sent immediately\n        this.on(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n        // Only send the 'watch' action if we aren't already watching\n        if (this.turnServerWatchers === 0) {\n            try {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.WatchTurnServers, {});\n            } catch (e) {\n                this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n                throw e;\n            }\n        }\n        this.turnServerWatchers++;\n\n        try {\n            // Watch for new data indefinitely (until this generator's return method is called)\n            while (true) {\n                yield await new Promise<ITurnServer>(resolve => setTurnServer = resolve);\n            }\n        } finally {\n            // The loop was broken by the caller - clean up\n            this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n            // Since sending the 'unwatch' action will end updates for all other\n            // consumers, only send it if we're the only consumer remaining\n            this.turnServerWatchers--;\n            if (this.turnServerWatchers === 0) {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.UnwatchTurnServers, {});\n            }\n        }\n    }\n\n    /**\n     * Search for users in the user directory.\n     * @param searchTerm The term to search for.\n     * @param limit The maximum number of results to return. If not supplied, the\n     * @returns Resolves to the search results.\n     */\n    public async searchUserDirectory(\n        searchTerm: string,\n        limit?: number,\n    ): Promise<IUserDirectorySearchFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3973)) {\n            throw new Error(\"The user_directory_search action is not supported by the client.\")\n        }\n\n        const data: IUserDirectorySearchFromWidgetRequestData = {\n            search_term: searchTerm,\n            limit,\n        };\n\n        return this.transport.send<\n            IUserDirectorySearchFromWidgetRequestData,\n            IUserDirectorySearchFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC3973UserDirectorySearch, data);\n    }\n\n    /**\n     * Get the config for the media repository.\n     * @returns Promise which resolves with an object containing the config.\n     */\n    public async getMediaConfig(): Promise<IGetMediaConfigActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The get_media_config action is not supported by the client.\")\n        }\n\n        const data: IGetMediaConfigActionFromWidgetRequestData = {};\n\n        return this.transport.send<\n            IGetMediaConfigActionFromWidgetRequestData,\n            IGetMediaConfigActionFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC4039GetMediaConfigAction, data);\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     * @param file - The object to upload. Something that can be sent to\n     *               XMLHttpRequest.send (typically a File).\n     * @returns Resolves to the location of the uploaded file.\n     */\n    public async uploadFile(file: XMLHttpRequestBodyInit): Promise<IUploadFileActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The upload_file action is not supported by the client.\")\n        }\n\n        const data: IUploadFileActionFromWidgetRequestData = {\n            file,\n        };\n\n        return this.transport.send<\n            IUploadFileActionFromWidgetRequestData,\n            IUploadFileActionFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC4039UploadFileAction, data);\n    }\n\n    /**\n     * Starts the communication channel. This should be done early to ensure\n     * that messages are not missed. Communication can only be stopped by the client.\n     */\n    public start() {\n        this.transport.start();\n        this.getClientVersions().then(v => {\n            if (v.includes(UnstableApiVersion.MSC2974)) {\n                this.supportsMSC2974Renegotiate = true;\n            }\n        });\n    }\n\n    private handleMessage(ev: CustomEvent<IWidgetApiRequest>) {\n        const actionEv = new CustomEvent(`action:${ev.detail.action}`, {\n            detail: ev.detail,\n            cancelable: true,\n        });\n        this.emit(`action:${ev.detail.action}`, actionEv);\n        if (!actionEv.defaultPrevented) {\n            switch (ev.detail.action) {\n                case WidgetApiToWidgetAction.SupportedApiVersions:\n                    return this.replyVersions(<ISupportedVersionsActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.Capabilities:\n                    return this.handleCapabilities(<ICapabilitiesActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.UpdateVisibility:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                case WidgetApiToWidgetAction.NotifyCapabilities:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                default:\n                    return this.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                        error: {\n                            message: \"Unknown or unsupported action: \" + ev.detail.action,\n                        },\n                    });\n            }\n        }\n    }\n\n    private replyVersions(request: ISupportedVersionsActionRequest) {\n        this.transport.reply<ISupportedVersionsActionResponseData>(request, {\n            supported_versions: CurrentApiVersions,\n        });\n    }\n\n    public getClientVersions(): Promise<ApiVersion[]> {\n        if (Array.isArray(this.cachedClientVersions)) {\n            return Promise.resolve(this.cachedClientVersions);\n        }\n\n        return this.transport.send<IWidgetApiRequestEmptyData, ISupportedVersionsActionResponseData>(\n            WidgetApiFromWidgetAction.SupportedApiVersions, {},\n        ).then(r => {\n            this.cachedClientVersions = r.supported_versions;\n            return r.supported_versions;\n        }).catch(e => {\n            console.warn(\"non-fatal error getting supported client versions: \", e);\n            return [];\n        });\n    }\n\n    private handleCapabilities(request: ICapabilitiesActionRequest) {\n        if (this.capabilitiesFinished) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: {\n                    message: \"Capability negotiation already completed\",\n                },\n            });\n        }\n\n        // See if we can expect a capabilities notification or not\n        return this.getClientVersions().then(v => {\n            if (v.includes(UnstableApiVersion.MSC2871)) {\n                this.once(\n                    `action:${WidgetApiToWidgetAction.NotifyCapabilities}`,\n                    (ev: CustomEvent<INotifyCapabilitiesActionRequest>) => {\n                        this.approvedCapabilities = ev.detail.data.approved;\n                        this.emit(\"ready\");\n                    },\n                );\n            } else {\n                // if we can't expect notification, we're as done as we can be\n                this.emit(\"ready\");\n            }\n\n            // in either case, reply to that capabilities request\n            this.capabilitiesFinished = true;\n            return this.transport.reply<ICapabilitiesActionResponseData>(request, {\n                capabilities: this.requestedCapabilities,\n            });\n        });\n    }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAIA,IAAAC,mBAAA,GAAAD,OAAA;AAKA,IAAAE,WAAA,GAAAF,OAAA;AAQA,IAAAG,qBAAA,GAAAH,OAAA;AACA,IAAAI,gBAAA,GAAAJ,OAAA;AAIA,IAAAK,gBAAA,GAAAL,OAAA;AAOA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,mBAAA,GAAAP,OAAA;AAcA,IAAAQ,sBAAA,GAAAR,OAAA;AAUA,IAAAS,QAAA,GAAAT,OAAA;AAAoC,SAAAU,QAAAC,GAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,GAAA,kBAAAA,GAAA,gBAAAA,GAAA,WAAAA,GAAA,yBAAAC,MAAA,IAAAD,GAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,GAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,GAAA,KAAAD,OAAA,CAAAC,GAAA;AAAA,SAAAK,oBAAA,kBArEpC,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,OAAA,SAAAA,OAAA,OAAAC,EAAA,GAAAC,MAAA,CAAAJ,SAAA,EAAAK,MAAA,GAAAF,EAAA,CAAAG,cAAA,EAAAC,cAAA,GAAAH,MAAA,CAAAG,cAAA,cAAAX,GAAA,EAAAY,GAAA,EAAAC,IAAA,IAAAb,GAAA,CAAAY,GAAA,IAAAC,IAAA,CAAAC,KAAA,KAAAC,OAAA,wBAAAd,MAAA,GAAAA,MAAA,OAAAe,cAAA,GAAAD,OAAA,CAAAb,QAAA,kBAAAe,mBAAA,GAAAF,OAAA,CAAAG,aAAA,uBAAAC,iBAAA,GAAAJ,OAAA,CAAAK,WAAA,8BAAAC,OAAArB,GAAA,EAAAY,GAAA,EAAAE,KAAA,WAAAN,MAAA,CAAAG,cAAA,CAAAX,GAAA,EAAAY,GAAA,IAAAE,KAAA,EAAAA,KAAA,EAAAQ,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAAxB,GAAA,CAAAY,GAAA,WAAAS,MAAA,mBAAAI,GAAA,IAAAJ,MAAA,YAAAA,OAAArB,GAAA,EAAAY,GAAA,EAAAE,KAAA,WAAAd,GAAA,CAAAY,GAAA,IAAAE,KAAA,gBAAAY,KAAAC,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,QAAAC,cAAA,GAAAH,OAAA,IAAAA,OAAA,CAAAxB,SAAA,YAAA4B,SAAA,GAAAJ,OAAA,GAAAI,SAAA,EAAAC,SAAA,GAAAzB,MAAA,CAAA0B,MAAA,CAAAH,cAAA,CAAA3B,SAAA,GAAA+B,OAAA,OAAAC,OAAA,CAAAN,WAAA,gBAAAnB,cAAA,CAAAsB,SAAA,eAAAnB,KAAA,EAAAuB,gBAAA,CAAAV,OAAA,EAAAE,IAAA,EAAAM,OAAA,MAAAF,SAAA,aAAAK,SAAAC,EAAA,EAAAvC,GAAA,EAAAwC,GAAA,mBAAAC,IAAA,YAAAD,GAAA,EAAAD,EAAA,CAAAG,IAAA,CAAA1C,GAAA,EAAAwC,GAAA,cAAAf,GAAA,aAAAgB,IAAA,WAAAD,GAAA,EAAAf,GAAA,QAAAnB,OAAA,CAAAoB,IAAA,GAAAA,IAAA,MAAAiB,gBAAA,gBAAAX,UAAA,cAAAY,kBAAA,cAAAC,2BAAA,SAAAC,iBAAA,OAAAzB,MAAA,CAAAyB,iBAAA,EAAA9B,cAAA,qCAAA+B,QAAA,GAAAvC,MAAA,CAAAwC,cAAA,EAAAC,uBAAA,GAAAF,QAAA,IAAAA,QAAA,CAAAA,QAAA,CAAAG,MAAA,QAAAD,uBAAA,IAAAA,uBAAA,KAAA1C,EAAA,IAAAE,MAAA,CAAAiC,IAAA,CAAAO,uBAAA,EAAAjC,cAAA,MAAA8B,iBAAA,GAAAG,uBAAA,OAAAE,EAAA,GAAAN,0BAAA,CAAAzC,SAAA,GAAA4B,SAAA,CAAA5B,SAAA,GAAAI,MAAA,CAAA0B,MAAA,CAAAY,iBAAA,YAAAM,sBAAAhD,SAAA,gCAAAiD,OAAA,WAAAC,MAAA,IAAAjC,MAAA,CAAAjB,SAAA,EAAAkD,MAAA,YAAAd,GAAA,gBAAAe,OAAA,CAAAD,MAAA,EAAAd,GAAA,sBAAAgB,cAAAvB,SAAA,EAAAwB,WAAA,aAAAC,OAAAJ,MAAA,EAAAd,GAAA,EAAAmB,OAAA,EAAAC,MAAA,QAAAC,MAAA,GAAAvB,QAAA,CAAAL,SAAA,CAAAqB,MAAA,GAAArB,SAAA,EAAAO,GAAA,mBAAAqB,MAAA,CAAApB,IAAA,QAAAqB,MAAA,GAAAD,MAAA,CAAArB,GAAA,EAAA1B,KAAA,GAAAgD,MAAA,CAAAhD,KAAA,SAAAA,KAAA,gBAAAf,OAAA,CAAAe,KAAA,KAAAL,MAAA,CAAAiC,IAAA,CAAA5B,KAAA,eAAA2C,WAAA,CAAAE,OAAA,CAAA7C,KAAA,CAAAiD,OAAA,EAAAC,IAAA,WAAAlD,KAAA,IAAA4C,MAAA,SAAA5C,KAAA,EAAA6C,OAAA,EAAAC,MAAA,gBAAAnC,GAAA,IAAAiC,MAAA,UAAAjC,GAAA,EAAAkC,OAAA,EAAAC,MAAA,QAAAH,WAAA,CAAAE,OAAA,CAAA7C,KAAA,EAAAkD,IAAA,WAAAC,SAAA,IAAAH,MAAA,CAAAhD,KAAA,GAAAmD,SAAA,EAAAN,OAAA,CAAAG,MAAA,gBAAAI,KAAA,WAAAR,MAAA,UAAAQ,KAAA,EAAAP,OAAA,EAAAC,MAAA,SAAAA,MAAA,CAAAC,MAAA,CAAArB,GAAA,SAAA2B,eAAA,EAAAxD,cAAA,oBAAAG,KAAA,WAAAA,MAAAwC,MAAA,EAAAd,GAAA,aAAA4B,2BAAA,eAAAX,WAAA,WAAAE,OAAA,EAAAC,MAAA,IAAAF,MAAA,CAAAJ,MAAA,EAAAd,GAAA,EAAAmB,OAAA,EAAAC,MAAA,gBAAAO,eAAA,GAAAA,eAAA,GAAAA,eAAA,CAAAH,IAAA,CAAAI,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAA/B,iBAAAV,OAAA,EAAAE,IAAA,EAAAM,OAAA,QAAAkC,KAAA,sCAAAf,MAAA,EAAAd,GAAA,wBAAA6B,KAAA,YAAAC,KAAA,sDAAAD,KAAA,oBAAAf,MAAA,QAAAd,GAAA,SAAA+B,UAAA,WAAApC,OAAA,CAAAmB,MAAA,GAAAA,MAAA,EAAAnB,OAAA,CAAAK,GAAA,GAAAA,GAAA,UAAAgC,QAAA,GAAArC,OAAA,CAAAqC,QAAA,MAAAA,QAAA,QAAAC,cAAA,GAAAC,mBAAA,CAAAF,QAAA,EAAArC,OAAA,OAAAsC,cAAA,QAAAA,cAAA,KAAA9B,gBAAA,mBAAA8B,cAAA,qBAAAtC,OAAA,CAAAmB,MAAA,EAAAnB,OAAA,CAAAwC,IAAA,GAAAxC,OAAA,CAAAyC,KAAA,GAAAzC,OAAA,CAAAK,GAAA,sBAAAL,OAAA,CAAAmB,MAAA,6BAAAe,KAAA,QAAAA,KAAA,gBAAAlC,OAAA,CAAAK,GAAA,EAAAL,OAAA,CAAA0C,iBAAA,CAAA1C,OAAA,CAAAK,GAAA,uBAAAL,OAAA,CAAAmB,MAAA,IAAAnB,OAAA,CAAA2C,MAAA,WAAA3C,OAAA,CAAAK,GAAA,GAAA6B,KAAA,oBAAAR,MAAA,GAAAvB,QAAA,CAAAX,OAAA,EAAAE,IAAA,EAAAM,OAAA,oBAAA0B,MAAA,CAAApB,IAAA,QAAA4B,KAAA,GAAAlC,OAAA,CAAA4C,IAAA,mCAAAlB,MAAA,CAAArB,GAAA,KAAAG,gBAAA,qBAAA7B,KAAA,EAAA+C,MAAA,CAAArB,GAAA,EAAAuC,IAAA,EAAA5C,OAAA,CAAA4C,IAAA,kBAAAlB,MAAA,CAAApB,IAAA,KAAA4B,KAAA,gBAAAlC,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,GAAAqB,MAAA,CAAArB,GAAA,mBAAAkC,oBAAAF,QAAA,EAAArC,OAAA,QAAA6C,UAAA,GAAA7C,OAAA,CAAAmB,MAAA,EAAAA,MAAA,GAAAkB,QAAA,CAAAtE,QAAA,CAAA8E,UAAA,OAAAC,SAAA,KAAA3B,MAAA,SAAAnB,OAAA,CAAAqC,QAAA,qBAAAQ,UAAA,IAAAR,QAAA,CAAAtE,QAAA,eAAAiC,OAAA,CAAAmB,MAAA,aAAAnB,OAAA,CAAAK,GAAA,GAAAyC,SAAA,EAAAP,mBAAA,CAAAF,QAAA,EAAArC,OAAA,eAAAA,OAAA,CAAAmB,MAAA,kBAAA0B,UAAA,KAAA7C,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,OAAA0C,SAAA,uCAAAF,UAAA,iBAAArC,gBAAA,MAAAkB,MAAA,GAAAvB,QAAA,CAAAgB,MAAA,EAAAkB,QAAA,CAAAtE,QAAA,EAAAiC,OAAA,CAAAK,GAAA,mBAAAqB,MAAA,CAAApB,IAAA,SAAAN,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,GAAAqB,MAAA,CAAArB,GAAA,EAAAL,OAAA,CAAAqC,QAAA,SAAA7B,gBAAA,MAAAwC,IAAA,GAAAtB,MAAA,CAAArB,GAAA,SAAA2C,IAAA,GAAAA,IAAA,CAAAJ,IAAA,IAAA5C,OAAA,CAAAqC,QAAA,CAAAY,UAAA,IAAAD,IAAA,CAAArE,KAAA,EAAAqB,OAAA,CAAAkD,IAAA,GAAAb,QAAA,CAAAc,OAAA,eAAAnD,OAAA,CAAAmB,MAAA,KAAAnB,OAAA,CAAAmB,MAAA,WAAAnB,OAAA,CAAAK,GAAA,GAAAyC,SAAA,GAAA9C,OAAA,CAAAqC,QAAA,SAAA7B,gBAAA,IAAAwC,IAAA,IAAAhD,OAAA,CAAAmB,MAAA,YAAAnB,OAAA,CAAAK,GAAA,OAAA0C,SAAA,sCAAA/C,OAAA,CAAAqC,QAAA,SAAA7B,gBAAA,cAAA4C,aAAAC,IAAA,QAAAC,KAAA,KAAAC,MAAA,EAAAF,IAAA,YAAAA,IAAA,KAAAC,KAAA,CAAAE,QAAA,GAAAH,IAAA,WAAAA,IAAA,KAAAC,KAAA,CAAAG,UAAA,GAAAJ,IAAA,KAAAC,KAAA,CAAAI,QAAA,GAAAL,IAAA,WAAAM,UAAA,CAAAC,IAAA,CAAAN,KAAA,cAAAO,cAAAP,KAAA,QAAA5B,MAAA,GAAA4B,KAAA,CAAAQ,UAAA,QAAApC,MAAA,CAAApB,IAAA,oBAAAoB,MAAA,CAAArB,GAAA,EAAAiD,KAAA,CAAAQ,UAAA,GAAApC,MAAA,aAAAzB,QAAAN,WAAA,SAAAgE,UAAA,MAAAJ,MAAA,aAAA5D,WAAA,CAAAuB,OAAA,CAAAkC,YAAA,cAAAW,KAAA,iBAAAhD,OAAAiD,QAAA,QAAAA,QAAA,QAAAC,cAAA,GAAAD,QAAA,CAAAnF,cAAA,OAAAoF,cAAA,SAAAA,cAAA,CAAA1D,IAAA,CAAAyD,QAAA,4BAAAA,QAAA,CAAAd,IAAA,SAAAc,QAAA,OAAAE,KAAA,CAAAF,QAAA,CAAAG,MAAA,SAAAC,CAAA,OAAAlB,IAAA,YAAAA,KAAA,aAAAkB,CAAA,GAAAJ,QAAA,CAAAG,MAAA,OAAA7F,MAAA,CAAAiC,IAAA,CAAAyD,QAAA,EAAAI,CAAA,UAAAlB,IAAA,CAAAvE,KAAA,GAAAqF,QAAA,CAAAI,CAAA,GAAAlB,IAAA,CAAAN,IAAA,OAAAM,IAAA,SAAAA,IAAA,CAAAvE,KAAA,GAAAmE,SAAA,EAAAI,IAAA,CAAAN,IAAA,OAAAM,IAAA,YAAAA,IAAA,CAAAA,IAAA,GAAAA,IAAA,eAAAA,IAAA,EAAAd,UAAA,eAAAA,WAAA,aAAAzD,KAAA,EAAAmE,SAAA,EAAAF,IAAA,iBAAAnC,iBAAA,CAAAxC,SAAA,GAAAyC,0BAAA,EAAAlC,cAAA,CAAAwC,EAAA,mBAAArC,KAAA,EAAA+B,0BAAA,EAAAtB,YAAA,SAAAZ,cAAA,CAAAkC,0BAAA,mBAAA/B,KAAA,EAAA8B,iBAAA,EAAArB,YAAA,SAAAqB,iBAAA,CAAA4D,WAAA,GAAAnF,MAAA,CAAAwB,0BAAA,EAAA1B,iBAAA,wBAAAb,OAAA,CAAAmG,mBAAA,aAAAC,MAAA,QAAAC,IAAA,wBAAAD,MAAA,IAAAA,MAAA,CAAAvG,WAAA,WAAAwG,IAAA,KAAAA,IAAA,KAAA/D,iBAAA,6BAAA+D,IAAA,CAAAH,WAAA,IAAAG,IAAA,CAAAC,IAAA,OAAAtG,OAAA,CAAAuG,IAAA,aAAAH,MAAA,WAAAlG,MAAA,CAAAsG,cAAA,GAAAtG,MAAA,CAAAsG,cAAA,CAAAJ,MAAA,EAAA7D,0BAAA,KAAA6D,MAAA,CAAAK,SAAA,GAAAlE,0BAAA,EAAAxB,MAAA,CAAAqF,MAAA,EAAAvF,iBAAA,yBAAAuF,MAAA,CAAAtG,SAAA,GAAAI,MAAA,CAAA0B,MAAA,CAAAiB,EAAA,GAAAuD,MAAA,KAAApG,OAAA,CAAA0G,KAAA,aAAAxE,GAAA,aAAAuB,OAAA,EAAAvB,GAAA,OAAAY,qBAAA,CAAAI,aAAA,CAAApD,SAAA,GAAAiB,MAAA,CAAAmC,aAAA,CAAApD,SAAA,EAAAa,mBAAA,iCAAAX,OAAA,CAAAkD,aAAA,GAAAA,aAAA,EAAAlD,OAAA,CAAA2G,KAAA,aAAAtF,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,EAAA2B,WAAA,eAAAA,WAAA,KAAAA,WAAA,GAAAyD,OAAA,OAAAC,IAAA,OAAA3D,aAAA,CAAA9B,IAAA,CAAAC,OAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,WAAA,GAAA2B,WAAA,UAAAnD,OAAA,CAAAmG,mBAAA,CAAA7E,OAAA,IAAAuF,IAAA,GAAAA,IAAA,CAAA9B,IAAA,GAAArB,IAAA,WAAAF,MAAA,WAAAA,MAAA,CAAAiB,IAAA,GAAAjB,MAAA,CAAAhD,KAAA,GAAAqG,IAAA,CAAA9B,IAAA,WAAAjC,qBAAA,CAAAD,EAAA,GAAA9B,MAAA,CAAA8B,EAAA,EAAAhC,iBAAA,gBAAAE,MAAA,CAAA8B,EAAA,EAAAnC,cAAA,iCAAAK,MAAA,CAAA8B,EAAA,6DAAA7C,OAAA,CAAA8G,IAAA,aAAAC,GAAA,QAAAC,MAAA,GAAA9G,MAAA,CAAA6G,GAAA,GAAAD,IAAA,gBAAAxG,GAAA,IAAA0G,MAAA,EAAAF,IAAA,CAAArB,IAAA,CAAAnF,GAAA,UAAAwG,IAAA,CAAAG,OAAA,aAAAlC,KAAA,WAAA+B,IAAA,CAAAd,MAAA,SAAA1F,GAAA,GAAAwG,IAAA,CAAAI,GAAA,QAAA5G,GAAA,IAAA0G,MAAA,SAAAjC,IAAA,CAAAvE,KAAA,GAAAF,GAAA,EAAAyE,IAAA,CAAAN,IAAA,OAAAM,IAAA,WAAAA,IAAA,CAAAN,IAAA,OAAAM,IAAA,QAAA/E,OAAA,CAAA4C,MAAA,GAAAA,MAAA,EAAAd,OAAA,CAAAhC,SAAA,KAAAD,WAAA,EAAAiC,OAAA,EAAA8D,KAAA,WAAAA,MAAAuB,aAAA,aAAAC,IAAA,WAAArC,IAAA,WAAAV,IAAA,QAAAC,KAAA,GAAAK,SAAA,OAAAF,IAAA,YAAAP,QAAA,cAAAlB,MAAA,gBAAAd,GAAA,GAAAyC,SAAA,OAAAa,UAAA,CAAAzC,OAAA,CAAA2C,aAAA,IAAAyB,aAAA,WAAAb,IAAA,kBAAAA,IAAA,CAAAe,MAAA,OAAAlH,MAAA,CAAAiC,IAAA,OAAAkE,IAAA,MAAAP,KAAA,EAAAO,IAAA,CAAAgB,KAAA,cAAAhB,IAAA,IAAA3B,SAAA,MAAA4C,IAAA,WAAAA,KAAA,SAAA9C,IAAA,WAAA+C,UAAA,QAAAhC,UAAA,IAAAG,UAAA,kBAAA6B,UAAA,CAAArF,IAAA,QAAAqF,UAAA,CAAAtF,GAAA,cAAAuF,IAAA,KAAAlD,iBAAA,WAAAA,kBAAAmD,SAAA,aAAAjD,IAAA,QAAAiD,SAAA,MAAA7F,OAAA,kBAAA8F,OAAAC,GAAA,EAAAC,MAAA,WAAAtE,MAAA,CAAApB,IAAA,YAAAoB,MAAA,CAAArB,GAAA,GAAAwF,SAAA,EAAA7F,OAAA,CAAAkD,IAAA,GAAA6C,GAAA,EAAAC,MAAA,KAAAhG,OAAA,CAAAmB,MAAA,WAAAnB,OAAA,CAAAK,GAAA,GAAAyC,SAAA,KAAAkD,MAAA,aAAA5B,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,GAAA1C,MAAA,GAAA4B,KAAA,CAAAQ,UAAA,iBAAAR,KAAA,CAAAC,MAAA,SAAAuC,MAAA,aAAAxC,KAAA,CAAAC,MAAA,SAAAgC,IAAA,QAAAU,QAAA,GAAA3H,MAAA,CAAAiC,IAAA,CAAA+C,KAAA,eAAA4C,UAAA,GAAA5H,MAAA,CAAAiC,IAAA,CAAA+C,KAAA,qBAAA2C,QAAA,IAAAC,UAAA,aAAAX,IAAA,GAAAjC,KAAA,CAAAE,QAAA,SAAAsC,MAAA,CAAAxC,KAAA,CAAAE,QAAA,gBAAA+B,IAAA,GAAAjC,KAAA,CAAAG,UAAA,SAAAqC,MAAA,CAAAxC,KAAA,CAAAG,UAAA,cAAAwC,QAAA,aAAAV,IAAA,GAAAjC,KAAA,CAAAE,QAAA,SAAAsC,MAAA,CAAAxC,KAAA,CAAAE,QAAA,qBAAA0C,UAAA,YAAA/D,KAAA,qDAAAoD,IAAA,GAAAjC,KAAA,CAAAG,UAAA,SAAAqC,MAAA,CAAAxC,KAAA,CAAAG,UAAA,YAAAd,MAAA,WAAAA,OAAArC,IAAA,EAAAD,GAAA,aAAA+D,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAC,MAAA,SAAAgC,IAAA,IAAAjH,MAAA,CAAAiC,IAAA,CAAA+C,KAAA,wBAAAiC,IAAA,GAAAjC,KAAA,CAAAG,UAAA,QAAA0C,YAAA,GAAA7C,KAAA,aAAA6C,YAAA,iBAAA7F,IAAA,mBAAAA,IAAA,KAAA6F,YAAA,CAAA5C,MAAA,IAAAlD,GAAA,IAAAA,GAAA,IAAA8F,YAAA,CAAA1C,UAAA,KAAA0C,YAAA,cAAAzE,MAAA,GAAAyE,YAAA,GAAAA,YAAA,CAAArC,UAAA,cAAApC,MAAA,CAAApB,IAAA,GAAAA,IAAA,EAAAoB,MAAA,CAAArB,GAAA,GAAAA,GAAA,EAAA8F,YAAA,SAAAhF,MAAA,gBAAA+B,IAAA,GAAAiD,YAAA,CAAA1C,UAAA,EAAAjD,gBAAA,SAAA4F,QAAA,CAAA1E,MAAA,MAAA0E,QAAA,WAAAA,SAAA1E,MAAA,EAAAgC,QAAA,oBAAAhC,MAAA,CAAApB,IAAA,QAAAoB,MAAA,CAAArB,GAAA,qBAAAqB,MAAA,CAAApB,IAAA,mBAAAoB,MAAA,CAAApB,IAAA,QAAA4C,IAAA,GAAAxB,MAAA,CAAArB,GAAA,gBAAAqB,MAAA,CAAApB,IAAA,SAAAsF,IAAA,QAAAvF,GAAA,GAAAqB,MAAA,CAAArB,GAAA,OAAAc,MAAA,kBAAA+B,IAAA,yBAAAxB,MAAA,CAAApB,IAAA,IAAAoD,QAAA,UAAAR,IAAA,GAAAQ,QAAA,GAAAlD,gBAAA,KAAA6F,MAAA,WAAAA,OAAA5C,UAAA,aAAAW,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAG,UAAA,KAAAA,UAAA,cAAA2C,QAAA,CAAA9C,KAAA,CAAAQ,UAAA,EAAAR,KAAA,CAAAI,QAAA,GAAAG,aAAA,CAAAP,KAAA,GAAA9C,gBAAA,yBAAA8F,OAAA/C,MAAA,aAAAa,CAAA,QAAAT,UAAA,CAAAQ,MAAA,MAAAC,CAAA,SAAAA,CAAA,QAAAd,KAAA,QAAAK,UAAA,CAAAS,CAAA,OAAAd,KAAA,CAAAC,MAAA,KAAAA,MAAA,QAAA7B,MAAA,GAAA4B,KAAA,CAAAQ,UAAA,kBAAApC,MAAA,CAAApB,IAAA,QAAAiG,MAAA,GAAA7E,MAAA,CAAArB,GAAA,EAAAwD,aAAA,CAAAP,KAAA,YAAAiD,MAAA,gBAAApE,KAAA,8BAAAqE,aAAA,WAAAA,cAAAxC,QAAA,EAAAf,UAAA,EAAAE,OAAA,gBAAAd,QAAA,KAAAtE,QAAA,EAAAgD,MAAA,CAAAiD,QAAA,GAAAf,UAAA,EAAAA,UAAA,EAAAE,OAAA,EAAAA,OAAA,oBAAAhC,MAAA,UAAAd,GAAA,GAAAyC,SAAA,GAAAtC,gBAAA,OAAArC,OAAA;AAAA,SAAAsI,mBAAAC,GAAA,EAAAlF,OAAA,EAAAC,MAAA,EAAAkF,KAAA,EAAAC,MAAA,EAAAnI,GAAA,EAAA4B,GAAA,cAAA2C,IAAA,GAAA0D,GAAA,CAAAjI,GAAA,EAAA4B,GAAA,OAAA1B,KAAA,GAAAqE,IAAA,CAAArE,KAAA,WAAAoD,KAAA,IAAAN,MAAA,CAAAM,KAAA,iBAAAiB,IAAA,CAAAJ,IAAA,IAAApB,OAAA,CAAA7C,KAAA,YAAAoG,OAAA,CAAAvD,OAAA,CAAA7C,KAAA,EAAAkD,IAAA,CAAA8E,KAAA,EAAAC,MAAA;AAAA,SAAAC,kBAAAzG,EAAA,6BAAAV,IAAA,SAAAoH,IAAA,GAAAC,SAAA,aAAAhC,OAAA,WAAAvD,OAAA,EAAAC,MAAA,QAAAiF,GAAA,GAAAtG,EAAA,CAAA4G,KAAA,CAAAtH,IAAA,EAAAoH,IAAA,YAAAH,MAAAhI,KAAA,IAAA8H,kBAAA,CAAAC,GAAA,EAAAlF,OAAA,EAAAC,MAAA,EAAAkF,KAAA,EAAAC,MAAA,UAAAjI,KAAA,cAAAiI,OAAAtH,GAAA,IAAAmH,kBAAA,CAAAC,GAAA,EAAAlF,OAAA,EAAAC,MAAA,EAAAkF,KAAA,EAAAC,MAAA,WAAAtH,GAAA,KAAAqH,KAAA,CAAA7D,SAAA;AAAA,SAAAmE,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAApE,SAAA;AAAA,SAAAqE,kBAAAC,MAAA,EAAAC,KAAA,aAAAlD,CAAA,MAAAA,CAAA,GAAAkD,KAAA,CAAAnD,MAAA,EAAAC,CAAA,UAAAmD,UAAA,GAAAD,KAAA,CAAAlD,CAAA,GAAAmD,UAAA,CAAApI,UAAA,GAAAoI,UAAA,CAAApI,UAAA,WAAAoI,UAAA,CAAAnI,YAAA,wBAAAmI,UAAA,EAAAA,UAAA,CAAAlI,QAAA,SAAAhB,MAAA,CAAAG,cAAA,CAAA6I,MAAA,EAAAG,cAAA,CAAAD,UAAA,CAAA9I,GAAA,GAAA8I,UAAA;AAAA,SAAAE,aAAAN,WAAA,EAAAO,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAN,iBAAA,CAAAD,WAAA,CAAAlJ,SAAA,EAAAyJ,UAAA,OAAAC,WAAA,EAAAP,iBAAA,CAAAD,WAAA,EAAAQ,WAAA,GAAAtJ,MAAA,CAAAG,cAAA,CAAA2I,WAAA,iBAAA9H,QAAA,mBAAA8H,WAAA;AAAA,SAAAS,UAAAC,QAAA,EAAAC,UAAA,eAAAA,UAAA,mBAAAA,UAAA,uBAAA/E,SAAA,0DAAA8E,QAAA,CAAA5J,SAAA,GAAAI,MAAA,CAAA0B,MAAA,CAAA+H,UAAA,IAAAA,UAAA,CAAA7J,SAAA,IAAAD,WAAA,IAAAW,KAAA,EAAAkJ,QAAA,EAAAxI,QAAA,QAAAD,YAAA,aAAAf,MAAA,CAAAG,cAAA,CAAAqJ,QAAA,iBAAAxI,QAAA,gBAAAyI,UAAA,EAAAC,eAAA,CAAAF,QAAA,EAAAC,UAAA;AAAA,SAAAC,gBAAAC,CAAA,EAAAC,CAAA,IAAAF,eAAA,GAAA1J,MAAA,CAAAsG,cAAA,GAAAtG,MAAA,CAAAsG,cAAA,CAAAuD,IAAA,cAAAH,gBAAAC,CAAA,EAAAC,CAAA,IAAAD,CAAA,CAAApD,SAAA,GAAAqD,CAAA,SAAAD,CAAA,YAAAD,eAAA,CAAAC,CAAA,EAAAC,CAAA;AAAA,SAAAE,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAC,eAAA,CAAAL,OAAA,GAAAzG,MAAA,MAAA0G,yBAAA,QAAAK,SAAA,GAAAD,eAAA,OAAAzK,WAAA,EAAA2D,MAAA,GAAAgH,OAAA,CAAAC,SAAA,CAAAJ,KAAA,EAAAzB,SAAA,EAAA2B,SAAA,YAAA/G,MAAA,GAAA6G,KAAA,CAAAxB,KAAA,OAAAD,SAAA,YAAA8B,0BAAA,OAAAlH,MAAA;AAAA,SAAAkH,2BAAAnJ,IAAA,EAAAa,IAAA,QAAAA,IAAA,KAAA3C,OAAA,CAAA2C,IAAA,yBAAAA,IAAA,2BAAAA,IAAA,aAAAA,IAAA,yBAAAwC,SAAA,uEAAA+F,sBAAA,CAAApJ,IAAA;AAAA,SAAAoJ,uBAAApJ,IAAA,QAAAA,IAAA,yBAAAqJ,cAAA,wEAAArJ,IAAA;AAAA,SAAA4I,0BAAA,eAAAK,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAjL,SAAA,CAAAkL,OAAA,CAAA5I,IAAA,CAAAoI,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAE,CAAA;AAAA,SAAAX,gBAAAT,CAAA,IAAAS,eAAA,GAAApK,MAAA,CAAAsG,cAAA,GAAAtG,MAAA,CAAAwC,cAAA,CAAAqH,IAAA,cAAAO,gBAAAT,CAAA,WAAAA,CAAA,CAAApD,SAAA,IAAAvG,MAAA,CAAAwC,cAAA,CAAAmH,CAAA,aAAAS,eAAA,CAAAT,CAAA;AAAA,SAAAqB,gBAAAxL,GAAA,EAAAY,GAAA,EAAAE,KAAA,IAAAF,GAAA,GAAA+I,cAAA,CAAA/I,GAAA,OAAAA,GAAA,IAAAZ,GAAA,IAAAQ,MAAA,CAAAG,cAAA,CAAAX,GAAA,EAAAY,GAAA,IAAAE,KAAA,EAAAA,KAAA,EAAAQ,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAxB,GAAA,CAAAY,GAAA,IAAAE,KAAA,WAAAd,GAAA;AAAA,SAAA2J,eAAAnH,GAAA,QAAA5B,GAAA,GAAA6K,YAAA,CAAAjJ,GAAA,oBAAAzC,OAAA,CAAAa,GAAA,iBAAAA,GAAA,GAAA8K,MAAA,CAAA9K,GAAA;AAAA,SAAA6K,aAAAE,KAAA,EAAAC,IAAA,QAAA7L,OAAA,CAAA4L,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAA1L,MAAA,CAAA6L,WAAA,OAAAD,IAAA,KAAA5G,SAAA,QAAA8G,GAAA,GAAAF,IAAA,CAAAnJ,IAAA,CAAAiJ,KAAA,EAAAC,IAAA,oBAAA7L,OAAA,CAAAgM,GAAA,uBAAAA,GAAA,YAAA7G,SAAA,4DAAA0G,IAAA,gBAAAF,MAAA,GAAAM,MAAA,EAAAL,KAAA;AAAA,SAAAM,qBAAAnL,KAAA,eAAAoL,cAAA,CAAApL,KAAA;AAAA,SAAAqL,oBAAA5J,EAAA,oCAAA6J,eAAA,CAAA7J,EAAA,CAAA4G,KAAA,OAAAD,SAAA;AAAA,SAAAkD,gBAAAvD,GAAA,QAAAwD,KAAA,EAAAC,IAAA,WAAAC,OAAA3L,GAAA,EAAA4B,GAAA,cAAAsB,MAAA,GAAA+E,GAAA,CAAAjI,GAAA,EAAA4B,GAAA,GAAA1B,KAAA,GAAAgD,MAAA,CAAAhD,KAAA,EAAA0L,UAAA,GAAA1L,KAAA,YAAAoL,cAAA,EAAAhF,OAAA,CAAAvD,OAAA,CAAA6I,UAAA,GAAA1L,KAAA,CAAA2L,CAAA,GAAA3L,KAAA,EAAAkD,IAAA,WAAAxB,GAAA,QAAAgK,UAAA,QAAAE,OAAA,gBAAA9L,GAAA,2BAAAE,KAAA,CAAA6L,CAAA,IAAAnK,GAAA,CAAAuC,IAAA,SAAAwH,MAAA,CAAAG,OAAA,EAAAlK,GAAA,GAAAA,GAAA,GAAAqG,GAAA,CAAA6D,OAAA,EAAAlK,GAAA,EAAA1B,KAAA,IAAA8L,MAAA,CAAA9I,MAAA,CAAAiB,IAAA,wBAAAvC,GAAA,gBAAAf,GAAA,IAAA8K,MAAA,UAAA9K,GAAA,gBAAAA,GAAA,IAAAmL,MAAA,UAAAnL,GAAA,gBAAAmL,OAAAnK,IAAA,EAAA3B,KAAA,YAAA2B,IAAA,mBAAA4J,KAAA,CAAA1I,OAAA,GAAA7C,KAAA,EAAAA,KAAA,EAAAiE,IAAA,8BAAAsH,KAAA,CAAAzI,MAAA,CAAA9C,KAAA,mBAAAuL,KAAA,CAAA1I,OAAA,GAAA7C,KAAA,EAAAA,KAAA,EAAAiE,IAAA,YAAAsH,KAAA,GAAAA,KAAA,CAAAhH,IAAA,IAAAkH,MAAA,CAAAF,KAAA,CAAAzL,GAAA,EAAAyL,KAAA,CAAA7J,GAAA,IAAA8J,IAAA,gBAAA/I,OAAA,aAAA3C,GAAA,EAAA4B,GAAA,eAAA0E,OAAA,WAAAvD,OAAA,EAAAC,MAAA,QAAAiJ,OAAA,KAAAjM,GAAA,EAAAA,GAAA,EAAA4B,GAAA,EAAAA,GAAA,EAAAmB,OAAA,EAAAA,OAAA,EAAAC,MAAA,EAAAA,MAAA,EAAAyB,IAAA,UAAAiH,IAAA,GAAAA,IAAA,GAAAA,IAAA,CAAAjH,IAAA,GAAAwH,OAAA,IAAAR,KAAA,GAAAC,IAAA,GAAAO,OAAA,EAAAN,MAAA,CAAA3L,GAAA,EAAA4B,GAAA,gCAAAqG,GAAA;AAAAuD,eAAA,CAAAhM,SAAA,sBAAAH,MAAA,IAAAA,MAAA,CAAAiB,aAAA,uDAAAkL,eAAA,CAAAhM,SAAA,CAAAiF,IAAA,aAAA7C,GAAA,gBAAAe,OAAA,SAAAf,GAAA,MAAA4J,eAAA,CAAAhM,SAAA,sBAAAoC,GAAA,gBAAAe,OAAA,UAAAf,GAAA,MAAA4J,eAAA,CAAAhM,SAAA,uBAAAoC,GAAA,gBAAAe,OAAA,WAAAf,GAAA;AAAA,SAAA0J,eAAApL,KAAA,EAAAgM,IAAA,SAAAL,CAAA,GAAA3L,KAAA,OAAA6L,CAAA,GAAAG,IAAA,IADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,IAiBaC,SAAS,0BAAAC,aAAA;EAAAjD,SAAA,CAAAgD,SAAA,EAAAC,aAAA;EAAA,IAAAC,MAAA,GAAA3C,YAAA,CAAAyC,SAAA;EAUlB;AACJ;AACA;AACA;AACA;AACA;EACI,SAAAA,UAAA,EAA+F;IAAA,IAAAG,MAAA;IAAA,IAA5EC,QAAuB,GAAAjE,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAG,IAAI;IAAA,IAAUkE,YAA2B,GAAAlE,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAG,IAAI;IAAAE,eAAA,OAAA2D,SAAA;IACzFG,MAAA,GAAAD,MAAA,CAAAvK,IAAA;IAAQwK,MAAA,CAD+CE,YAA2B,GAA3BA,YAA2B;IAAA5B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA,2BAbvD,KAAK;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA,iCACC,KAAK;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA,4BACI,EAAE;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA;IAAA1B,eAAA,CAAAP,sBAAA,CAAAiC,MAAA,yBAGnB,CAAC;IAU1B,IAAI,CAACG,MAAM,CAACC,MAAM,EAAE;MAChB,MAAM,IAAIhJ,KAAK,CAAC,uEAAuE,CAAC;IAC5F;IACA4I,MAAA,CAAKK,SAAS,GAAG,IAAIC,0CAAoB,CACrCC,sCAAkB,CAACC,UAAU,EAC7BP,QAAQ,EACRE,MAAM,CAACC,MAAM,EACbD,MAAM,CACT;IACDH,MAAA,CAAKK,SAAS,CAACI,YAAY,GAAGP,YAAY;IAC1CF,MAAA,CAAKK,SAAS,CAACK,EAAE,CAAC,SAAS,EAAEV,MAAA,CAAKW,aAAa,CAACxD,IAAI,CAAAY,sBAAA,CAAAiC,MAAA,EAAM,CAAC;IAAC,OAAAA,MAAA;EAChE;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANItD,YAAA,CAAAmD,SAAA;IAAAnM,GAAA;IAAAE,KAAA,EAOA,SAAAgN,cAAqBC,UAAsB,EAAW;MAClD,IAAIC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACC,oBAAoB,CAAC,EAAE;QAC1C,OAAO,IAAI,CAACA,oBAAoB,CAACC,QAAQ,CAACJ,UAAU,CAAC;MACzD;MACA,OAAO,IAAI,CAACK,qBAAqB,CAACD,QAAQ,CAACJ,UAAU,CAAC;IAC1D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAnN,GAAA;IAAAE,KAAA,EAOA,SAAAuN,kBAAyBN,UAAsB,EAAE;MAC7C,IAAI,IAAI,CAACO,oBAAoB,IAAI,CAAC,IAAI,CAACC,0BAA0B,EAAE;QAC/D,MAAM,IAAIjK,KAAK,CAAC,2CAA2C,CAAC;MAChE;MAEA,IAAI,CAAC8J,qBAAqB,CAACrI,IAAI,CAACgI,UAAU,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAnN,GAAA;IAAAE,KAAA,EAMA,SAAA0N,oBAA2BC,YAA0B,EAAE;MAAA,IAAAC,MAAA;MACnDD,YAAY,CAACpL,OAAO,CAAC,UAAAsL,GAAG;QAAA,OAAID,MAAI,CAACL,iBAAiB,CAACM,GAAG,CAAC;MAAA,EAAC;IAC5D;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA/N,GAAA;IAAAE,KAAA,EAMA,SAAA8N,iCAAwCC,MAAgC,EAAE;MACtE,IAAI,CAACR,iBAAiB,gCAAAS,MAAA,CAAgCD,MAAM,EAAG;IACnE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAAjO,GAAA;IAAAE,KAAA,EAQA,SAAAiO,6BAAoCC,SAAiB,EAAEC,QAAiB,EAAE;MACtE,IAAI,CAACZ,iBAAiB,CAACa,4CAAqB,CAACC,aAAa,CAACC,qCAAc,CAACC,IAAI,EAAEL,SAAS,EAAEC,QAAQ,CAAC,CAACK,GAAG,CAAC;IAC7G;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA1O,GAAA;IAAAE,KAAA,EAQA,SAAAyO,gCAAuCP,SAAiB,EAAEC,QAAiB,EAAE;MACzE,IAAI,CAACZ,iBAAiB,CAACa,4CAAqB,CAACC,aAAa,CAACC,qCAAc,CAACI,OAAO,EAAER,SAAS,EAAEC,QAAQ,CAAC,CAACK,GAAG,CAAC;IAChH;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA1O,GAAA;IAAAE,KAAA,EAMA,SAAA2O,gCAAuCT,SAAiB,EAAE;MACtD,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACQ,gBAAgB,CAACN,qCAAc,CAACC,IAAI,EAAEL,SAAS,CAAC,CAACM,GAAG,CAAC;IACtG;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA1O,GAAA;IAAAE,KAAA,EAMA,SAAA6O,mCAA0CX,SAAiB,EAAE;MACzD,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACQ,gBAAgB,CAACN,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IACzG;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA1O,GAAA;IAAAE,KAAA,EAKA,SAAA8O,6BAAoCZ,SAAiB,EAAE;MACnD,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACW,YAAY,CAACT,qCAAc,CAACC,IAAI,EAAEL,SAAS,CAAC,CAACM,GAAG,CAAC;IAClG;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA1O,GAAA;IAAAE,KAAA,EAKA,SAAAgP,gCAAuCd,SAAiB,EAAE;MACtD,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACW,YAAY,CAACT,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IACrG;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA1O,GAAA;IAAAE,KAAA,EAOA,SAAAiP,+BAAsCC,OAAgB,EAAE;MACpD,IAAI,CAAC3B,iBAAiB,CAACa,4CAAqB,CAACe,mBAAmB,CAACb,qCAAc,CAACC,IAAI,EAAEW,OAAO,CAAC,CAACV,GAAG,CAAC;IACvG;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA1O,GAAA;IAAAE,KAAA,EAOA,SAAAoP,kCAAyCF,OAAgB,EAAE;MACvD,IAAI,CAAC3B,iBAAiB,CAACa,4CAAqB,CAACe,mBAAmB,CAACb,qCAAc,CAACI,OAAO,EAAEQ,OAAO,CAAC,CAACV,GAAG,CAAC;IAC1G;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA1O,GAAA;IAAAE,KAAA,EAKA,SAAAqP,0CAAiDnB,SAAiB,EAAE;MAChE,IAAI,CAACX,iBAAiB,CAACa,4CAAqB,CAACkB,kBAAkB,CAAChB,qCAAc,CAACI,OAAO,EAAER,SAAS,CAAC,CAACM,GAAG,CAAC;IAC3G;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAA1O,GAAA;IAAAE,KAAA,EAQA,SAAAuP,0BAAA,EAAgE;MAAA,IAAAC,MAAA;MAC5D,OAAO,IAAIpJ,OAAO,CAAqB,UAACvD,OAAO,EAAEC,MAAM,EAAK;QACxD0M,MAAI,CAAC/C,SAAS,CAACgD,YAAY,CACvBC,0CAAyB,CAACC,oBAAoB,EAAE,CAAC,CAAC,CACrD,CAACzM,IAAI,CAAC,UAAA0M,QAAQ,EAAI;UACf,IAAMC,KAAK,GAAGD,QAAQ,CAACA,QAAQ;UAC/B,IAAIC,KAAK,CAACtM,KAAK,KAAKuM,mCAAkB,CAACC,OAAO,EAAE;YAC5ClN,OAAO,CAACgN,KAAK,CAAC;UAClB,CAAC,MAAM,IAAIA,KAAK,CAACtM,KAAK,KAAKuM,mCAAkB,CAACE,OAAO,EAAE;YACnDlN,MAAM,CAAC,IAAIU,KAAK,CAAC,wCAAwC,CAAC,CAAC;UAC/D,CAAC,MAAM,IAAIqM,KAAK,CAACtM,KAAK,KAAKuM,mCAAkB,CAACG,uBAAuB,EAAE;YACnE,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,EAAgD,EAAK;cACpEA,EAAE,CAACC,cAAc,EAAE;cACnB,IAAMrE,OAAO,GAAGoE,EAAE,CAACE,MAAM;cACzB,IAAItE,OAAO,CAACuE,IAAI,CAACC,mBAAmB,KAAKX,QAAQ,CAACY,SAAS,EAAE;cAC7D,IAAIzE,OAAO,CAACuE,IAAI,CAAC/M,KAAK,KAAKuM,mCAAkB,CAACC,OAAO,EAAE;gBACnDlN,OAAO,CAACkJ,OAAO,CAACuE,IAAI,CAAC;gBACrBd,MAAI,CAAC/C,SAAS,CAACgE,KAAK,CAAC1E,OAAO,EAA8B,CAAC,CAAC,CAAC,CAAC,CAAC;cACnE,CAAC,MAAM,IAAIA,OAAO,CAACuE,IAAI,CAAC/M,KAAK,KAAKuM,mCAAkB,CAACE,OAAO,EAAE;gBAC1DlN,MAAM,CAAC,IAAIU,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBAC3DgM,MAAI,CAAC/C,SAAS,CAACgE,KAAK,CAAC1E,OAAO,EAA8B,CAAC,CAAC,CAAC,CAAC,CAAC;cACnE,CAAC,MAAM;gBACHjJ,MAAM,CAAC,IAAIU,KAAK,CAAC,0BAA0B,GAAGqM,KAAK,CAACtM,KAAK,CAAC,CAAC;gBAC3DiM,MAAI,CAAC/C,SAAS,CAACgE,KAAK,CAAC1E,OAAO,EAA+B;kBACvD3I,KAAK,EAAE;oBACHsN,OAAO,EAAE;kBACb;gBACJ,CAAC,CAAC;cACN;cACAlB,MAAI,CAACmB,GAAG,WAAA3C,MAAA,CAAW4C,wCAAuB,CAACC,iBAAiB,GAAIX,SAAS,CAAC;YAC9E,CAAC;YACDV,MAAI,CAAC1C,EAAE,WAAAkB,MAAA,CAAW4C,wCAAuB,CAACC,iBAAiB,GAAIX,SAAS,CAAC;UAC7E,CAAC,MAAM;YACHpN,MAAM,CAAC,IAAIU,KAAK,CAAC,iBAAiB,GAAGqM,KAAK,CAACtM,KAAK,CAAC,CAAC;UACtD;QACJ,CAAC,CAAC,SAAM,CAACT,MAAM,CAAC;MACpB,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAhD,GAAA;IAAAE,KAAA,EAOA,SAAA8Q,4BAAA,EAAoD;MAChD,OAAO,IAAI,CAACrE,SAAS,CAACsE,IAAI,CAACrB,0CAAyB,CAACsB,8BAA8B,EAC1C;QACjCrD,YAAY,EAAE,IAAI,CAACL;MACvB,CAAC,CAAC,CAACpK,IAAI,EAAE;IACjB;;IAEA;AACJ;AACA;AACA;EAHI;IAAApD,GAAA;IAAAE,KAAA,EAIA,SAAAiR,kBAAA,EAA0C;MACtC,OAAO,IAAI,CAACxE,SAAS,CAACsE,IAAI,CAACrB,0CAAyB,CAACwB,aAAa,EAA8B,CAAC,CAAC,CAAC,CAAChO,IAAI,EAAE;IAC9G;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAApD,GAAA;IAAAE,KAAA,EAKA,SAAAmR,YAAmBC,OAAkC,EAAiB;MAClE,OAAO,IAAI,CAAC3E,SAAS,CAACsE,IAAI,CAACrB,0CAAyB,CAAC2B,WAAW,EAAED,OAAO,CAAC,CAAClO,IAAI,EAAE;IACrF;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAApD,GAAA;IAAAE,KAAA,EAMA,SAAAsR,kBAAyBtR,KAAc,EAAoB;MACvD,OAAO,IAAI,CAACyM,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAAC6B,oBAAoB,EAAE;QAACvR,KAAK,EAALA;MAAK,CAAC,CAC1D,CAACkD,IAAI,CAAC,UAAA+H,GAAG;QAAA,OAAIA,GAAG,CAACuG,OAAO;MAAA,EAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI;IAAA1R,GAAA;IAAAE,KAAA,EASA,SAAAyR,gBACIC,GAAW,EACX5L,IAAY,EAIC;MAAA,IAHb6L,OAA4C,GAAAvJ,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAG,EAAE;MAAA,IACjDkI,IAA4B,GAAAlI,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAG,CAAC,CAAC;MAAA,IACjCzG,IAAgB,GAAAyG,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAGwJ,4BAAgB,CAACC,MAAM;MAE1C,OAAO,IAAI,CAACpF,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACoC,eAAe,EAAE;QAAEnQ,IAAI,EAAJA,IAAI;QAAE+P,GAAG,EAAHA,GAAG;QAAE5L,IAAI,EAAJA,IAAI;QAAE6L,OAAO,EAAPA,OAAO;QAAErB,IAAI,EAAJA;MAAK,CAAC,CAChF,CAACpN,IAAI,EAAE;IACZ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAApD,GAAA;IAAAE,KAAA,EAKA,SAAA+R,iBAAA,EAA0E;MAAA,IAAlDzB,IAA4B,GAAAlI,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAjE,SAAA,GAAAiE,SAAA,MAAG,CAAC,CAAC;MACrD,OAAO,IAAI,CAACqE,SAAS,CAACsE,IAAI,CAAyBrB,0CAAyB,CAACsC,gBAAgB,EAAE1B,IAAI,CAAC,CAACpN,IAAI,EAAE;IAC/G;EAAC;IAAApD,GAAA;IAAAE,KAAA,EAED,SAAAiS,cACI/D,SAAiB,EACjBgE,OAAgB,EAChBnE,MAAe,EAC0B;MACzC,OAAO,IAAI,CAACtB,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACyC,SAAS,EACnC;QAACxQ,IAAI,EAAEuM,SAAS;QAAEgE,OAAO,EAAPA,OAAO;QAAEE,OAAO,EAAErE;MAAM,CAAC,CAC9C;IACL;EAAC;IAAAjO,GAAA;IAAAE,KAAA,EAED,SAAAqS,eACInE,SAAiB,EACjBC,QAAgB,EAChB+D,OAAgB,EAChBnE,MAAe,EAC0B;MACzC,OAAO,IAAI,CAACtB,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACyC,SAAS,EACnC;QAACxQ,IAAI,EAAEuM,SAAS;QAAEgE,OAAO,EAAPA,OAAO;QAAEI,SAAS,EAAEnE,QAAQ;QAAEiE,OAAO,EAAErE;MAAM,CAAC,CACnE;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAAjO,GAAA;IAAAE,KAAA,EAOA,SAAAuS,aACIrE,SAAiB,EACjBsE,SAAkB,EAClBC,UAAgE,EACpB;MAC5C,OAAO,IAAI,CAAChG,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACgD,YAAY,EACtC;QAAC/Q,IAAI,EAAEuM,SAAS;QAAEsE,SAAS,EAATA,SAAS;QAAEG,QAAQ,EAAEF;MAAU,CAAC,CACrD;IACL;EAAC;IAAA3S,GAAA;IAAAE,KAAA,EAED,SAAA4S,oBACI1E,SAAiB,EACjB2E,OAAsC,EACX;MAC3B,IAAMvC,IAAqC,GAAG;QAAC3O,IAAI,EAAEuM;MAAS,CAAC;MAE/D,IAAI2E,OAAO,EAAE;QACT,IAAIA,OAAO,CAACxF,QAAQ,CAACyF,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCzC,IAAI,CAAC0C,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHzC,IAAI,CAAC0C,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,OAAO,IAAI,CAACpG,SAAS,CAACsE,IAAI,CAItBrB,0CAAyB,CAACuD,yBAAyB,EACnD3C,IAAI,CACP,CAACpN,IAAI,CAAC,UAAAgQ,CAAC;QAAA,OAAIA,CAAC,CAACC,MAAM;MAAA,EAAC;IACzB;EAAC;IAAArT,GAAA;IAAAE,KAAA,EAED,SAAAoT,eACIlF,SAAiB,EACjBmF,KAAc,EACdnE,OAAgB,EAChB2D,OAAsC,EACtCS,KAA0B,EACL;MACrB,IAAMhD,IAAqC,GAAG;QAAC3O,IAAI,EAAEuM,SAAS;QAAEgB,OAAO,EAAEA;MAAO,CAAC;MACjF,IAAImE,KAAK,KAAKlP,SAAS,EAAE;QACrBmM,IAAI,CAAC+C,KAAK,GAAGA,KAAK;MACtB;MACA,IAAIR,OAAO,EAAE;QACT,IAAIA,OAAO,CAACxF,QAAQ,CAACyF,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCzC,IAAI,CAAC0C,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHzC,IAAI,CAAC0C,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,IAAIS,KAAK,EAAE;QACPhD,IAAI,CAACgD,KAAK,GAAGA,KAAK;MACtB;MACA,OAAO,IAAI,CAAC7G,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAAC6D,iBAAiB,EAC3CjD,IAAI,CACP,CAACpN,IAAI,CAAC,UAAAgQ,CAAC;QAAA,OAAIA,CAAC,CAACC,MAAM;MAAA,EAAC;IACzB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAlBI;IAAArT,GAAA;IAAAE,KAAA;MAAA,IAAAwT,mBAAA,GAAAtL,iBAAA,eAAA3I,mBAAA,GAAAwG,IAAA,CAmBA,SAAA0N,QACIC,OAAe,EACf3F,MAAe,EACf4F,YAAqB,EACrBzF,SAAkB,EAClBmF,KAAc,EACdO,IAAa,EACbC,EAAW,EACXC,SAAqB;QAAA,IAAAC,QAAA,EAAAzD,IAAA;QAAA,OAAA/Q,mBAAA,GAAAqB,IAAA,UAAAoT,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAArN,IAAA,GAAAqN,QAAA,CAAA1P,IAAA;YAAA;cAAA0P,QAAA,CAAA1P,IAAA;cAAA,OAEE,IAAI,CAAC2P,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAE,QAAA,CAAApQ,IAAA;cAAA,IACTkQ,QAAQ,CAAC1G,QAAQ,CAAC8G,8BAAkB,CAACC,OAAO,CAAC;gBAAAH,QAAA,CAAA1P,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,2DAA2D,CAAC;YAAA;cAG1E8M,IAAyC,GAAG;gBAC9C+D,QAAQ,EAAEX,OAAO;gBACjBY,QAAQ,EAAEX,YAAY;gBACtBY,UAAU,EAAErG,SAAS;gBACrBkE,OAAO,EAAErE,MAAM;gBACf8F,EAAE,EAAFA,EAAE;gBACFD,IAAI,EAAJA,IAAI;gBACJP,KAAK,EAALA,KAAK;gBACLS,SAAS,EAATA;cACJ,CAAC;cAAA,OAAAG,QAAA,CAAAjQ,MAAA,WAEM,IAAI,CAACyI,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAAC8E,oBAAoB,EAC9ClE,IAAI,CACP;YAAA;YAAA;cAAA,OAAA2D,QAAA,CAAAlN,IAAA;UAAA;QAAA,GAAA0M,OAAA;MAAA,CACJ;MAAA,SAAAgB,mBAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAzB,mBAAA,CAAAnL,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAqM,kBAAA;IAAA;EAAA;IAAA3U,GAAA;IAAAE,KAAA,EAED,SAAAkV,gBACIhH,SAAiB,EACjBmF,KAAc,EACdlF,QAAiB,EACjB0E,OAAsC,EACjB;MACrB,IAAMvC,IAAqC,GAAG;QAC1C3O,IAAI,EAAEuM,SAAS;QACfoE,SAAS,EAAEnE,QAAQ,KAAKhK,SAAS,GAAG,IAAI,GAAGgK;MAC/C,CAAC;MACD,IAAIkF,KAAK,KAAKlP,SAAS,EAAE;QACrBmM,IAAI,CAAC+C,KAAK,GAAGA,KAAK;MACtB;MACA,IAAIR,OAAO,EAAE;QACT,IAAIA,OAAO,CAACxF,QAAQ,CAACyF,gBAAO,CAACC,OAAO,CAAC,EAAE;UACnCzC,IAAI,CAAC0C,QAAQ,GAAGF,gBAAO,CAACC,OAAO;QACnC,CAAC,MAAM;UACHzC,IAAI,CAAC0C,QAAQ,GAAGH,OAAO;QAC3B;MACJ;MACA,OAAO,IAAI,CAACpG,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAAC6D,iBAAiB,EAC3CjD,IAAI,CACP,CAACpN,IAAI,CAAC,UAAAgQ,CAAC;QAAA,OAAIA,CAAC,CAACC,MAAM;MAAA,EAAC;IACzB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAArT,GAAA;IAAAE,KAAA,EAOA,SAAAmV,sBAA6BC,QAAuB,EAAEC,SAAkB,EAAiB;MACrF,IAAID,QAAQ,KAAKE,wCAAoB,CAACC,KAAK,EAAE;QACzC,MAAM,IAAI/R,KAAK,CAAC,qCAAqC,CAAC;MAC1D;MACA,OAAO,IAAI,CAACiJ,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAAC8F,qBAAqB,EAAE;QAACC,MAAM,EAAEL,QAAQ;QAAEM,OAAO,EAAEL;MAAS,CAAC,CAC1F,CAACnS,IAAI,EAAE;IACZ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAPI;IAAApD,GAAA;IAAAE,KAAA,EAQA,SAAA2V,WAAkBC,GAAW,EAAiB;MAC1C,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,qBAAqB,CAAC,EAAE;QAChD,MAAM,IAAIrS,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MAEA,OAAO,IAAI,CAACiJ,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACoG,eAAe,EAAE;QAACF,GAAG,EAAHA;MAAG,CAAC,CACnD,CAAC1S,IAAI,EAAE;IACZ;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAApD,GAAA;IAAAE,KAAA,EAKA,SAAA+V,eAAA,EAA4D;MAAA,IAAAC,KAAA;MAAA,OAAA3K,mBAAA,eAAA9L,mBAAA,GAAAwG,IAAA,UAAAkQ,SAAA;QAAA,IAAAC,aAAA,EAAAC,mBAAA;QAAA,OAAA5W,mBAAA,GAAAqB,IAAA,UAAAwV,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzP,IAAA,GAAAyP,SAAA,CAAA9R,IAAA;YAAA;cAGlD4R,mBAAmB;gBAAA,IAAAG,IAAA,GAAApO,iBAAA,eAAA3I,mBAAA,GAAAwG,IAAA,CAAG,SAAAwQ,SAAOpG,EAA0C;kBAAA,OAAA5Q,mBAAA,GAAAqB,IAAA,UAAA4V,UAAAC,SAAA;oBAAA,kBAAAA,SAAA,CAAA7P,IAAA,GAAA6P,SAAA,CAAAlS,IAAA;sBAAA;wBACzE4L,EAAE,CAACC,cAAc,EAAE;wBACnB8F,aAAa,CAAC/F,EAAE,CAACE,MAAM,CAACC,IAAI,CAAC;wBAACmG,SAAA,CAAAlS,IAAA;wBAAA,OACxByR,KAAI,CAACvJ,SAAS,CAACgE,KAAK,CAAoCN,EAAE,CAACE,MAAM,EAAE,CAAC,CAAC,CAAC;sBAAA;sBAAA;wBAAA,OAAAoG,SAAA,CAAA1P,IAAA;oBAAA;kBAAA,GAAAwP,QAAA;gBAAA,CAC/E;gBAAA,gBAJKJ,mBAAmBA,CAAAO,GAAA;kBAAA,OAAAJ,IAAA,CAAAjO,KAAA,OAAAD,SAAA;gBAAA;cAAA,KAMzB;cACA;cACA4N,KAAI,CAAClJ,EAAE,WAAAkB,MAAA,CAAW4C,wCAAuB,CAAC+F,iBAAiB,GAAIR,mBAAmB,CAAC;;cAEnF;cAAA,MACIH,KAAI,CAACY,kBAAkB,KAAK,CAAC;gBAAAP,SAAA,CAAA9R,IAAA;gBAAA;cAAA;cAAA8R,SAAA,CAAAzP,IAAA;cAAAyP,SAAA,CAAA9R,IAAA;cAAA,OAAA4G,oBAAA,CAEnB6K,KAAI,CAACvJ,SAAS,CAACsE,IAAI,CAA6BrB,0CAAyB,CAACmH,gBAAgB,EAAE,CAAC,CAAC,CAAC;YAAA;cAAAR,SAAA,CAAA9R,IAAA;cAAA;YAAA;cAAA8R,SAAA,CAAAzP,IAAA;cAAAyP,SAAA,CAAAS,EAAA,GAAAT,SAAA;cAErGL,KAAI,CAACrF,GAAG,WAAA3C,MAAA,CAAW4C,wCAAuB,CAAC+F,iBAAiB,GAAIR,mBAAmB,CAAC;cAAC,MAAAE,SAAA,CAAAS,EAAA;YAAA;cAI7Fd,KAAI,CAACY,kBAAkB,EAAE;cAACP,SAAA,CAAAzP,IAAA;YAAA;cAAA,KAIf,IAAI;gBAAAyP,SAAA,CAAA9R,IAAA;gBAAA;cAAA;cAAA8R,SAAA,CAAA9R,IAAA;cAAA,OAAA4G,oBAAA,CACK,IAAI/E,OAAO,CAAc,UAAAvD,OAAO;gBAAA,OAAIqT,aAAa,GAAGrT,OAAO;cAAA,EAAC;YAAA;cAAAwT,SAAA,CAAA9R,IAAA;cAAxE,OAAA8R,SAAA,CAAAxS,IAAA;YAAwE;cAAAwS,SAAA,CAAA9R,IAAA;cAAA;YAAA;cAAA8R,SAAA,CAAAzP,IAAA;cAG5E;cACAoP,KAAI,CAACrF,GAAG,WAAA3C,MAAA,CAAW4C,wCAAuB,CAAC+F,iBAAiB,GAAIR,mBAAmB,CAAC;;cAEpF;cACA;cACAH,KAAI,CAACY,kBAAkB,EAAE;cAAC,MACtBZ,KAAI,CAACY,kBAAkB,KAAK,CAAC;gBAAAP,SAAA,CAAA9R,IAAA;gBAAA;cAAA;cAAA8R,SAAA,CAAA9R,IAAA;cAAA,OAAA4G,oBAAA,CACvB6K,KAAI,CAACvJ,SAAS,CAACsE,IAAI,CAA6BrB,0CAAyB,CAACqH,kBAAkB,EAAE,CAAC,CAAC,CAAC;YAAA;cAAA,OAAAV,SAAA,CAAA3O,MAAA;YAAA;YAAA;cAAA,OAAA2O,SAAA,CAAAtP,IAAA;UAAA;QAAA,GAAAkP,QAAA;MAAA;IAGnH;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAnW,GAAA;IAAAE,KAAA;MAAA,IAAAgX,oBAAA,GAAA9O,iBAAA,eAAA3I,mBAAA,GAAAwG,IAAA,CAMA,SAAAkR,SACIC,UAAkB,EAClB7D,KAAc;QAAA,IAAAU,QAAA,EAAAzD,IAAA;QAAA,OAAA/Q,mBAAA,GAAAqB,IAAA,UAAAuW,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAxQ,IAAA,GAAAwQ,SAAA,CAAA7S,IAAA;YAAA;cAAA6S,SAAA,CAAA7S,IAAA;cAAA,OAES,IAAI,CAAC2P,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAqD,SAAA,CAAAvT,IAAA;cAAA,IACTkQ,QAAQ,CAAC1G,QAAQ,CAAC8G,8BAAkB,CAACkD,OAAO,CAAC;gBAAAD,SAAA,CAAA7S,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,kEAAkE,CAAC;YAAA;cAGjF8M,IAA+C,GAAG;gBACpDgH,WAAW,EAAEJ,UAAU;gBACvB7D,KAAK,EAALA;cACJ,CAAC;cAAA,OAAA+D,SAAA,CAAApT,MAAA,WAEM,IAAI,CAACyI,SAAS,CAACsE,IAAI,CAGxBrB,0CAAyB,CAAC6H,0BAA0B,EAAEjH,IAAI,CAAC;YAAA;YAAA;cAAA,OAAA8G,SAAA,CAAArQ,IAAA;UAAA;QAAA,GAAAkQ,QAAA;MAAA,CAChE;MAAA,SAAAO,oBAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAV,oBAAA,CAAA3O,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAoP,mBAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAA1X,GAAA;IAAAE,KAAA;MAAA,IAAA2X,eAAA,GAAAzP,iBAAA,eAAA3I,mBAAA,GAAAwG,IAAA,CAIA,SAAA6R,SAAA;QAAA,IAAA7D,QAAA,EAAAzD,IAAA;QAAA,OAAA/Q,mBAAA,GAAAqB,IAAA,UAAAiX,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAlR,IAAA,GAAAkR,SAAA,CAAAvT,IAAA;YAAA;cAAAuT,SAAA,CAAAvT,IAAA;cAAA,OAC2B,IAAI,CAAC2P,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAA+D,SAAA,CAAAjU,IAAA;cAAA,IACTkQ,QAAQ,CAAC1G,QAAQ,CAAC8G,8BAAkB,CAAC4D,OAAO,CAAC;gBAAAD,SAAA,CAAAvT,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,6DAA6D,CAAC;YAAA;cAG5E8M,IAAgD,GAAG,CAAC,CAAC;cAAA,OAAAwH,SAAA,CAAA9T,MAAA,WAEpD,IAAI,CAACyI,SAAS,CAACsE,IAAI,CAGxBrB,0CAAyB,CAACsI,2BAA2B,EAAE1H,IAAI,CAAC;YAAA;YAAA;cAAA,OAAAwH,SAAA,CAAA/Q,IAAA;UAAA;QAAA,GAAA6Q,QAAA;MAAA,CACjE;MAAA,SAAAK,eAAA;QAAA,OAAAN,eAAA,CAAAtP,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAA6P,cAAA;IAAA;IAED;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAnY,GAAA;IAAAE,KAAA;MAAA,IAAAkY,WAAA,GAAAhQ,iBAAA,eAAA3I,mBAAA,GAAAwG,IAAA,CAMA,SAAAoS,SAAwBC,IAA4B;QAAA,IAAArE,QAAA,EAAAzD,IAAA;QAAA,OAAA/Q,mBAAA,GAAAqB,IAAA,UAAAyX,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA1R,IAAA,GAAA0R,SAAA,CAAA/T,IAAA;YAAA;cAAA+T,SAAA,CAAA/T,IAAA;cAAA,OACzB,IAAI,CAAC2P,iBAAiB,EAAE;YAAA;cAAzCH,QAAQ,GAAAuE,SAAA,CAAAzU,IAAA;cAAA,IACTkQ,QAAQ,CAAC1G,QAAQ,CAAC8G,8BAAkB,CAAC4D,OAAO,CAAC;gBAAAO,SAAA,CAAA/T,IAAA;gBAAA;cAAA;cAAA,MACxC,IAAIf,KAAK,CAAC,wDAAwD,CAAC;YAAA;cAGvE8M,IAA4C,GAAG;gBACjD8H,IAAI,EAAJA;cACJ,CAAC;cAAA,OAAAE,SAAA,CAAAtU,MAAA,WAEM,IAAI,CAACyI,SAAS,CAACsE,IAAI,CAGxBrB,0CAAyB,CAAC6I,uBAAuB,EAAEjI,IAAI,CAAC;YAAA;YAAA;cAAA,OAAAgI,SAAA,CAAAvR,IAAA;UAAA;QAAA,GAAAoR,QAAA;MAAA,CAC7D;MAAA,SAAAK,WAAAC,IAAA;QAAA,OAAAP,WAAA,CAAA7P,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAoQ,UAAA;IAAA;IAED;AACJ;AACA;AACA;EAHI;IAAA1Y,GAAA;IAAAE,KAAA,EAIA,SAAA0Y,MAAA,EAAe;MAAA,IAAAC,MAAA;MACX,IAAI,CAAClM,SAAS,CAACiM,KAAK,EAAE;MACtB,IAAI,CAACxE,iBAAiB,EAAE,CAAChR,IAAI,CAAC,UAAAyI,CAAC,EAAI;QAC/B,IAAIA,CAAC,CAAC0B,QAAQ,CAAC8G,8BAAkB,CAACyE,OAAO,CAAC,EAAE;UACxCD,MAAI,CAAClL,0BAA0B,GAAG,IAAI;QAC1C;MACJ,CAAC,CAAC;IACN;EAAC;IAAA3N,GAAA;IAAAE,KAAA,EAED,SAAA+M,cAAsBoD,EAAkC,EAAE;MACtD,IAAM0I,QAAQ,GAAG,IAAIC,WAAW,WAAA9K,MAAA,CAAWmC,EAAE,CAACE,MAAM,CAAC0I,MAAM,GAAI;QAC3D1I,MAAM,EAAEF,EAAE,CAACE,MAAM;QACjB2I,UAAU,EAAE;MAChB,CAAC,CAAC;MACF,IAAI,CAACC,IAAI,WAAAjL,MAAA,CAAWmC,EAAE,CAACE,MAAM,CAAC0I,MAAM,GAAIF,QAAQ,CAAC;MACjD,IAAI,CAACA,QAAQ,CAACK,gBAAgB,EAAE;QAC5B,QAAQ/I,EAAE,CAACE,MAAM,CAAC0I,MAAM;UACpB,KAAKnI,wCAAuB,CAACuI,oBAAoB;YAC7C,OAAO,IAAI,CAACC,aAAa,CAAkCjJ,EAAE,CAACE,MAAM,CAAC;UACzE,KAAKO,wCAAuB,CAACyI,YAAY;YACrC,OAAO,IAAI,CAACC,kBAAkB,CAA6BnJ,EAAE,CAACE,MAAM,CAAC;UACzE,KAAKO,wCAAuB,CAAC2I,gBAAgB;YACzC,OAAO,IAAI,CAAC9M,SAAS,CAACgE,KAAK,CAACN,EAAE,CAACE,MAAM,EAA8B,CAAC,CAAC,CAAC;UAAE;UAC5E,KAAKO,wCAAuB,CAAC4I,kBAAkB;YAC3C,OAAO,IAAI,CAAC/M,SAAS,CAACgE,KAAK,CAACN,EAAE,CAACE,MAAM,EAA8B,CAAC,CAAC,CAAC;UAAE;UAC5E;YACI,OAAO,IAAI,CAAC5D,SAAS,CAACgE,KAAK,CAACN,EAAE,CAACE,MAAM,EAA+B;cAChEjN,KAAK,EAAE;gBACHsN,OAAO,EAAE,iCAAiC,GAAGP,EAAE,CAACE,MAAM,CAAC0I;cAC3D;YACJ,CAAC,CAAC;QAAC;MAEf;IACJ;EAAC;IAAAjZ,GAAA;IAAAE,KAAA,EAED,SAAAoZ,cAAsBrN,OAAwC,EAAE;MAC5D,IAAI,CAACU,SAAS,CAACgE,KAAK,CAAuC1E,OAAO,EAAE;QAChE0N,kBAAkB,EAAEC;MACxB,CAAC,CAAC;IACN;EAAC;IAAA5Z,GAAA;IAAAE,KAAA,EAED,SAAAkU,kBAAA,EAAkD;MAAA,IAAAyF,MAAA;MAC9C,IAAIzM,KAAK,CAACC,OAAO,CAAC,IAAI,CAACyM,oBAAoB,CAAC,EAAE;QAC1C,OAAOxT,OAAO,CAACvD,OAAO,CAAC,IAAI,CAAC+W,oBAAoB,CAAC;MACrD;MAEA,OAAO,IAAI,CAACnN,SAAS,CAACsE,IAAI,CACtBrB,0CAAyB,CAACyJ,oBAAoB,EAAE,CAAC,CAAC,CACrD,CAACjW,IAAI,CAAC,UAAAgQ,CAAC,EAAI;QACRyG,MAAI,CAACC,oBAAoB,GAAG1G,CAAC,CAACuG,kBAAkB;QAChD,OAAOvG,CAAC,CAACuG,kBAAkB;MAC/B,CAAC,CAAC,SAAM,CAAC,UAAAhP,CAAC,EAAI;QACVoP,OAAO,CAACC,IAAI,CAAC,qDAAqD,EAAErP,CAAC,CAAC;QACtE,OAAO,EAAE;MACb,CAAC,CAAC;IACN;EAAC;IAAA3K,GAAA;IAAAE,KAAA,EAED,SAAAsZ,mBAA2BvN,OAAmC,EAAE;MAAA,IAAAgO,MAAA;MAC5D,IAAI,IAAI,CAACvM,oBAAoB,EAAE;QAC3B,OAAO,IAAI,CAACf,SAAS,CAACgE,KAAK,CAA8B1E,OAAO,EAAE;UAC9D3I,KAAK,EAAE;YACHsN,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN;;MAEA;MACA,OAAO,IAAI,CAACwD,iBAAiB,EAAE,CAAChR,IAAI,CAAC,UAAAyI,CAAC,EAAI;QACtC,IAAIA,CAAC,CAAC0B,QAAQ,CAAC8G,8BAAkB,CAAC6F,OAAO,CAAC,EAAE;UACxCD,MAAI,CAACE,IAAI,WAAAjM,MAAA,CACK4C,wCAAuB,CAAC4I,kBAAkB,GACpD,UAACrJ,EAAiD,EAAK;YACnD4J,MAAI,CAAC3M,oBAAoB,GAAG+C,EAAE,CAACE,MAAM,CAACC,IAAI,CAAC4J,QAAQ;YACnDH,MAAI,CAACd,IAAI,CAAC,OAAO,CAAC;UACtB,CAAC,CACJ;QACL,CAAC,MAAM;UACH;UACAc,MAAI,CAACd,IAAI,CAAC,OAAO,CAAC;QACtB;;QAEA;QACAc,MAAI,CAACvM,oBAAoB,GAAG,IAAI;QAChC,OAAOuM,MAAI,CAACtN,SAAS,CAACgE,KAAK,CAAkC1E,OAAO,EAAE;UAClE4B,YAAY,EAAEoM,MAAI,CAACzM;QACvB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EAAC;EAAA,OAAArB,SAAA;AAAA,EA1rB0BkO,oBAAY;AAAA3a,OAAA,CAAAyM,SAAA,GAAAA,SAAA"}