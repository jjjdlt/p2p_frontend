"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var TextArea_exports = {};
__export(TextArea_exports, {
  TextArea: () => TextArea,
  TextAreaFrame: () => TextAreaFrame
});
module.exports = __toCommonJS(TextArea_exports);
var import_jsx_runtime = require("react/jsx-runtime"), import_constants = require("@tamagui/constants"), import_core = require("@tamagui/core"), import_inputHelpers = require("../helpers/inputHelpers"), import_Input = require("./Input"), import_focusable = require("@tamagui/focusable"), import_react = require("react");
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var TextAreaFrame = (0, import_core.styled)(import_Input.InputFrame, {
  name: "TextArea",
  multiline: !0,
  // this attribute fixes firefox newline issue
  whiteSpace: "pre-wrap",
  variants: {
    unstyled: {
      false: _object_spread({
        height: "auto"
      }, import_Input.defaultStyles)
    },
    size: {
      "...size": import_inputHelpers.textAreaSizeVariant
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), TextArea = TextAreaFrame.styleable(function(propsIn, forwardedRef) {
  var ref = (0, import_react.useRef)(null), composedRefs = (0, import_core.useComposedRefs)(forwardedRef, ref), props = (0, import_Input.useInputProps)(propsIn, composedRefs), linesProp = (
    // web uses rows now, but native not caught up :/
    _define_property({}, import_constants.isWeb ? "rows" : "numberOfLines", propsIn.unstyled ? void 0 : 4)
  );
  return (0, import_react.useEffect)(function() {
    if (props.id && !props.disabled)
      return (0, import_focusable.registerFocusable)(props.id, {
        focusAndSelect: function() {
          var _ref_current;
          (_ref_current = ref.current) === null || _ref_current === void 0 || _ref_current.focus();
        },
        focus: function() {
        }
      });
  }, [
    props.id,
    props.disabled
  ]), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TextAreaFrame, _object_spread({}, linesProp, props));
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TextArea,
  TextAreaFrame
});
//# sourceMappingURL=TextArea.js.map
