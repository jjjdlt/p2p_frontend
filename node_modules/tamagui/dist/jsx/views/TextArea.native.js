import { jsx as _jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/constants";
import { styled, useComposedRefs } from "@tamagui/core";
import { textAreaSizeVariant } from "../helpers/inputHelpers";
import { InputFrame, defaultStyles, useInputProps } from "./Input";
import { registerFocusable } from "@tamagui/focusable";
import { useEffect, useRef } from "react";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var TextAreaFrame = styled(InputFrame, {
  name: "TextArea",
  multiline: !0,
  // this attribute fixes firefox newline issue
  whiteSpace: "pre-wrap",
  variants: {
    unstyled: {
      false: _object_spread({
        height: "auto"
      }, defaultStyles)
    },
    size: {
      "...size": textAreaSizeVariant
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}), TextArea = TextAreaFrame.styleable(function(propsIn, forwardedRef) {
  var ref = useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), props = useInputProps(propsIn, composedRefs), linesProp = (
    // web uses rows now, but native not caught up :/
    _define_property({}, isWeb ? "rows" : "numberOfLines", propsIn.unstyled ? void 0 : 4)
  );
  return useEffect(function() {
    if (props.id && !props.disabled)
      return registerFocusable(props.id, {
        focusAndSelect: function() {
          var _ref_current;
          (_ref_current = ref.current) === null || _ref_current === void 0 || _ref_current.focus();
        },
        focus: function() {
        }
      });
  }, [
    props.id,
    props.disabled
  ]), /* @__PURE__ */ _jsx(TextAreaFrame, _object_spread({}, linesProp, props));
});
export {
  TextArea,
  TextAreaFrame
};
//# sourceMappingURL=TextArea.js.map
