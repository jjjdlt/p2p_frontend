import { AnimatedEvent, attachNativeEvent } from "./AnimatedEvent";
import AnimatedImplementation from "./AnimatedImplementation";
import createAnimatedComponent from "./createAnimatedComponent";
import AnimatedColor from "./nodes/AnimatedColor";
import AnimatedInterpolation from "./nodes/AnimatedInterpolation";
import AnimatedNode from "./nodes/AnimatedNode";
import AnimatedValue from "./nodes/AnimatedValue";
import AnimatedValueXY from "./nodes/AnimatedValueXY";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
var inAnimationCallback = !1;
function mockAnimationStart(start) {
  return function(callback) {
    var guardedCallback = callback == null ? callback : function() {
      if (inAnimationCallback) {
        console.warn("Ignoring recursive animation callback when running mock animations");
        return;
      }
      inAnimationCallback = !0;
      try {
        callback.apply(void 0, arguments);
      } finally {
        inAnimationCallback = !1;
      }
    };
    start(guardedCallback);
  };
}
var emptyAnimation = {
  start: function() {
  },
  stop: function() {
  },
  reset: function() {
  },
  _startNativeLoop: function() {
  },
  _isUsingNativeDriver: function() {
    return !1;
  }
}, mockCompositeAnimation = function(animations) {
  return _object_spread_props(_object_spread({}, emptyAnimation), {
    start: mockAnimationStart(function(callback) {
      animations.forEach(function(animation) {
        return animation.start();
      }), callback == null || callback({
        finished: !0
      });
    })
  });
}, spring = function(value, config) {
  var anyValue = value;
  return _object_spread_props(_object_spread({}, emptyAnimation), {
    start: mockAnimationStart(function(callback) {
      anyValue.setValue(config.toValue), callback == null || callback({
        finished: !0
      });
    })
  });
}, timing = function(value, config) {
  var anyValue = value;
  return _object_spread_props(_object_spread({}, emptyAnimation), {
    start: mockAnimationStart(function(callback) {
      anyValue.setValue(config.toValue), callback == null || callback({
        finished: !0
      });
    })
  });
}, decay = function(value, config) {
  return emptyAnimation;
}, sequence = function(animations) {
  return mockCompositeAnimation(animations);
}, parallel = function(animations, config) {
  return mockCompositeAnimation(animations);
}, delay = function(time) {
  return emptyAnimation;
}, stagger = function(time, animations) {
  return mockCompositeAnimation(animations);
}, loop = function(animation, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$iterations = _ref.iterations, iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;
  return emptyAnimation;
}, AnimatedMock_default = {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Color: AnimatedColor,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay,
  timing,
  spring,
  add: AnimatedImplementation.add,
  subtract: AnimatedImplementation.subtract,
  divide: AnimatedImplementation.divide,
  multiply: AnimatedImplementation.multiply,
  modulo: AnimatedImplementation.modulo,
  diffClamp: AnimatedImplementation.diffClamp,
  delay,
  sequence,
  parallel,
  stagger,
  loop,
  event: AnimatedImplementation.event,
  createAnimatedComponent,
  attachNativeEvent,
  forkEvent: AnimatedImplementation.forkEvent,
  unforkEvent: AnimatedImplementation.unforkEvent,
  Event: AnimatedEvent
};
export {
  AnimatedMock_default as default
};
//# sourceMappingURL=AnimatedMock.js.map
