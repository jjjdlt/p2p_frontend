import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
import { StyleSheet, useMergeRefs } from "react-native-web-internals";
import View from "../View/index";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function normalizeScrollEvent(e) {
  return {
    nativeEvent: {
      contentOffset: {
        get x() {
          return e.target.scrollLeft;
        },
        get y() {
          return e.target.scrollTop;
        }
      },
      contentSize: {
        get height() {
          return e.target.scrollHeight;
        },
        get width() {
          return e.target.scrollWidth;
        }
      },
      layoutMeasurement: {
        get height() {
          return e.target.offsetHeight;
        },
        get width() {
          return e.target.offsetWidth;
        }
      }
    },
    timeStamp: Date.now()
  };
}
function shouldEmitScrollEvent(lastTick, eventThrottle) {
  var timeSinceLastTick = Date.now() - lastTick;
  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;
}
var ScrollViewBase = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var createPreventableScrollHandler = function(handler) {
    return function(e) {
      scrollEnabled && handler && handler(e);
    };
  }, handleScroll = function(e) {
    e.stopPropagation(), e.target === scrollRef.current && (e.persist(), scrollTimeout.current != null && clearTimeout(scrollTimeout.current), scrollTimeout.current = setTimeout(function() {
      handleScrollEnd(e);
    }, 100), scrollState.current.isScrolling ? shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle) && handleScrollTick(e) : handleScrollStart(e));
  }, handleScrollStart = function(e) {
    scrollState.current.isScrolling = !0, handleScrollTick(e);
  }, handleScrollTick = function(e) {
    scrollState.current.scrollLastTick = Date.now(), onScroll && onScroll(normalizeScrollEvent(e));
  }, handleScrollEnd = function(e) {
    scrollState.current.isScrolling = !1, onScroll && onScroll(normalizeScrollEvent(e));
  }, onScroll = props.onScroll, onTouchMove = props.onTouchMove, onWheel = props.onWheel, _props_scrollEnabled = props.scrollEnabled, scrollEnabled = _props_scrollEnabled === void 0 ? !0 : _props_scrollEnabled, _props_scrollEventThrottle = props.scrollEventThrottle, scrollEventThrottle = _props_scrollEventThrottle === void 0 ? 0 : _props_scrollEventThrottle, showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator, showsVerticalScrollIndicator = props.showsVerticalScrollIndicator, style = props.style, rest = _object_without_properties(props, [
    "onScroll",
    "onTouchMove",
    "onWheel",
    "scrollEnabled",
    "scrollEventThrottle",
    "showsHorizontalScrollIndicator",
    "showsVerticalScrollIndicator",
    "style"
  ]), scrollState = React.useRef({
    isScrolling: !1,
    scrollLastTick: 0
  }), scrollTimeout = React.useRef(null), scrollRef = React.useRef(null), hideScrollbar = showsHorizontalScrollIndicator === !1 || showsVerticalScrollIndicator === !1;
  return /* @__PURE__ */ _jsx(View, _object_spread_props(_object_spread({}, rest), {
    onScroll: handleScroll,
    onTouchMove: createPreventableScrollHandler(onTouchMove),
    onWheel: createPreventableScrollHandler(onWheel),
    ref: useMergeRefs(scrollRef, forwardedRef),
    style: [
      style,
      !scrollEnabled && styles.scrollDisabled,
      hideScrollbar && styles.hideScrollbar
    ]
  }));
}), styles = StyleSheet.create({
  scrollDisabled: {
    overflowX: "hidden",
    overflowY: "hidden",
    touchAction: "none"
  },
  hideScrollbar: {
    scrollbarWidth: "none"
  }
}), ScrollViewBase_default = ScrollViewBase;
export {
  ScrollViewBase_default as default
};
//# sourceMappingURL=ScrollViewBase.js.map
