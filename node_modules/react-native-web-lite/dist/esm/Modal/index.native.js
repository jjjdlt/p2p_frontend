import * as React from "react";
import ModalAnimation from "./ModalAnimation";
import ModalContent from "./ModalContent";
import ModalFocusTrap from "./ModalFocusTrap";
import ModalPortal from "./ModalPortal";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var uniqueModalIdentifier = 0, activeModalStack = [], activeModalListeners = {};
function notifyActiveModalListeners() {
  if (activeModalStack.length !== 0) {
    var activeModalId = activeModalStack[activeModalStack.length - 1];
    activeModalStack.forEach(function(modalId) {
      modalId in activeModalListeners && activeModalListeners[modalId](modalId === activeModalId);
    });
  }
}
function removeActiveModal(modalId) {
  modalId in activeModalListeners && (activeModalListeners[modalId](!1), delete activeModalListeners[modalId]);
  var index = activeModalStack.indexOf(modalId);
  index !== -1 && (activeModalStack.splice(index, 1), notifyActiveModalListeners());
}
function addActiveModal(modalId, listener) {
  removeActiveModal(modalId), activeModalStack.push(modalId), activeModalListeners[modalId] = listener, notifyActiveModalListeners();
}
var Modal = /* @__PURE__ */ React.forwardRef(function(props, forwardedRef) {
  var animationType = props.animationType, children = props.children, onDismiss = props.onDismiss, onRequestClose = props.onRequestClose, onShow = props.onShow, transparent = props.transparent, _props_visible = props.visible, visible = _props_visible === void 0 ? !0 : _props_visible, rest = _object_without_properties(props, [
    "animationType",
    "children",
    "onDismiss",
    "onRequestClose",
    "onShow",
    "transparent",
    "visible"
  ]), modalId = React.useMemo(function() {
    return uniqueModalIdentifier++;
  }, []), _React$useState = React.useState(!1), isActive = _React$useState[0], setIsActive = _React$useState[1], onDismissCallback = React.useCallback(function() {
    removeActiveModal(modalId), onDismiss && onDismiss();
  }, [
    modalId,
    onDismiss
  ]), onShowCallback = React.useCallback(function() {
    addActiveModal(modalId, setIsActive), onShow && onShow();
  }, [
    modalId,
    onShow
  ]);
  return React.useEffect(function() {
    return function() {
      return removeActiveModal(modalId);
    };
  }, [
    modalId
  ]), /* @__PURE__ */ React.createElement(ModalPortal, null, /* @__PURE__ */ React.createElement(ModalAnimation, {
    animationType,
    onDismiss: onDismissCallback,
    onShow: onShowCallback,
    visible
  }, /* @__PURE__ */ React.createElement(ModalFocusTrap, {
    active: isActive
  }, /* @__PURE__ */ React.createElement(ModalContent, _object_spread_props(_object_spread({}, rest), {
    active: isActive,
    onRequestClose,
    ref: forwardedRef,
    transparent
  }), children))));
}), Modal_default = Modal;
export {
  Modal_default as default
};
//# sourceMappingURL=index.js.map
