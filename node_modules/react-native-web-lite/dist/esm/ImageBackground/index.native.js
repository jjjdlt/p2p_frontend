import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import "react";
import { forwardRef } from "react";
import { StyleSheet } from "react-native-web-internals";
import Image from "../Image/index";
import View from "../View/index";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
var emptyObject = {}, ImageBackground = /* @__PURE__ */ forwardRef(function(props, forwardedRef) {
  var children = props.children, _props_style = props.style, style = _props_style === void 0 ? emptyObject : _props_style, imageStyle = props.imageStyle, imageRef = props.imageRef, rest = _object_without_properties(props, [
    "children",
    "style",
    "imageStyle",
    "imageRef"
  ]), _StyleSheet_flatten = StyleSheet.flatten(style), height = _StyleSheet_flatten.height, width = _StyleSheet_flatten.width;
  return /* @__PURE__ */ _jsxs(View, {
    ref: forwardedRef,
    style,
    children: [
      /* @__PURE__ */ _jsx(Image, _object_spread_props(_object_spread({}, rest), {
        ref: imageRef,
        style: [
          {
            // Temporary Workaround:
            // Current (imperfect yet) implementation of <Image> overwrites width and height styles
            // (which is not quite correct), and these styles conflict with explicitly set styles
            // of <ImageBackground> and with our internal layout model here.
            // So, we have to proxy/reapply these styles explicitly for actual <Image> component.
            // This workaround should be removed after implementing proper support of
            // intrinsic content size of the <Image>.
            width,
            height,
            zIndex: -1
          },
          StyleSheet.absoluteFill,
          imageStyle
        ]
      })),
      children
    ]
  });
});
ImageBackground.displayName = "ImageBackground";
var ImageBackground_default = ImageBackground;
export {
  ImageBackground_default as default
};
//# sourceMappingURL=index.js.map
