import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
import { useCallback, useMemo, useRef, useState } from "react";
import { StyleSheet, useMergeRefs, usePressEvents } from "react-native-web-internals";
import View from "./View";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function TouchableOpacity(props, forwardedRef) {
  var activeOpacity = props.activeOpacity, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination, style = props.style, rest = _object_without_properties(props, [
    "activeOpacity",
    "delayPressIn",
    "delayPressOut",
    "delayLongPress",
    "disabled",
    "focusable",
    "onLongPress",
    "onPress",
    "onPressIn",
    "onPressOut",
    "rejectResponderTermination",
    "style"
  ]), hostRef = useRef(null), setRef = useMergeRefs(forwardedRef, hostRef), _useState = _sliced_to_array(useState("0s"), 2), duration = _useState[0], setDuration = _useState[1], _useState1 = _sliced_to_array(useState(null), 2), opacityOverride = _useState1[0], setOpacityOverride = _useState1[1], setOpacityTo = useCallback(function(value, duration2) {
    setOpacityOverride(value), setDuration(duration2 ? "".concat(duration2 / 1e3, "s") : "0s");
  }, [
    setOpacityOverride,
    setDuration
  ]), setOpacityActive = useCallback(function(duration2) {
    setOpacityTo(activeOpacity ?? 0.2, duration2);
  }, [
    activeOpacity,
    setOpacityTo
  ]), setOpacityInactive = useCallback(function(duration2) {
    setOpacityTo(null, duration2);
  }, [
    setOpacityTo
  ]), pressConfig = useMemo(function() {
    return {
      cancelable: !rejectResponderTermination,
      disabled,
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress,
      onPress,
      onPressStart: function(event) {
        var isGrant = event.dispatchConfig != null ? event.dispatchConfig.registrationName === "onResponderGrant" : event.type === "keydown";
        setOpacityActive(isGrant ? 0 : 150), onPressIn != null && onPressIn(event);
      },
      onPressEnd: function(event) {
        setOpacityInactive(250), onPressOut != null && onPressOut(event);
      }
    };
  }, [
    delayLongPress,
    delayPressIn,
    delayPressOut,
    disabled,
    onLongPress,
    onPress,
    onPressIn,
    onPressOut,
    rejectResponderTermination,
    setOpacityActive,
    setOpacityInactive
  ]), pressEventHandlers = usePressEvents(hostRef, pressConfig);
  return /* @__PURE__ */ _jsx(View, _object_spread_props(_object_spread({}, rest, pressEventHandlers), {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== !1,
    ref: setRef,
    style: [
      styles.root,
      !disabled && styles.actionable,
      style,
      opacityOverride != null && {
        opacity: opacityOverride
      },
      {
        transitionDuration: duration
      }
    ]
  }));
}
var styles = StyleSheet.create({
  root: {
    transitionProperty: "opacity",
    transitionDuration: "0.15s",
    userSelect: "none"
  },
  actionable: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
}), MemoedTouchableOpacity = /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef(TouchableOpacity));
MemoedTouchableOpacity.displayName = "TouchableOpacity";
var TouchableOpacity_default = MemoedTouchableOpacity;
export {
  TouchableOpacity_default as default
};
//# sourceMappingURL=TouchableOpacity.js.map
