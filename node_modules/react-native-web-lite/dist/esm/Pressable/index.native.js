import { jsx as _jsx } from "react/jsx-runtime";
import { usePressEvents } from "@tamagui/react-native-use-pressable";
import * as React from "react";
import { forwardRef, memo, useMemo, useRef, useState } from "react";
import { StyleSheet } from "react-native-web-internals";
import { useHover, useMergeRefs } from "react-native-web-internals";
import View from "../View/index";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
function Pressable(props, forwardedRef) {
  var children = props.children, delayLongPress = props.delayLongPress, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, disabled = props.disabled, focusable = props.focusable, onBlur = props.onBlur, onContextMenu = props.onContextMenu, onFocus = props.onFocus, onHoverIn = props.onHoverIn, onHoverOut = props.onHoverOut, onKeyDown = props.onKeyDown, onLongPress = props.onLongPress, onPress = props.onPress, onPressMove = props.onPressMove, onPressIn = props.onPressIn, onPressOut = props.onPressOut, style = props.style, testOnly_hovered = props.testOnly_hovered, testOnly_pressed = props.testOnly_pressed, rest = _object_without_properties(props, [
    "children",
    "delayLongPress",
    "delayPressIn",
    "delayPressOut",
    "disabled",
    "focusable",
    "onBlur",
    "onContextMenu",
    "onFocus",
    "onHoverIn",
    "onHoverOut",
    "onKeyDown",
    "onLongPress",
    "onPress",
    "onPressMove",
    "onPressIn",
    "onPressOut",
    "style",
    "testOnly_hovered",
    "testOnly_pressed"
  ]), _useForceableState = _sliced_to_array(useForceableState(testOnly_hovered === !0), 2), hovered = _useForceableState[0], setHovered = _useForceableState[1], _useForceableState1 = _sliced_to_array(useForceableState(!1), 2), focused = _useForceableState1[0], setFocused = _useForceableState1[1], _useForceableState2 = _sliced_to_array(useForceableState(testOnly_pressed === !0), 2), pressed = _useForceableState2[0], setPressed = _useForceableState2[1], hostRef = useRef(null), setRef = useMergeRefs(forwardedRef, hostRef), pressConfig = useMemo(function() {
    return {
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      disabled,
      onLongPress,
      onPress,
      onPressChange: setPressed,
      onPressStart: onPressIn,
      onPressMove,
      onPressEnd: onPressOut
    };
  }, [
    delayLongPress,
    delayPressIn,
    delayPressOut,
    disabled,
    onLongPress,
    onPress,
    onPressIn,
    onPressMove,
    onPressOut,
    setPressed
  ]), pressEventHandlers = usePressEvents(hostRef, pressConfig), onContextMenuPress = pressEventHandlers.onContextMenu, onKeyDownPress = pressEventHandlers.onKeyDown;
  useHover(hostRef, {
    contain: !0,
    disabled,
    onHoverChange: setHovered,
    onHoverStart: onHoverIn,
    onHoverEnd: onHoverOut
  });
  var interactionState = {
    hovered,
    focused,
    pressed
  }, blurHandler = React.useCallback(function(e) {
    disabled || e.nativeEvent.target === hostRef.current && (setFocused(!1), onBlur != null && onBlur(e));
  }, [
    disabled,
    hostRef,
    setFocused,
    onBlur
  ]), focusHandler = React.useCallback(function(e) {
    disabled || e.nativeEvent.target === hostRef.current && (setFocused(!0), onFocus != null && onFocus(e));
  }, [
    disabled,
    hostRef,
    setFocused,
    onFocus
  ]), contextMenuHandler = React.useCallback(function(e) {
    onContextMenuPress != null && onContextMenuPress(e), onContextMenu != null && onContextMenu(e);
  }, [
    onContextMenu,
    onContextMenuPress
  ]), keyDownHandler = React.useCallback(function(e) {
    onKeyDownPress != null && onKeyDownPress(e), onKeyDown != null && onKeyDown(e);
  }, [
    onKeyDown,
    onKeyDownPress
  ]);
  return /* @__PURE__ */ _jsx(View, _object_spread_props(_object_spread({}, rest, pressEventHandlers), {
    accessibilityDisabled: disabled,
    focusable: !disabled && focusable !== !1,
    onBlur: blurHandler,
    onContextMenu: contextMenuHandler,
    onFocus: focusHandler,
    onKeyDown: keyDownHandler,
    pointerEvents: disabled ? "none" : rest.pointerEvents,
    ref: setRef,
    style: [
      !disabled && styles.root,
      typeof style == "function" ? style(interactionState) : style
    ],
    children: typeof children == "function" ? children(interactionState) : children
  }));
}
function useForceableState(forced) {
  var _useState = _sliced_to_array(useState(!1), 2), bool = _useState[0], setBool = _useState[1];
  return [
    bool || forced,
    setBool
  ];
}
var styles = StyleSheet.create({
  root: {
    cursor: "pointer",
    touchAction: "manipulation"
  }
}), MemoedPressable = /* @__PURE__ */ memo(/* @__PURE__ */ forwardRef(Pressable));
MemoedPressable.displayName = "Pressable";
var Pressable_default = MemoedPressable;
export {
  Pressable_default as default
};
//# sourceMappingURL=index.js.map
