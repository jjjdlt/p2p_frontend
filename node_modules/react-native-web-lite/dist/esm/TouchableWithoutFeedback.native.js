import * as React from "react";
import { useMemo, useRef } from "react";
import { pick, useMergeRefs, usePressEvents } from "react-native-web-internals";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var forwardPropsList = {
  accessibilityDisabled: !0,
  accessibilityLabel: !0,
  accessibilityLiveRegion: !0,
  accessibilityRole: !0,
  accessibilityState: !0,
  accessibilityValue: !0,
  children: !0,
  disabled: !0,
  focusable: !0,
  nativeID: !0,
  onBlur: !0,
  onFocus: !0,
  onLayout: !0,
  testID: !0
}, pickProps = function(props) {
  return pick(props, forwardPropsList);
};
function TouchableWithoutFeedback(props, forwardedRef) {
  var _React, delayPressIn = props.delayPressIn, delayPressOut = props.delayPressOut, delayLongPress = props.delayLongPress, disabled = props.disabled, focusable = props.focusable, onLongPress = props.onLongPress, onPress = props.onPress, onPressIn = props.onPressIn, onPressOut = props.onPressOut, rejectResponderTermination = props.rejectResponderTermination, hostRef = useRef(null), pressConfig = useMemo(function() {
    return {
      cancelable: !rejectResponderTermination,
      disabled,
      delayLongPress,
      delayPressStart: delayPressIn,
      delayPressEnd: delayPressOut,
      onLongPress,
      onPress,
      onPressStart: onPressIn,
      onPressEnd: onPressOut
    };
  }, [
    disabled,
    delayPressIn,
    delayPressOut,
    delayLongPress,
    onLongPress,
    onPress,
    onPressIn,
    onPressOut,
    rejectResponderTermination
  ]), pressEventHandlers = usePressEvents(hostRef, pressConfig), element = React.Children.only(props.children), children = [
    element.props.children
  ], supportedProps = pickProps(props);
  supportedProps.accessibilityDisabled = disabled, supportedProps.focusable = !disabled && focusable !== !1, supportedProps.ref = useMergeRefs(forwardedRef, hostRef, element.ref);
  var elementProps = Object.assign(supportedProps, pressEventHandlers);
  return (_React = React).cloneElement.apply(_React, [
    element,
    elementProps
  ].concat(_to_consumable_array(children)));
}
var MemoedTouchableWithoutFeedback = /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef(TouchableWithoutFeedback));
MemoedTouchableWithoutFeedback.displayName = "TouchableWithoutFeedback";
var TouchableWithoutFeedback_default = MemoedTouchableWithoutFeedback;
export {
  TouchableWithoutFeedback_default as default
};
//# sourceMappingURL=TouchableWithoutFeedback.js.map
