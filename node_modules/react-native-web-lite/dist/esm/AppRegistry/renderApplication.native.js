import { jsx as _jsx } from "react/jsx-runtime";
import "react";
import { StyleSheet } from "react-native-web-internals";
import { invariant } from "react-native-web-internals";
import renderLegacy, { hydrate, hydrateLegacy, render } from "../render/index";
import AppContainer from "./AppContainer";
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys2 = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys2.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _object_spread_props(target, source) {
  return source = source ?? {}, Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
  }), target;
}
function renderApplication(RootComponent) {
  var WrapperComponent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
  }, options = arguments.length > 3 ? arguments[3] : void 0, shouldHydrate = options.hydrate, initialProps = options.initialProps, mode = options.mode, rootTag = options.rootTag, renderFn = shouldHydrate ? mode === "concurrent" ? hydrate : hydrateLegacy : mode === "concurrent" ? render : renderLegacy;
  return invariant(rootTag, "Expect to have a valid rootTag, instead got ", rootTag), renderFn(/* @__PURE__ */ _jsx(AppContainer, {
    WrapperComponent,
    ref: callback,
    rootTag,
    children: /* @__PURE__ */ _jsx(RootComponent, _object_spread({}, initialProps))
  }), rootTag);
}
function getApplication(RootComponent, initialProps, WrapperComponent) {
  var element = /* @__PURE__ */ _jsx(AppContainer, {
    WrapperComponent,
    rootTag: {},
    children: /* @__PURE__ */ _jsx(RootComponent, _object_spread({}, initialProps))
  }), getStyleElement = function(props) {
    var sheet = StyleSheet.getSheet();
    return /* @__PURE__ */ _jsx("style", _object_spread_props(_object_spread({}, props), {
      dangerouslySetInnerHTML: {
        __html: sheet.textContent
      },
      id: sheet.id
    }));
  };
  return {
    element,
    getStyleElement
  };
}
export {
  renderApplication as default,
  getApplication
};
//# sourceMappingURL=renderApplication.js.map
