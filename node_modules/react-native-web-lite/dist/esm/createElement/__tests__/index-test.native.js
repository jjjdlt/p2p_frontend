import { jsx as _jsx } from "react/jsx-runtime";
import { render } from "@testing-library/react";
import "react";
import createElement from "..";
function getAttribute(container, attribute) {
  return container.firstChild.getAttribute(attribute);
}
function getProperty(container, prop) {
  return container.firstChild[prop];
}
describe("exports/createElement/index.js", function() {
  test("renders different DOM elements", function() {
    var container = render(createElement("span")).container;
    expect(container.firstChild).toMatchSnapshot(), container = render(createElement("main")).container, expect(container.firstChild).toMatchSnapshot(), container = render(createElement("svg", {
      children: createElement("image", {
        href: "#href"
      })
    })).container, expect(container.firstChild).toMatchSnapshot();
  }), describe('prop "accessibilityRole"', function() {
    test("string component type", function() {
      var container = render(createElement("span", {
        accessibilityRole: "link"
      })).container;
      expect(container.firstChild.nodeName).toBe("SPAN");
    }), test("function component type", function() {
      var Custom = function() {
        return /* @__PURE__ */ _jsx("div", {});
      }, container = render(createElement(Custom, {
        accessibilityRole: "link"
      })).container;
      expect(container.firstChild.nodeName).toBe("DIV");
    });
  }), describe("accessibility props", function() {
    test("accessibilityActiveDescendant", function() {
      var _render = render(createElement("div", {
        accessibilityActiveDescendant: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-activedescendant")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityActiveDescendant: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-activedescendant")).toBe("abc");
    }), test("accessibilityAtomic", function() {
      var _render = render(createElement("div", {
        accessibilityAtomic: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-atomic")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityAtomic: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-atomic")).toBe("true");
    }), test("accessibilityAutoComplete", function() {
      var _render = render(createElement("div", {
        accessibilityAutoComplete: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-autocomplete")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityAutoComplete: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-autocomplete")).toBe("true");
    }), test("accessibilityBusy", function() {
      var _render = render(createElement("div", {
        accessibilityBusy: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-busy")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityBusy: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-busy")).toBe("true");
    }), test("accessibilityChecked", function() {
      var _render = render(createElement("div", {
        accessibilityChecked: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-checked")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityChecked: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-checked")).toBe("true");
    }), test("accessibilityColumnCount", function() {
      var _render = render(createElement("div", {
        accessibilityColumnCount: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-colcount")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityColumnCount: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-colcount")).toBe("5");
    }), test("accessibilityColumnIndex", function() {
      var _render = render(createElement("div", {
        accessibilityColumnIndex: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-colindex")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityColumnIndex: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-colindex")).toBe("5");
    }), test("accessibilityColumnSpan", function() {
      var _render = render(createElement("div", {
        accessibilityColumnSpan: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-colspan")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityColumnSpan: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-colspan")).toBe("5");
    }), test("accessibilityControls", function() {
      var _render = render(createElement("div", {
        accessibilityControls: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-controls")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityControls: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-controls")).toBe("abc");
      var _render2 = render(createElement("div", {
        accessibilityControls: [
          "abc",
          "def"
        ]
      })), hasMultipleValues = _render2.container;
      expect(getAttribute(hasMultipleValues, "aria-controls")).toBe("abc def");
    }), test("accessibilityCurrent", function() {
      var _render = render(createElement("div", {
        accessibilityCurrent: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-current")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityCurrent: "page"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-current")).toBe("page");
    }), test("accessibilityDescribedBy", function() {
      var _render = render(createElement("div", {
        accessibilityDescribedBy: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-describedby")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityDescribedBy: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-describedby")).toBe("abc");
      var _render2 = render(createElement("div", {
        accessibilityDescribedBy: [
          "abc",
          "def"
        ]
      })), hasMultipleValues = _render2.container;
      expect(getAttribute(hasMultipleValues, "aria-describedby")).toBe("abc def");
    }), test("accessibilityDetails", function() {
      var _render = render(createElement("div", {
        accessibilityDetails: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-details")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityDetails: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-details")).toBe("abc");
    }), test("accessibilityDisabled", function() {
      var _render = render(createElement("button", {
        accessibilityDisabled: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-disabled")).toBeNull(), expect(getProperty(isEmpty, "disabled")).toBe(!1);
      var _render1 = render(createElement("button", {
        accessibilityDisabled: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-disabled")).toBe("true"), expect(getProperty(hasValue, "disabled")).toBe(!0);
    }), test("accessibilityErrorMessage", function() {
      var _render = render(createElement("div", {
        accessibilityErrorMessage: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-errormessage")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityErrorMessage: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-errormessage")).toBe("abc");
    }), test("accessibilityExpanded", function() {
      var _render = render(createElement("div", {
        accessibilityExpanded: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-expanded")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityExpanded: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-expanded")).toBe("true");
    }), test("accessibilityFlowTo", function() {
      var _render = render(createElement("div", {
        accessibilityFlowTo: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-flowto")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityFlowTo: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-flowto")).toBe("abc");
      var _render2 = render(createElement("div", {
        accessibilityFlowTo: [
          "abc",
          "def"
        ]
      })), hasMultipleValues = _render2.container;
      expect(getAttribute(hasMultipleValues, "aria-flowto")).toBe("abc def");
    }), test("accessibilityHasPopup", function() {
      var _render = render(createElement("div", {
        accessibilityHasPopup: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-haspopup")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityHasPopup: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-haspopup")).toBe("true");
    }), test("accessibilityHidden", function() {
      var _render = render(createElement("div", {
        accessibilityHidden: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-hidden")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityHidden: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-hidden")).toBe("true");
    }), test("accessibilityInvalid", function() {
      var _render = render(createElement("input", {
        accessibilityInvalid: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-invalid")).toBeNull();
      var _render1 = render(createElement("input", {
        accessibilityInvalid: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-invalid")).toBe("true");
    }), test("accessibilityKeyShortcuts", function() {
      var _render = render(createElement("div", {
        accessibilityKeyShortcuts: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-keyshortcuts")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityKeyShortcuts: [
          "ArrowUp",
          "Enter",
          "Space",
          "Alt+Shift+T"
        ]
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-keyshortcuts")).toBe("ArrowUp Enter Space Alt+Shift+T");
    }), test("accessibilityLabel", function() {
      var _render = render(createElement("div", {
        accessibilityLabel: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-label")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityLabel: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-label")).toBe("abc");
    }), test("accessibilityLabelledBy", function() {
      var _render = render(createElement("div", {
        accessibilityLabelledBy: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-labelledby")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityLabelledBy: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-labelledby")).toBe("abc");
      var _render2 = render(createElement("div", {
        accessibilityLabelledBy: [
          "abc",
          "def"
        ]
      })), hasMultipleValues = _render2.container;
      expect(getAttribute(hasMultipleValues, "aria-labelledby")).toBe("abc def");
    }), test("accessibilityLevel", function() {
      var _render = render(createElement("div", {
        accessibilityLevel: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-level")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityLevel: 3
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-level")).toBe("3");
    }), test("accessibilityLiveRegion", function() {
      var _render = render(createElement("div", {
        accessibilityLiveRegion: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-live")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityLiveRegion: "polite"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-live")).toBe("polite");
    }), test("accessibilityModal", function() {
      var _render = render(createElement("div", {
        accessibilityModal: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-modal")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityModal: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-modal")).toBe("true");
    }), test("accessibilityMultiline", function() {
      var _render = render(createElement("div", {
        accessibilityMultiline: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-multiline")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityMultiline: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-multiline")).toBe("true");
    }), test("accessibilityMultiSelectable", function() {
      var _render = render(createElement("div", {
        accessibilityMultiSelectable: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-multiselectable")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityMultiSelectable: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-multiselectable")).toBe("true");
    }), test("accessibilityOrientation", function() {
      var _render = render(createElement("div", {
        accessibilityOrientation: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-orientation")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityOrientation: "vertical"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-orientation")).toBe("vertical");
    }), test("accessibilityOwns", function() {
      var _render = render(createElement("div", {
        accessibilityOwns: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-owns")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityOwns: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-owns")).toBe("abc");
      var _render2 = render(createElement("div", {
        accessibilityOwns: [
          "abc",
          "def"
        ]
      })), hasMultipleValues = _render2.container;
      expect(getAttribute(hasMultipleValues, "aria-owns")).toBe("abc def");
    }), test("accessibilityPlaceholder", function() {
      var _render = render(createElement("div", {
        accessibilityPlaceholder: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-placeholder")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityPlaceholder: "MM-DD-YYYY"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-placeholder")).toBe("MM-DD-YYYY");
    }), test("accessibilityPosInSet", function() {
      var _render = render(createElement("div", {
        accessibilityPosInSet: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-posinset")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityPosInSet: 3
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-posinset")).toBe("3");
    }), test("accessibilityPressed", function() {
      var _render = render(createElement("div", {
        accessibilityPressed: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-pressed")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityPressed: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-pressed")).toBe("true");
    }), test("accessibilityReadOnly", function() {
      var _render = render(createElement("input", {
        accessibilityReadOnly: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-readonly")).toBeNull(), expect(getProperty(isEmpty, "readOnly")).toBe(!1);
      var _render1 = render(createElement("input", {
        accessibilityReadOnly: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-readonly")).toBe("true"), expect(getProperty(hasValue, "readOnly")).toBe(!0);
    }), test("accessibilityRequired", function() {
      var _render = render(createElement("input", {
        accessibilityRequired: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-required")).toBeNull(), expect(getProperty(isEmpty, "required")).toBe(!1);
      var _render1 = render(createElement("input", {
        accessibilityRequired: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-required")).toBe("true"), expect(getProperty(hasValue, "required")).toBe(!0);
    }), test("accessibilityRole", function() {
      var _render = render(createElement("div", {
        accessibilityRole: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "role")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityRole: "button"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "role")).toBe("button"), expect(getAttribute(hasValue, "tabIndex")).toBe("0");
      var _render2 = render(createElement("div", {
        accessibilityRole: "none"
      })), roleIsNone = _render2.container;
      expect(getAttribute(roleIsNone, "role")).toBe("presentation");
    }), test("accessibilityRoleDescription", function() {
      var _render = render(createElement("div", {
        accessibilityRoleDescription: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-roledescription")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityRoleDescription: "abc"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-roledescription")).toBe("abc");
    }), test("accessibilityRowCount", function() {
      var _render = render(createElement("div", {
        accessibilityRowCount: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-rowcount")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityRowCount: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-rowcount")).toBe("5");
    }), test("accessibilityRowIndex", function() {
      var _render = render(createElement("div", {
        accessibilityRowIndex: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-rowindex")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityRowIndex: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-rowindex")).toBe("5");
    }), test("accessibilityRowSpan", function() {
      var _render = render(createElement("div", {
        accessibilityRowSpan: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-rowspan")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityRowSpan: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-rowspan")).toBe("5");
    }), test("accessibilitySelected", function() {
      var _render = render(createElement("div", {
        accessibilitySelected: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-selected")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilitySelected: !0
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-selected")).toBe("true");
    }), test("accessibilitySetSize", function() {
      var _render = render(createElement("div", {
        accessibilitySetSize: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-setsize")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilitySetSize: 5
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-setsize")).toBe("5");
    }), test("accessibilitySort", function() {
      var _render = render(createElement("div", {
        accessibilitySort: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-sort")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilitySort: "ascending"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-sort")).toBe("ascending");
    }), test("accessibilityValueMax", function() {
      var _render = render(createElement("div", {
        accessibilityValueMax: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-valuemax")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityValueMax: 100
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-valuemax")).toBe("100");
    }), test("accessibilityValueMin", function() {
      var _render = render(createElement("div", {
        accessibilityValueMin: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-valuemin")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityValueMin: 10
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-valuemin")).toBe("10");
    }), test("accessibilityValueNow", function() {
      var _render = render(createElement("div", {
        accessibilityValueNow: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-valuenow")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityValueNow: 50
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-valuenow")).toBe("50");
    }), test("accessibilityValueText", function() {
      var _render = render(createElement("div", {
        accessibilityValueText: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "aria-valuetext")).toBeNull();
      var _render1 = render(createElement("div", {
        accessibilityValueText: "fifty"
      })), hasValue = _render1.container;
      expect(getAttribute(hasValue, "aria-valuetext")).toBe("fifty");
    }), test("dataSet", function() {
      var _render = render(createElement("div", {
        dataSet: {
          one: "1",
          two: "2",
          camelCase: "camelCase",
          msPrefix: "msPrefix"
        }
      })), hasValue = _render.container;
      expect(hasValue.firstChild).toMatchInlineSnapshot(`
        <div
          data-camel-case="camelCase"
          data-ms-prefix="msPrefix"
          data-one="1"
          data-two="2"
        />
      `);
    }), test("focusable", function() {
      var _render = render(createElement("div", {
        focusable: null
      })), isEmpty = _render.container;
      expect(getAttribute(isEmpty, "tabindex")).toBeNull();
      var _render1 = render(createElement("div", {
        focusable: !0
      })), isTrue = _render1.container;
      expect(getAttribute(isTrue, "tabindex")).toBe("0");
      var _render2 = render(createElement("button", {
        focusable: !1
      })), isFalseNativelyFocusable = _render2.container;
      expect(getAttribute(isFalseNativelyFocusable, "tabindex")).toBe("-1");
      var _render3 = render(createElement("button", {
        accessibilityDisabled: !0,
        focusable: !0
      })), isDisabledNativelyFocusable = _render3.container;
      expect(getAttribute(isDisabledNativelyFocusable, "tabindex")).toBe("-1");
      var _render4 = render(createElement("button", {
        focusable: !0
      })), isTrueNativelyFocusable = _render4.container;
      expect(getAttribute(isTrueNativelyFocusable, "tabindex")).toBeNull();
      var _render5 = render(createElement("div", {
        accessibilityRole: "button",
        focusable: !0
      })), isFocusableRole = _render5.container;
      expect(getAttribute(isFocusableRole, "tabindex")).toBe("0");
      var _render6 = render(createElement("div", {
        accessibilityRole: "button",
        focusable: !1
      })), isFalseFocusableRole = _render6.container;
      expect(getAttribute(isFalseFocusableRole, "tabindex")).toBe("-1");
    });
  });
});
//# sourceMappingURL=index-test.js.map
