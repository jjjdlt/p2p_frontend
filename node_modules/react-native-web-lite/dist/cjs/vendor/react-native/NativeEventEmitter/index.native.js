"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var NativeEventEmitter_exports = {};
__export(NativeEventEmitter_exports, {
  default: () => NativeEventEmitter
});
module.exports = __toCommonJS(NativeEventEmitter_exports);
var import_react_native_web_internals = require("react-native-web-internals"), import_react_native_web_internals2 = require("react-native-web-internals"), import_RCTDeviceEventEmitter = __toESM(require("./RCTDeviceEventEmitter"));
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var NativeEventEmitter = /* @__PURE__ */ function() {
  function NativeEventEmitter2(nativeModule) {
    _class_call_check(this, NativeEventEmitter2), import_react_native_web_internals2.Platform.OS === "ios" && ((0, import_react_native_web_internals.invariant)(nativeModule != null, "`new NativeEventEmitter()` requires a non-null argument."), this._nativeModule = nativeModule);
  }
  return _create_class(NativeEventEmitter2, [
    {
      key: "addListener",
      value: function(eventType, listener, context) {
        var _this = this, _this$_nativeModule;
        (_this$_nativeModule = this._nativeModule) == null || _this$_nativeModule.addListener(eventType);
        var subscription = import_RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
          remove: function() {
            if (subscription != null) {
              var _this$_nativeModule2;
              (_this$_nativeModule2 = _this._nativeModule) == null || _this$_nativeModule2.removeListeners(1), subscription.remove(), subscription = null;
            }
          }
        };
      }
    },
    {
      /**
      * @deprecated Use `remove` on the EventSubscription from `addListener`.
      */
      key: "removeListener",
      value: function(eventType, listener) {
        var _this$_nativeModule3;
        (_this$_nativeModule3 = this._nativeModule) == null || _this$_nativeModule3.removeListeners(1), import_RCTDeviceEventEmitter.default.removeListener(eventType, listener);
      }
    },
    {
      key: "emit",
      value: function(eventType) {
        for (var _RCTDeviceEventEmitter, _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
          args[_key - 1] = arguments[_key];
        (_RCTDeviceEventEmitter = import_RCTDeviceEventEmitter.default).emit.apply(_RCTDeviceEventEmitter, [
          eventType
        ].concat(_to_consumable_array(args)));
      }
    },
    {
      key: "removeAllListeners",
      value: function(eventType) {
        var _this$_nativeModule4;
        (0, import_react_native_web_internals.invariant)(eventType != null, "`NativeEventEmitter.removeAllListener()` requires a non-null argument."), (_this$_nativeModule4 = this._nativeModule) == null || _this$_nativeModule4.removeListeners(this.listenerCount(eventType)), import_RCTDeviceEventEmitter.default.removeAllListeners(eventType);
      }
    },
    {
      key: "listenerCount",
      value: function(eventType) {
        return import_RCTDeviceEventEmitter.default.listenerCount(eventType);
      }
    }
  ]), NativeEventEmitter2;
}();
//# sourceMappingURL=index.js.map
