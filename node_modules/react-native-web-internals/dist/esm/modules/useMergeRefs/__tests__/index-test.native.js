import { jsx as _jsx } from "react/jsx-runtime";
import { cleanup, render } from "@testing-library/react";
import * as React from "react";
import { act } from "react-dom/test-utils";
import useMergeRefs from "..";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_without_holes(arr) {
  if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
function _iterable_to_array(iter) {
  if (typeof Symbol < "u" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {}, ownKeys = Object.keys(source);
    typeof Object.getOwnPropertySymbols == "function" && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
    }))), ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _to_consumable_array(arr) {
  return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
describe("modules/useMergeRefs/index.js", function() {
  var TestComponent = function(_param) {
    var refs = _param.refs, rest = _object_without_properties(_param, [
      "refs"
    ]), mergedRef = useMergeRefs.apply(void 0, _to_consumable_array(refs));
    return /* @__PURE__ */ _jsx("div", _object_spread({
      ref: mergedRef
    }, rest));
  };
  afterEach(cleanup), test("handles no refs", function() {
    act(function() {
      render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: []
      }));
    });
  }), test("merges any number of varying refs", function() {
    var callbackRef1 = jest.fn(), callbackRef2 = jest.fn(), objectRef1 = /* @__PURE__ */ React.createRef(), objectRef2 = /* @__PURE__ */ React.createRef(), nullRef = null;
    act(function() {
      render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          callbackRef1,
          callbackRef2,
          objectRef1,
          objectRef2,
          nullRef
        ]
      }));
    }), expect(callbackRef1).toHaveBeenCalledTimes(1), expect(callbackRef2).toHaveBeenCalledTimes(1), expect(objectRef1.current).toBeInstanceOf(HTMLDivElement), expect(objectRef2.current).toBeInstanceOf(HTMLDivElement);
  }), test("ref is called when ref changes", function() {
    var ref = jest.fn(), nextRef = jest.fn(), rerender;
    act(function() {
      rerender = render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      })).rerender;
    }), expect(ref).toHaveBeenCalled(), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          nextRef
        ]
      }));
    }), expect(nextRef).toHaveBeenCalled();
  }), test("ref is not called for each rerender", function() {
    var ref = jest.fn(), rerender;
    act(function() {
      rerender = render(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      })).rerender;
    }), expect(ref).toHaveBeenCalledTimes(1), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        refs: [
          ref
        ]
      }));
    }), expect(ref).toHaveBeenCalledTimes(1);
  }), test("ref is not called for props changes", function() {
    var ref = jest.fn(), rerender;
    act(function() {
      rerender = render(/* @__PURE__ */ _jsx(TestComponent, {
        id: "foo",
        refs: [
          ref
        ]
      })).rerender;
    }), expect(ref).toHaveBeenCalledTimes(1), act(function() {
      rerender(/* @__PURE__ */ _jsx(TestComponent, {
        id: "bar",
        refs: [
          ref
        ]
      }));
    }), expect(ref).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=index-test.js.map
