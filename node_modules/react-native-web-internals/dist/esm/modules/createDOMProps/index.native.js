import StyleSheet from "../../StyleSheet/index";
import AccessibilityUtil from "../AccessibilityUtil/index";
function _array_like_to_array(arr, len) {
  (len == null || len > arr.length) && (len = arr.length);
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _array_with_holes(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
  var _i = arr == null ? null : typeof Symbol < "u" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i != null) {
    var _arr = [], _n = !0, _d = !1, _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !(i && _arr.length === i)); _n = !0)
        ;
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        !_n && _i.return != null && _i.return();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _non_iterable_rest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_without_properties(source, excluded) {
  if (source == null) return {};
  var target = _object_without_properties_loose(source, excluded), key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++)
      key = sourceSymbolKeys[i], !(excluded.indexOf(key) >= 0) && Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);
  }
  return target;
}
function _object_without_properties_loose(source, excluded) {
  if (source == null) return {};
  var target = {}, sourceKeys = Object.keys(source), key, i;
  for (i = 0; i < sourceKeys.length; i++)
    key = sourceKeys[i], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
  return target;
}
function _sliced_to_array(arr, i) {
  return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
  if (o) {
    if (typeof o == "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
  }
}
var emptyObject = {}, hasOwnProperty = Object.prototype.hasOwnProperty, isArray = Array.isArray, uppercasePattern = /[A-Z]/g;
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
function hyphenateString(str) {
  return str.replace(uppercasePattern, toHyphenLower);
}
function processIDRefList(idRefList) {
  return isArray(idRefList) ? idRefList.join(" ") : idRefList;
}
var pointerEventsStyles = StyleSheet.create({
  auto: {
    pointerEvents: "auto"
  },
  "box-none": {
    pointerEvents: "box-none"
  },
  "box-only": {
    pointerEvents: "box-only"
  },
  none: {
    pointerEvents: "none"
  }
}), createDOMProps = function(elementType, props, options) {
  props || (props = emptyObject);
  var accessibilityActiveDescendant = props.accessibilityActiveDescendant, accessibilityAtomic = props.accessibilityAtomic, accessibilityAutoComplete = props.accessibilityAutoComplete, accessibilityBusy = props.accessibilityBusy, accessibilityChecked = props.accessibilityChecked, accessibilityColumnCount = props.accessibilityColumnCount, accessibilityColumnIndex = props.accessibilityColumnIndex, accessibilityColumnSpan = props.accessibilityColumnSpan, accessibilityControls = props.accessibilityControls, accessibilityCurrent = props.accessibilityCurrent, accessibilityDescribedBy = props.accessibilityDescribedBy, accessibilityDetails = props.accessibilityDetails, accessibilityDisabled = props.accessibilityDisabled, accessibilityErrorMessage = props.accessibilityErrorMessage, accessibilityExpanded = props.accessibilityExpanded, accessibilityFlowTo = props.accessibilityFlowTo, accessibilityHasPopup = props.accessibilityHasPopup, accessibilityHidden = props.accessibilityHidden, accessibilityInvalid = props.accessibilityInvalid, accessibilityKeyShortcuts = props.accessibilityKeyShortcuts, accessibilityLabel = props.accessibilityLabel, accessibilityLabelledBy = props.accessibilityLabelledBy, accessibilityLevel = props.accessibilityLevel, accessibilityLiveRegion = props.accessibilityLiveRegion, accessibilityModal = props.accessibilityModal, accessibilityMultiline = props.accessibilityMultiline, accessibilityMultiSelectable = props.accessibilityMultiSelectable, accessibilityOrientation = props.accessibilityOrientation, accessibilityOwns = props.accessibilityOwns, accessibilityPlaceholder = props.accessibilityPlaceholder, accessibilityPosInSet = props.accessibilityPosInSet, accessibilityPressed = props.accessibilityPressed, accessibilityReadOnly = props.accessibilityReadOnly, accessibilityRequired = props.accessibilityRequired, accessibilityRole = props.accessibilityRole, accessibilityRoleDescription = props.accessibilityRoleDescription, accessibilityRowCount = props.accessibilityRowCount, accessibilityRowIndex = props.accessibilityRowIndex, accessibilityRowSpan = props.accessibilityRowSpan, accessibilitySelected = props.accessibilitySelected, accessibilitySetSize = props.accessibilitySetSize, accessibilitySort = props.accessibilitySort, accessibilityValueMax = props.accessibilityValueMax, accessibilityValueMin = props.accessibilityValueMin, accessibilityValueNow = props.accessibilityValueNow, accessibilityValueText = props.accessibilityValueText, dataSet = props.dataSet, focusable = props.focusable, nativeID = props.nativeID, pointerEvents = props.pointerEvents, style = props.style, testID = props.testID, id = props.id, domProps = _object_without_properties(props, [
    "accessibilityActiveDescendant",
    "accessibilityAtomic",
    "accessibilityAutoComplete",
    "accessibilityBusy",
    "accessibilityChecked",
    "accessibilityColumnCount",
    "accessibilityColumnIndex",
    "accessibilityColumnSpan",
    "accessibilityControls",
    "accessibilityCurrent",
    "accessibilityDescribedBy",
    "accessibilityDetails",
    "accessibilityDisabled",
    "accessibilityErrorMessage",
    "accessibilityExpanded",
    "accessibilityFlowTo",
    "accessibilityHasPopup",
    "accessibilityHidden",
    "accessibilityInvalid",
    "accessibilityKeyShortcuts",
    "accessibilityLabel",
    "accessibilityLabelledBy",
    "accessibilityLevel",
    "accessibilityLiveRegion",
    "accessibilityModal",
    "accessibilityMultiline",
    "accessibilityMultiSelectable",
    "accessibilityOrientation",
    "accessibilityOwns",
    "accessibilityPlaceholder",
    "accessibilityPosInSet",
    "accessibilityPressed",
    "accessibilityReadOnly",
    "accessibilityRequired",
    "accessibilityRole",
    "accessibilityRoleDescription",
    "accessibilityRowCount",
    "accessibilityRowIndex",
    "accessibilityRowSpan",
    "accessibilitySelected",
    "accessibilitySetSize",
    "accessibilitySort",
    "accessibilityValueMax",
    "accessibilityValueMin",
    "accessibilityValueNow",
    "accessibilityValueText",
    "dataSet",
    "focusable",
    "nativeID",
    "pointerEvents",
    "style",
    "testID",
    "id"
  ]), disabled = accessibilityDisabled, role = AccessibilityUtil.propsToAriaRole(props);
  accessibilityActiveDescendant != null && (domProps["aria-activedescendant"] = accessibilityActiveDescendant), accessibilityAtomic != null && (domProps["aria-atomic"] = accessibilityAtomic), accessibilityAutoComplete != null && (domProps["aria-autocomplete"] = accessibilityAutoComplete), accessibilityBusy != null && (domProps["aria-busy"] = accessibilityBusy), accessibilityChecked != null && (domProps["aria-checked"] = accessibilityChecked), accessibilityColumnCount != null && (domProps["aria-colcount"] = accessibilityColumnCount), accessibilityColumnIndex != null && (domProps["aria-colindex"] = accessibilityColumnIndex), accessibilityColumnSpan != null && (domProps["aria-colspan"] = accessibilityColumnSpan), accessibilityControls != null && (domProps["aria-controls"] = processIDRefList(accessibilityControls)), accessibilityCurrent != null && (domProps["aria-current"] = accessibilityCurrent), accessibilityDescribedBy != null && (domProps["aria-describedby"] = processIDRefList(accessibilityDescribedBy)), accessibilityDetails != null && (domProps["aria-details"] = accessibilityDetails), disabled === !0 && (domProps["aria-disabled"] = !0, (elementType === "button" || elementType === "form" || elementType === "input" || elementType === "select" || elementType === "textarea") && (domProps.disabled = !0)), accessibilityErrorMessage != null && (domProps["aria-errormessage"] = accessibilityErrorMessage), accessibilityExpanded != null && (domProps["aria-expanded"] = accessibilityExpanded), accessibilityFlowTo != null && (domProps["aria-flowto"] = processIDRefList(accessibilityFlowTo)), accessibilityHasPopup != null && (domProps["aria-haspopup"] = accessibilityHasPopup), accessibilityHidden === !0 && (domProps["aria-hidden"] = accessibilityHidden), accessibilityInvalid != null && (domProps["aria-invalid"] = accessibilityInvalid), accessibilityKeyShortcuts != null && Array.isArray(accessibilityKeyShortcuts) && (domProps["aria-keyshortcuts"] = accessibilityKeyShortcuts.join(" ")), accessibilityLabel != null && (domProps["aria-label"] = accessibilityLabel), accessibilityLabelledBy != null && (domProps["aria-labelledby"] = processIDRefList(accessibilityLabelledBy)), accessibilityLevel != null && (domProps["aria-level"] = accessibilityLevel), accessibilityLiveRegion != null && (domProps["aria-live"] = accessibilityLiveRegion === "none" ? "off" : accessibilityLiveRegion), accessibilityModal != null && (domProps["aria-modal"] = accessibilityModal), accessibilityMultiline != null && (domProps["aria-multiline"] = accessibilityMultiline), accessibilityMultiSelectable != null && (domProps["aria-multiselectable"] = accessibilityMultiSelectable), accessibilityOrientation != null && (domProps["aria-orientation"] = accessibilityOrientation), accessibilityOwns != null && (domProps["aria-owns"] = processIDRefList(accessibilityOwns)), accessibilityPlaceholder != null && (domProps["aria-placeholder"] = accessibilityPlaceholder), accessibilityPosInSet != null && (domProps["aria-posinset"] = accessibilityPosInSet), accessibilityPressed != null && (domProps["aria-pressed"] = accessibilityPressed), accessibilityReadOnly != null && (domProps["aria-readonly"] = accessibilityReadOnly, (elementType === "input" || elementType === "select" || elementType === "textarea") && (domProps.readOnly = !0)), accessibilityRequired != null && (domProps["aria-required"] = accessibilityRequired, (elementType === "input" || elementType === "select" || elementType === "textarea") && (domProps.required = !0)), role != null && (domProps.role = role === "none" ? "presentation" : role), accessibilityRoleDescription != null && (domProps["aria-roledescription"] = accessibilityRoleDescription), accessibilityRowCount != null && (domProps["aria-rowcount"] = accessibilityRowCount), accessibilityRowIndex != null && (domProps["aria-rowindex"] = accessibilityRowIndex), accessibilityRowSpan != null && (domProps["aria-rowspan"] = accessibilityRowSpan), accessibilitySelected != null && (domProps["aria-selected"] = accessibilitySelected), accessibilitySetSize != null && (domProps["aria-setsize"] = accessibilitySetSize), accessibilitySort != null && (domProps["aria-sort"] = accessibilitySort), accessibilityValueMax != null && (domProps["aria-valuemax"] = accessibilityValueMax), accessibilityValueMin != null && (domProps["aria-valuemin"] = accessibilityValueMin), accessibilityValueNow != null && (domProps["aria-valuenow"] = accessibilityValueNow), accessibilityValueText != null && (domProps["aria-valuetext"] = accessibilityValueText);
  var tmgCN = dataSet ? dataSet.className : void 0, tmgID = dataSet ? dataSet.id : void 0;
  if (dataSet != null) {
    for (var dataProp in dataSet)
      if (!(dataProp === "className" || dataProp === "id") && hasOwnProperty.call(dataSet, dataProp)) {
        var dataName = hyphenateString(dataProp), dataValue = dataSet[dataProp];
        dataValue != null && (domProps["data-".concat(dataName)] = dataValue);
      }
  }
  focusable === !1 && (domProps.tabIndex = "-1"), // These native elements are keyboard focusable by default
  elementType === "a" || elementType === "button" || elementType === "input" || elementType === "select" || elementType === "textarea" ? (focusable === !1 || accessibilityDisabled === !0) && (domProps.tabIndex = "-1") : /* These roles are made keyboard focusable by default */ role === "button" || role === "checkbox" || role === "link" || role === "radio" || role === "textbox" || role === "switch" ? focusable !== !1 && (domProps.tabIndex = "0") : focusable === !0 && (domProps.tabIndex = "0");
  var _StyleSheet = _sliced_to_array(StyleSheet([
    style,
    pointerEvents && pointerEventsStyles[pointerEvents]
  ], {
    writingDirection: options ? options.writingDirection : "ltr"
  }), 2), className = _StyleSheet[0], inlineStyle = _StyleSheet[1];
  className && (domProps.className = className), tmgCN && (domProps.className = tmgCN), inlineStyle && (domProps.style = inlineStyle);
  var _id = tmgID || id || nativeID;
  return _id && (domProps.id = _id), testID != null && (domProps["data-testid"] = testID), domProps;
}, createDOMProps_default = createDOMProps;
export {
  createDOMProps_default as default
};
//# sourceMappingURL=index.js.map
