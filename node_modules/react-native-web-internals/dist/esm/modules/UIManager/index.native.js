import getBoundingClientRect from "../getBoundingClientRect/index";
import setValueForStyles from "../setValueForStyles/index";
var getRect = function(node) {
  var _getBoundingClientRect = getBoundingClientRect(node), x = _getBoundingClientRect.x, y = _getBoundingClientRect.y, top = _getBoundingClientRect.top, left = _getBoundingClientRect.left, width = node.offsetWidth, height = node.offsetHeight;
  return {
    x,
    y,
    width,
    height,
    top,
    left
  };
}, measureLayout = function(node, relativeToNativeNode, callback) {
  var relativeNode = relativeToNativeNode || node && node.parentNode;
  node && relativeNode && setTimeout(function() {
    var relativeRect = getBoundingClientRect(relativeNode), _getRect = getRect(node), height = _getRect.height, left = _getRect.left, top = _getRect.top, width = _getRect.width, x = left - relativeRect.left, y = top - relativeRect.top;
    callback(x, y, width, height, left, top);
  }, 0);
}, focusableElements = {
  A: !0,
  INPUT: !0,
  SELECT: !0,
  TEXTAREA: !0
}, UIManager = {
  blur: function(node) {
    try {
      node.blur();
    } catch {
    }
  },
  //
  focus: function(node) {
    try {
      var name = node.nodeName;
      node.getAttribute("tabIndex") == null && focusableElements[name] == null && node.setAttribute("tabIndex", "-1"), node.focus();
    } catch {
    }
  },
  //
  measure: function(node, callback) {
    measureLayout(node, null, callback);
  },
  measureInWindow: function(node, callback) {
    node && setTimeout(function() {
      var _getRect = getRect(node), height = _getRect.height, left = _getRect.left, top = _getRect.top, width = _getRect.width;
      callback(left, top, width, height);
    }, 0);
  },
  measureLayout: function(node, relativeToNativeNode, onFail, onSuccess) {
    measureLayout(node, relativeToNativeNode, onSuccess);
  },
  updateView: function(node, props) {
    for (var prop in props)
      if (Object.prototype.hasOwnProperty.call(props, prop)) {
        var value = props[prop];
        switch (prop) {
          case "style": {
            setValueForStyles(node, value);
            break;
          }
          case "class":
          case "className": {
            node.setAttribute("class", value);
            break;
          }
          case "text":
          case "value":
            node.value = value;
            break;
          default:
            node.setAttribute(prop, value);
        }
      }
  },
  configureNextLayoutAnimation: function(config, onAnimationDidEnd) {
    onAnimationDidEnd();
  },
  // mocks
  setLayoutAnimationEnabledExperimental: function() {
  }
}, UIManager_default = UIManager;
export {
  UIManager_default as default
};
//# sourceMappingURL=index.js.map
