import normalizeColor from "./compiler/normalizeColor";
import normalizeValueWithProperty from "./compiler/normalizeValueWithProperty";
var emptyObject = {}, defaultOffset = {
  height: 0,
  width: 0
}, createBoxShadowValue = function(style) {
  var shadowColor = style.shadowColor, shadowOffset = style.shadowOffset, shadowOpacity = style.shadowOpacity, shadowRadius = style.shadowRadius, _ref = shadowOffset || defaultOffset, height = _ref.height, width = _ref.width, offsetX = normalizeValueWithProperty(width), offsetY = normalizeValueWithProperty(height), blurRadius = normalizeValueWithProperty(shadowRadius || 0), color = normalizeColor(shadowColor || "black", shadowOpacity);
  if (color != null && offsetX != null && offsetY != null && blurRadius != null)
    return "".concat(offsetX, " ").concat(offsetY, " ").concat(blurRadius, " ").concat(color);
}, createTextShadowValue = function(style) {
  var textShadowColor = style.textShadowColor, textShadowOffset = style.textShadowOffset, textShadowRadius = style.textShadowRadius, _ref = textShadowOffset || defaultOffset, height = _ref.height, width = _ref.width, radius = textShadowRadius || 0, offsetX = normalizeValueWithProperty(width), offsetY = normalizeValueWithProperty(height), blurRadius = normalizeValueWithProperty(radius), color = normalizeValueWithProperty(textShadowColor, "textShadowColor");
  if (color && (height !== 0 || width !== 0 || radius !== 0) && offsetX != null && offsetY != null && blurRadius != null)
    return "".concat(offsetX, " ").concat(offsetY, " ").concat(blurRadius, " ").concat(color);
}, preprocess = function(originalStyle) {
  var style = originalStyle || emptyObject, nextStyle = {};
  for (var originalProp in style) {
    var originalValue = style[originalProp], prop = originalProp, value = originalValue;
    if (!(!Object.prototype.hasOwnProperty.call(style, originalProp) || originalValue == null)) {
      if (prop === "shadowColor" || prop === "shadowOffset" || prop === "shadowOpacity" || prop === "shadowRadius") {
        var boxShadowValue = createBoxShadowValue(style);
        if (boxShadowValue != null && nextStyle.boxShadow == null) {
          var boxShadow = style.boxShadow;
          prop = "boxShadow", value = boxShadow ? "".concat(boxShadow, ", ").concat(boxShadowValue) : boxShadowValue;
        } else
          continue;
      }
      if (prop === "textShadowColor" || prop === "textShadowOffset" || prop === "textShadowRadius") {
        var textShadowValue = createTextShadowValue(style);
        if (textShadowValue != null && nextStyle.textShadow == null) {
          var textShadow = style.textShadow;
          prop = "textShadow", value = textShadow ? "".concat(textShadow, ", ").concat(textShadowValue) : textShadowValue;
        } else
          continue;
      }
      nextStyle[prop] = value;
    }
  }
  return nextStyle;
}, processStyle = preprocess;
export {
  createBoxShadowValue,
  createTextShadowValue,
  preprocess,
  processStyle
};
//# sourceMappingURL=preprocess.js.map
