"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var UIManager_exports = {};
__export(UIManager_exports, {
  default: () => UIManager_default
});
module.exports = __toCommonJS(UIManager_exports);
var import_getBoundingClientRect = __toESM(require("../getBoundingClientRect/index")), import_setValueForStyles = __toESM(require("../setValueForStyles/index")), getRect = function(node) {
  var _getBoundingClientRect = (0, import_getBoundingClientRect.default)(node), x = _getBoundingClientRect.x, y = _getBoundingClientRect.y, top = _getBoundingClientRect.top, left = _getBoundingClientRect.left, width = node.offsetWidth, height = node.offsetHeight;
  return {
    x,
    y,
    width,
    height,
    top,
    left
  };
}, measureLayout = function(node, relativeToNativeNode, callback) {
  var relativeNode = relativeToNativeNode || node && node.parentNode;
  node && relativeNode && setTimeout(function() {
    var relativeRect = (0, import_getBoundingClientRect.default)(relativeNode), _getRect = getRect(node), height = _getRect.height, left = _getRect.left, top = _getRect.top, width = _getRect.width, x = left - relativeRect.left, y = top - relativeRect.top;
    callback(x, y, width, height, left, top);
  }, 0);
}, focusableElements = {
  A: !0,
  INPUT: !0,
  SELECT: !0,
  TEXTAREA: !0
}, UIManager = {
  blur: function(node) {
    try {
      node.blur();
    } catch {
    }
  },
  //
  focus: function(node) {
    try {
      var name = node.nodeName;
      node.getAttribute("tabIndex") == null && focusableElements[name] == null && node.setAttribute("tabIndex", "-1"), node.focus();
    } catch {
    }
  },
  //
  measure: function(node, callback) {
    measureLayout(node, null, callback);
  },
  measureInWindow: function(node, callback) {
    node && setTimeout(function() {
      var _getRect = getRect(node), height = _getRect.height, left = _getRect.left, top = _getRect.top, width = _getRect.width;
      callback(left, top, width, height);
    }, 0);
  },
  measureLayout: function(node, relativeToNativeNode, onFail, onSuccess) {
    measureLayout(node, relativeToNativeNode, onSuccess);
  },
  updateView: function(node, props) {
    for (var prop in props)
      if (Object.prototype.hasOwnProperty.call(props, prop)) {
        var value = props[prop];
        switch (prop) {
          case "style": {
            (0, import_setValueForStyles.default)(node, value);
            break;
          }
          case "class":
          case "className": {
            node.setAttribute("class", value);
            break;
          }
          case "text":
          case "value":
            node.value = value;
            break;
          default:
            node.setAttribute(prop, value);
        }
      }
  },
  configureNextLayoutAnimation: function(config, onAnimationDidEnd) {
    onAnimationDidEnd();
  },
  // mocks
  setLayoutAnimationEnabledExperimental: function() {
  }
}, UIManager_default = UIManager;
//# sourceMappingURL=index.js.map
